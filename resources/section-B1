
const
  PrefixTable: array[pQuetta..pQuecto] of 
    record  Symbol, Name: string; Factor: double end = (
    (Symbol: 'Q';   Name: 'quetta';  Factor: 1E+30),
    (Symbol: 'R';   Name: 'ronna';   Factor: 1E+27),
    (Symbol: 'Y';   Name: 'yotta';   Factor: 1E+24),
    (Symbol: 'Z';   Name: 'zetta';   Factor: 1E+21),
    (Symbol: 'E';   Name: 'exa';     Factor: 1E+18),  
    (Symbol: 'P';   Name: 'peta';    Factor: 1E+15),
    (Symbol: 'T';   Name: 'tera';    Factor: 1E+12),
    (Symbol: 'G';   Name: 'giga';    Factor: 1E+09),
    (Symbol: 'M';   Name: 'mega';    Factor: 1E+06),
    (Symbol: 'k';   Name: 'kilo';    Factor: 1E+03),
    (Symbol: 'h';   Name: 'hecto';   Factor: 1E+02),
    (Symbol: 'da';  Name: 'deca';    Factor: 1E+01),
    (Symbol: '';    Name:  '';       Factor: 1E+00),
    (Symbol: 'd';   Name: 'deci';    Factor: 1E-01),
    (Symbol: 'c';   Name: 'centi';   Factor: 1E-02),
    (Symbol: 'm';   Name: 'milli';   Factor: 1E-03),
    (Symbol: 'Î¼';   Name: 'micro';   Factor: 1E-06),
    (Symbol: 'n';   Name: 'nano';    Factor: 1E-09),
    (Symbol: 'p';   Name: 'pico';    Factor: 1E-12),
    (Symbol: 'f';   Name: 'femto';   Factor: 1E-15),
    (Symbol: 'a';   Name: 'atto';    Factor: 1E-18),
    (Symbol: 'z';   Name: 'zepto';   Factor: 1E-21),
    (Symbol: 'y';   Name: 'yocto';   Factor: 1E-24),
    (Symbol: 'r';   Name: 'ronto';   Factor: 1E-27),
    (Symbol: 'q';   Name: 'quecto';  Factor: 1E-30)
  );

implementation

uses Math;

{ TQuantity }

function TQuantity.Abs: TSelf;
begin
  result.FValue := System.Abs(FValue);
end;

function TQuantity.Value: double;
begin
  result := FValue;
end;

function TQuantity.Value(const Prefixes: TPrefixes): double;
begin
  result := U.GetValue(FValue, Prefixes);
end; 

function TQuantity.ToString: string;
begin
  result := FloatToStr(FValue) + ' ' + U.GetSymbol([]);
end;

function TQuantity.ToVerboseString: string;
begin
  result := FloatToStr(FValue) + ' ' + U.GetName([]);
end;

function TQuantity.ToString(Precision, Digits: longint; const Prefixes: TPrefixes): string;
begin
  result := FloatToStrF(U.GetValue(FValue, Prefixes), ffGeneral, Precision, Digits) + ' ' + U.GetSymbol(Prefixes);
end;

function TQuantity.ToVerboseString(Precision, Digits: longint; const Prefixes: TPrefixes): string;
begin
  result := FloatToStrF(U.GetValue(FValue, Prefixes), ffGeneral, Precision, Digits) + ' ' + U.GetName(Prefixes);
end;                                             

class operator TQuantity.+(const AValue: TSelf): TSelf;
begin
  result.FValue := AValue.FValue;
end;

class operator TQuantity.-(const AValue: TSelf): TSelf;
begin
  result.FValue := -AValue.FValue;
end;

class operator TQuantity.+(const ALeft, ARight: TSelf): TSelf;
begin
  result.FValue := ALeft.FValue + ARight.FValue;
end;

class operator TQuantity.-(const ALeft, ARight: TSelf): TSelf;
begin
  result.FValue := ALeft.FValue - ARight.FValue;
end;

class operator TQuantity.*(const AValue: double; const ASelf: TSelf): TSelf;
begin
  result.FValue := AValue * ASelf.FValue;
end;

class operator TQuantity.*(const ASelf: TSelf; const AValue: double): TSelf;
begin
  result.FValue := ASelf.FValue * AValue;
end;

class operator TQuantity./(const ASelf: TSelf; const AValue: double): TSelf;
begin
  result.FValue := ASelf.FValue / AValue;
end;

class operator TQuantity./(const ALeft, ARight: TSelf): double;
begin
  result := ALeft.FValue / ARight.FValue;
end;

class operator TQuantity.mod(const ALeft, ARight: TSelf): TSelf;
begin
  result.FValue := ALeft.FValue mod ARight.FValue;
end;

class operator TQuantity.=(const ALeft, ARight: TSelf): boolean;
begin
  result := ALeft.FValue = ARight.FValue;
end;

class operator TQuantity.<(const ALeft, ARight: TSelf): boolean;
begin
  result := ALeft.FValue < ARight.FValue;
end;

class operator TQuantity.>(const ALeft, ARight: TSelf): boolean;
begin
  result := ALeft.FValue > ARight.FValue;
end;

class operator TQuantity.<=(const ALeft, ARight: TSelf): boolean;
begin
  result := ALeft.FValue <= ARight.FValue;
end;

class operator TQuantity.>=(const ALeft, ARight: TSelf): boolean;
begin
  result := ALeft.FValue >= ARight.FValue;
end;

{ TUnitId }

class function TUnitId.From(const AQuantity: TBaseQuantity): TBaseQuantity;
begin
  result.FValue := AQuantity.FValue;
end;

class operator TUnitId.*(const AValue: double; const ASelf: TSelf): TBaseQuantity;
begin
  result.FValue := AValue;
end;
