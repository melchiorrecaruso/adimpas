{
  Description: ADimPas library.

  Copyright (C) 2023-2024 Melchiorre Caruso <melchiorrecaruso@gmail.com>

  This library is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
}

{
  ADimPas library built on 28/07/2024.

  Number of base units: 161
  Number of factored units: 116
  Number of operators: 2526 (318 external, 2208 internal)
}

unit ADim;

{$H+}{$J-}
{$modeswitch typehelpers}
{$modeswitch advancedrecords}
{$WARN 5024 OFF} // Suppress warning for unused routine parameter.
{$WARN 5033 OFF} // Suppress warning for unassigned function's return value.
{$MACRO ON}

interface

uses SysUtils;

type
  { Prefix }
  TPrefix = (pQuetta, pRonna, pYotta, pZetta, pExa, pPeta, pTera, pGiga, pMega, pKilo, pHecto, pDeca,
    pNone, pDeci, pCenti, pMilli, pMicro, pNano, pPico, pFemto, pAtto, pZepto, pYocto, pRonto, pQuecto);

  { Prefixes }
  TPrefixes = array of TPrefix;

  { Exponents }
  TExponents = array of longint;

{ TQuantity classes }

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSexticMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TLumenSecondPerCubicMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareCoulombQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TQuinticMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareAmpereQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicMeterQty}{$i adim.inc}
  class operator /(const ALeft: TSexticMeterQty; const ARight: TCubicMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TCubicMeterQty): TSexticMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterQuarticKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareJouleSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonCubicMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterSteradianQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicMeterSteradianQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareNewtonQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TQuinticSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSexticSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonSquareMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPoiseuilleQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TQuarticKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareKelvinQty}{$i adim.inc}
  class operator /(const ALeft: TQuarticKelvinQty; const ARight: TSquareKelvinQty): TSquareKelvinQty; inline;
  class operator *(const ALeft: TSquareKelvinQty; const ARight: TSquareKelvinQty): TQuarticKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TQuarticSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSteradianHertzQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TLumenQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TVoltMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterSteradianHertzQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareJouleQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMoleKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareCoulombQty}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TSquareCoulombQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareCoulombQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSteradianQty}{$i adim.inc}
  class operator /(const ALeft: TCubicMeterSteradianQty; const ARight: TSteradianQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TCubicMeterQty): TCubicMeterSteradianQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TSteradianQty): TCubicMeterSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareSecondQty): TSquareJouleQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareJouleQty): TSquareJouleSquareSecondQty; inline;
  class operator *(const ALeft: TSquareJouleQty; const ARight: TSquareSecondQty): TSquareJouleSquareSecondQty; inline;
  class operator /(const ALeft: TSexticSecondQty; const ARight: TSquareSecondQty): TQuarticSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TSquareSecondQty): TSexticSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TQuarticSecondQty): TSexticSecondQty; inline;
  class operator /(const ALeft: TQuarticSecondQty; const ARight: TSquareSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareSecondQty): TQuarticSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TTeslaMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TLuxSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCoulombMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJouleQty}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleQty; const ARight: TJouleQty): TJouleQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TJouleQty): TSquareJouleQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TJouleQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TSquareSecondQty): TKilogramSquareMeterQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TJouleQty): TKilogramSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TOhmMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramSquareMeterPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWeberQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonRadianQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TQuarticMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCoulombQty}{$i adim.inc}
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TCoulombQty): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TCoulombQty): TSquareCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterSteradianQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterQty}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterQty): TSteradianHertzQty; inline;
  class operator *(const ALeft: TSteradianHertzQty; const ARight: TSquareMeterQty): TSquareMeterSteradianHertzQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSteradianHertzQty): TSquareMeterSteradianHertzQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianQty; const ARight: TSquareMeterQty): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TSquareMeterQty): TSquareMeterSteradianQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSteradianQty): TSquareMeterSteradianQty; inline;
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareMeterQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramSquareMeterPerSquareSecondQty): TSquareJouleSquareSecondQty; inline;
  class operator *(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TSquareMeterQty): TSquareJouleSquareSecondQty; inline;
  class operator /(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TSquareMeterQty): TQuarticKelvinQty; inline;
  class operator *(const ALeft: TQuarticKelvinQty; const ARight: TSquareMeterQty): TSquareMeterQuarticKelvinQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TQuarticKelvinQty): TSquareMeterQuarticKelvinQty; inline;
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TSquareMeterQty): TJouleQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TJouleQty): TNewtonCubicMeterQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TSquareMeterQty): TNewtonCubicMeterQty; inline;
  class operator /(const ALeft: TSexticMeterQty; const ARight: TSquareMeterQty): TQuarticMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TQuarticMeterQty): TSexticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TSquareMeterQty): TSexticMeterQty; inline;
  class operator /(const ALeft: TQuinticMeterQty; const ARight: TSquareMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TCubicMeterQty): TQuinticMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TSquareMeterQty): TQuinticMeterQty; inline;
  class operator /(const ALeft: TQuarticMeterQty; const ARight: TSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSquareMeterQty): TQuarticMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareVoltQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSexticSecondQty; const ARight: TCubicSecondQty): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TCubicSecondQty): TSexticSecondQty; inline;
  class operator /(const ALeft: TQuinticSecondQty; const ARight: TCubicSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TSquareSecondQty): TQuinticSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TCubicSecondQty): TQuinticSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareKilogramQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TSquareKilogramQty; inline;
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TSquareKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TNewtonSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalSquareRootCubicMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareSecondQty}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TKilogramSquareSecondQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TCubicMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TKilogramSquareSecondQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TLumenSecondQty}{$i adim.inc}
  class operator /(const ALeft: TLumenSecondPerCubicMeterQty; const ARight: TLumenSecondQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TLumenSecondQty): TLumenSecondPerCubicMeterQty; inline;
  class operator *(const ALeft: TLumenSecondQty; const ARight: TCubicMeterQty): TLumenSecondPerCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TNewtonQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TNewtonQty): TNewtonCubicMeterQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TCubicMeterQty): TNewtonCubicMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TNewtonQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSquareMeterQty): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TSquareNewtonQty; const ARight: TNewtonQty): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TNewtonQty): TSquareNewtonQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TNewtonQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSquareSecondQty): TKilogramMeterQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TNewtonQty): TKilogramMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TQuarticMeterSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterAmpereQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSquareKilogramQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareMeterPerSquareKilogramQty): TNewtonQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareKilogramQty; const ARight: TNewtonQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareKilogramQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareKilogramQty): TSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareKilogramQty; const ARight: TSquareMeterPerSquareKilogramQty): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TGrayPerSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TVoltMeterPerSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMoleQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TFaradQty}{$i adim.inc}
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TFaradQty): TJouleQty; inline;
  class operator *(const ALeft: TFaradQty; const ARight: TJouleQty): TSquareCoulombQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TFaradQty): TSquareCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalSquareMeterQty}{$i adim.inc}
  class operator *(const ALeft: TSquareJouleSquareSecondQty; const ARight: TReciprocalSquareMeterQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareJouleSquareSecondQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TReciprocalSquareMeterQty): TSquareJouleSquareSecondQty; inline;
  class operator /(const ALeft: double; const ARight: TReciprocalSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareMeterQty): double; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TReciprocalSquareMeterQty): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramPerSquareSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerSquareSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TSquareSecondQty): TSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareKilogramPerSquareSecondQty): TSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramPerMeterQty}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramPerMeterQty): TJouleQty; inline;
  class operator *(const ALeft: TSquareKilogramPerMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSquareKilogramPerMeterQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterPerSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TKilogramMeterPerSecondQty): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramMeterPerSecondQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareCoulombPerMeterQty}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombPerMeterQty): TJouleQty; inline;
  class operator *(const ALeft: TSquareCoulombPerMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSquareCoulombPerMeterQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerMoleQty}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TJoulePerMoleQty): TMoleQty; inline;
  class operator *(const ALeft: TJoulePerMoleQty; const ARight: TMoleQty): TJouleQty; inline;
  class operator *(const ALeft: TMoleQty; const ARight: TJoulePerMoleQty): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TSquareSecondQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareMeterPerSquareSecondQty): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TKilogramPerSecondQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerSecondQty): TSquareKilogramPerSquareSecondQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TKilogramPerSecondQty): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerSecondQty): TWattQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TSquareMeterPerSquareSecondQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TNewtonPerMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TNewtonPerMeterQty; const ARight: TSquareMeterQty): TJouleQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TNewtonPerMeterQty): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerKilogramPerKelvinQty}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TJoulePerKilogramPerKelvinQty): TKilogramKelvinQty; inline;
  class operator *(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKilogramKelvinQty): TJouleQty; inline;
  class operator *(const ALeft: TKilogramKelvinQty; const ARight: TJoulePerKilogramPerKelvinQty): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerSteradianPerHertzQty}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSteradianPerHertzQty): TSteradianHertzQty; inline;
  class operator *(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSteradianHertzQty): TWattQty; inline;
  class operator *(const ALeft: TSteradianHertzQty; const ARight: TWattPerSteradianPerHertzQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TAmperePerMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerSteradianQty}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSteradianQty): TSteradianQty; inline;
  class operator *(const ALeft: TWattPerSteradianQty; const ARight: TSteradianQty): TWattQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerSteradianQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCandelaQty}{$i adim.inc}
  class operator /(const ALeft: TLumenQty; const ARight: TCandelaQty): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TCandelaQty): TLumenQty; inline;
  class operator *(const ALeft: TCandelaQty; const ARight: TSteradianQty): TLumenQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSiemensPerMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicMeterPerSquareSecondQty}{$i adim.inc}
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TMeterPerSquareSecondQty): TSquareMeterQty; inline;
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareMeterQty): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerSquareSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareSecondQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TCubicMeterPerSquareSecondQty): TCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramQty}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TKilogramQty): TNewtonCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TNewtonCubicMeterQty): TSquareJouleSquareSecondQty; inline;
  class operator *(const ALeft: TNewtonCubicMeterQty; const ARight: TKilogramQty): TSquareJouleSquareSecondQty; inline;
  class operator /(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TKilogramQty): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TNewtonPerMeterQty; const ARight: TKilogramQty): TSquareKilogramPerSquareSecondQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TNewtonPerMeterQty): TSquareKilogramPerSquareSecondQty; inline;
  class operator *(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKilogramQty): TJoulePerKelvinQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TJoulePerKilogramPerKelvinQty): TJoulePerKelvinQty; inline;
  class operator /(const ALeft: TJoulePerKelvinQty; const ARight: TKilogramQty): TJoulePerKilogramPerKelvinQty; inline;
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TKilogramQty): TCubicMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TKilogramQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TKilogramQty): TCubicMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TKilogramQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TCubicMeterPerSquareSecondQty): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramSquareSecondQty; const ARight: TKilogramQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TKilogramQty): TKilogramSquareSecondQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareSecondQty): TKilogramSquareSecondQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TKilogramQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TJouleQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TKilogramQty): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TKilogramQty): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramQty): TJouleQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareMeterPerSquareSecondQty): TJouleQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TKilogramQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TKilogramQty): TNewtonQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TMeterPerSquareSecondQty): TNewtonQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TKilogramQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TKilogramQty): TKilogramSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareMeterQty): TKilogramSquareMeterQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TKilogramQty): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TKilogramQty): TSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalMeterQty}{$i adim.inc}
  class operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalMeterQty): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalMeterQty): TReciprocalSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TSquareJouleSquareSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TReciprocalSquareMeterQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondQty): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TReciprocalMeterQty): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TKilogramSquareMeterPerSecondQty): TKilogramMeterPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerSquareMeterQty}{$i adim.inc}
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramPerSquareMeterQty; const ARight: TSquareMeterQty): TKilogramQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TKilogramPerSquareMeterQty): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterPerSecondQty): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TSquareMeterPerSecondQty): TSquareMeterSteradianHertzQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TSteradianQty): TSquareMeterSteradianHertzQty; inline;
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TSquareMeterPerSecondQty): TCoulombQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TCoulombQty): TSquareMeterAmpereQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TSquareMeterPerSecondQty): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSquareMeterPerSecondQty): TKilogramQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TKilogramQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerRadianQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TRadianQty}{$i adim.inc}
  class operator *(const ALeft: TJoulePerRadianQty; const ARight: TRadianQty): TJouleQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: TJoulePerRadianQty): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TRadianQty): TJoulePerRadianQty; inline;
  class operator /(const ALeft: TNewtonRadianQty; const ARight: TRadianQty): TNewtonQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: TNewtonQty): TNewtonRadianQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TRadianQty): TNewtonRadianQty; inline;
  class operator /(const ALeft: TSteradianQty; const ARight: TRadianQty): TRadianQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: TRadianQty): TSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCoulombPerKilogramQty}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TCoulombPerKilogramQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TCoulombPerKilogramQty): TSquareMeterAmpereQty; inline;
  class operator *(const ALeft: TCoulombPerKilogramQty; const ARight: TKilogramSquareMeterPerSecondQty): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerKilogramQty): TKilogramQty; inline;
  class operator *(const ALeft: TCoulombPerKilogramQty; const ARight: TKilogramQty): TCoulombQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TCoulombPerKilogramQty): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TAmpereQty}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TAmpereQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TSquareMeterQty): TSquareMeterAmpereQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TAmpereQty): TSquareMeterAmpereQty; inline;
  class operator *(const ALeft: TTeslaMeterQty; const ARight: TAmpereQty): TNewtonQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TTeslaMeterQty): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TAmpereQty): TTeslaMeterQty; inline;
  class operator /(const ALeft: TSquareAmpereQty; const ARight: TAmpereQty): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TAmpereQty): TSquareAmpereQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSiemensQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPascalQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TPascalQty): TQuarticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TPascalQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TQuarticMeterQty): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TPascalQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TPascalQty): TJouleQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TCubicMeterQty): TJouleQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TPascalQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TSquareMeterQty): TNewtonQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TPascalQty): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerQuarticMeterQty}{$i adim.inc}
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerQuarticMeterQty): TQuarticMeterQty; inline;
  class operator *(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TQuarticMeterQty): TKilogramQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TKilogramPerQuarticMeterQty): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalMoleQty}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TReciprocalMoleQty): TMoleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonPerSquareCoulombQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TNewtonPerSquareCoulombQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TNewtonPerSquareCoulombQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator *(const ALeft: TNewtonPerSquareCoulombQty; const ARight: TSquareMeterQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerSquareCoulombQty): TSquareCoulombQty; inline;
  class operator *(const ALeft: TNewtonPerSquareCoulombQty; const ARight: TSquareCoulombQty): TNewtonQty; inline;
  class operator *(const ALeft: TSquareCoulombQty; const ARight: TNewtonPerSquareCoulombQty): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonPerSquareKilogramQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TNewtonPerSquareKilogramQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TNewtonPerSquareKilogramQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator *(const ALeft: TNewtonPerSquareKilogramQty; const ARight: TSquareMeterQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerSquareKilogramQty): TSquareKilogramQty; inline;
  class operator *(const ALeft: TNewtonPerSquareKilogramQty; const ARight: TSquareKilogramQty): TNewtonQty; inline;
  class operator *(const ALeft: TSquareKilogramQty; const ARight: TNewtonPerSquareKilogramQty): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=THenryQty}{$i adim.inc}
  class operator /(const ALeft: TWeberQty; const ARight: THenryQty): TAmpereQty; inline;
  class operator *(const ALeft: THenryQty; const ARight: TAmpereQty): TWeberQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: THenryQty): TWeberQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerQuarticKelvinQty}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerQuarticKelvinQty): TQuarticKelvinQty; inline;
  class operator *(const ALeft: TWattPerQuarticKelvinQty; const ARight: TQuarticKelvinQty): TWattQty; inline;
  class operator *(const ALeft: TQuarticKelvinQty; const ARight: TWattPerQuarticKelvinQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TVoltPerMeterQty}{$i adim.inc}
  class operator /(const ALeft: TVoltMeterQty; const ARight: TVoltPerMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TVoltPerMeterQty): TVoltMeterQty; inline;
  class operator *(const ALeft: TVoltPerMeterQty; const ARight: TSquareMeterQty): TVoltMeterQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TVoltPerMeterQty): TCoulombQty; inline;
  class operator *(const ALeft: TVoltPerMeterQty; const ARight: TCoulombQty): TNewtonQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TVoltPerMeterQty): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicMeterPerKilogramQty}{$i adim.inc}
  class operator /(const ALeft: TCubicMeterPerKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TSquareSecondQty; inline;
  class operator /(const ALeft: TCubicMeterPerKilogramQty; const ARight: TSquareSecondQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerKilogramQty): TKilogramQty; inline;
  class operator *(const ALeft: TCubicMeterPerKilogramQty; const ARight: TKilogramQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TCubicMeterPerKilogramQty): TCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerCubicMeterQty}{$i adim.inc}
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerCubicMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterQty; const ARight: TSquareMeterQty): TWattPerMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerCubicMeterQty): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerCubicMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterQty; const ARight: TCubicMeterQty): TWattQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TWattPerCubicMeterQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCoulombPerSquareMeterQty}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TCoulombPerSquareMeterQty): TVoltPerMeterQty; inline;
  class operator *(const ALeft: TCoulombPerSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TVoltPerMeterQty; const ARight: TCoulombPerSquareMeterQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TCoulombPerSquareMeterQty; const ARight: TSquareMeterQty): TCoulombQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TCoulombPerSquareMeterQty): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TVoltQty}{$i adim.inc}
  class operator *(const ALeft: TSiemensQty; const ARight: TVoltQty): TAmpereQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TSiemensQty): TAmpereQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TVoltQty): TSiemensQty; inline;
  class operator *(const ALeft: TFaradQty; const ARight: TVoltQty): TCoulombQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TFaradQty): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TVoltQty): TFaradQty; inline;
  class operator /(const ALeft: TSquareVoltQty; const ARight: TVoltQty): TVoltQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TVoltQty): TSquareVoltQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TVoltQty): TAmpereQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TAmpereQty): TWattQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TVoltQty): TWattQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TVoltQty): TCoulombQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TCoulombQty): TJouleQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TVoltQty): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicMeterPerSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalQuarticMeterQty}{$i adim.inc}
  class operator /(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalQuarticMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalQuarticMeterQty; const ARight: TSquareMeterQty): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TReciprocalQuarticMeterQty): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalQuarticMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TReciprocalQuarticMeterQty; const ARight: TCubicMeterQty): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TReciprocalQuarticMeterQty): TReciprocalMeterQty; inline;
  class operator /(const ALeft: double; const ARight: TReciprocalQuarticMeterQty): TQuarticMeterQty; inline;
  class operator *(const ALeft: TReciprocalQuarticMeterQty; const ARight: TQuarticMeterQty): double; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TReciprocalQuarticMeterQty): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TTeslaQty}{$i adim.inc}
  class operator *(const ALeft: TSquareMeterAmpereQty; const ARight: TTeslaQty): TJouleQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TSquareMeterAmpereQty): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TTeslaQty): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TTeslaQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TTeslaQty): TWeberQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TSquareMeterQty): TWeberQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TTeslaQty): TCoulombQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TCoulombQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TTeslaQty): TKilogramPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSteradianPerSquareSecondQty}{$i adim.inc}
  class operator /(const ALeft: TSteradianQty; const ARight: TSteradianPerSquareSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSquareSecondQty): TSteradianQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSteradianPerSquareSecondQty): TSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TLumenPerWattQty}{$i adim.inc}
  class operator /(const ALeft: TLumenQty; const ARight: TLumenPerWattQty): TWattQty; inline;
  class operator *(const ALeft: TLumenPerWattQty; const ARight: TWattQty): TLumenQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TLumenPerWattQty): TLumenQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonPerCubicMeterQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerCubicMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TNewtonPerCubicMeterQty; const ARight: TCubicMeterQty): TNewtonQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TNewtonPerCubicMeterQty): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSquareCoulombQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareMeterPerSquareCoulombQty): TNewtonQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareCoulombQty; const ARight: TNewtonQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareCoulombQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareCoulombQty): TSquareCoulombQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareCoulombQty; const ARight: TSquareMeterPerSquareCoulombQty): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareSecondPerSquareMeterQty}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TSquareSecondPerSquareMeterQty): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareSecondQty; const ARight: TSquareSecondPerSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: TSquareMeterQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSquareSecondPerSquareMeterQty): TSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareHertzQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonPerMeterQty; const ARight: TSquareHertzQty): TKilogramQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TKilogramQty): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareHertzQty): TNewtonPerMeterQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSquareHertzQty): TKilogramSquareMeterQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TKilogramSquareMeterQty): TJouleQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareHertzQty): TJouleQty; inline;
  class operator /(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSquareHertzQty): TSteradianQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TSteradianQty): TSteradianPerSquareSecondQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TSquareHertzQty): TSteradianPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareHertzQty; const ARight: TSquareHertzQty): TRadianQty; inline;
  class operator /(const ALeft: TSquareHertzQty; const ARight: TRadianQty): TSquareHertzQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TRadianQty): TSquareHertzQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: TSquareHertzQty): TSquareHertzQty; inline;
  class operator /(const ALeft: TRadianQty; const ARight: TSquareHertzQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TSquareSecondQty): TRadianQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareHertzQty): TRadianQty; inline;
  class operator /(const ALeft: double; const ARight: TSquareHertzQty): TSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TTeslaPerAmpereQty}{$i adim.inc}
  class operator /(const ALeft: TTeslaQty; const ARight: TTeslaPerAmpereQty): TAmpereQty; inline;
  class operator *(const ALeft: TTeslaPerAmpereQty; const ARight: TAmpereQty): TTeslaQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TTeslaPerAmpereQty): TTeslaQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerKelvinQty}{$i adim.inc}
  class operator /(const ALeft: TWattPerKelvinQty; const ARight: TWattPerSquareMeterPerKelvinQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TSquareMeterQty): TWattPerKelvinQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerKelvinQty): TWattPerKelvinQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerKelvinQty): TSquareMeterKelvinQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TSquareMeterKelvinQty): TWattQty; inline;
  class operator *(const ALeft: TSquareMeterKelvinQty; const ARight: TWattPerSquareMeterPerKelvinQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterQty}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterQty; const ARight: TSquareMeterQty): TWattQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TFaradPerMeterQty}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TFaradPerMeterQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TFaradPerMeterQty): TVoltPerMeterQty; inline;
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: TVoltPerMeterQty): TCoulombPerSquareMeterQty; inline;
  class operator *(const ALeft: TVoltPerMeterQty; const ARight: TFaradPerMeterQty): TCoulombPerSquareMeterQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TFaradPerMeterQty): TVoltMeterQty; inline;
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: TVoltMeterQty): TCoulombQty; inline;
  class operator *(const ALeft: TVoltMeterQty; const ARight: TFaradPerMeterQty): TCoulombQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TFaradPerMeterQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: TNewtonSquareMeterQty): TSquareCoulombQty; inline;
  class operator *(const ALeft: TNewtonSquareMeterQty; const ARight: TFaradPerMeterQty): TSquareCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKelvinQty}{$i adim.inc}
  class operator /(const ALeft: TMoleKelvinQty; const ARight: TKelvinQty): TMoleQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TMoleQty): TMoleKelvinQty; inline;
  class operator *(const ALeft: TMoleQty; const ARight: TKelvinQty): TMoleKelvinQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TKelvinQty): TWattPerSquareMeterQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TWattPerSquareMeterPerKelvinQty): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TKelvinQty): TWattPerSquareMeterPerKelvinQty; inline;
  class operator /(const ALeft: TSquareMeterKelvinQty; const ARight: TKelvinQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TSquareMeterQty): TSquareMeterKelvinQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TKelvinQty): TSquareMeterKelvinQty; inline;
  class operator *(const ALeft: TWattPerKelvinQty; const ARight: TKelvinQty): TWattQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TWattPerKelvinQty): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TKelvinQty): TWattPerKelvinQty; inline;
  class operator *(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKelvinQty): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TJoulePerKilogramPerKelvinQty): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKelvinQty): TJoulePerKilogramPerKelvinQty; inline;
  class operator *(const ALeft: TJoulePerKelvinQty; const ARight: TKelvinQty): TJouleQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TJoulePerKelvinQty): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TKelvinQty): TJoulePerKelvinQty; inline;
  class operator /(const ALeft: TKilogramKelvinQty; const ARight: TKelvinQty): TKilogramQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TKilogramQty): TKilogramKelvinQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TKelvinQty): TKilogramKelvinQty; inline;
  class operator /(const ALeft: TQuarticKelvinQty; const ARight: TKelvinQty): TCubicKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TCubicKelvinQty): TQuarticKelvinQty; inline;
  class operator *(const ALeft: TCubicKelvinQty; const ARight: TKelvinQty): TQuarticKelvinQty; inline;
  class operator /(const ALeft: TCubicKelvinQty; const ARight: TKelvinQty): TSquareKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TSquareKelvinQty): TCubicKelvinQty; inline;
  class operator *(const ALeft: TSquareKelvinQty; const ARight: TKelvinQty): TCubicKelvinQty; inline;
  class operator /(const ALeft: TSquareKelvinQty; const ARight: TKelvinQty): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TKelvinQty): TSquareKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TRadianPerMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalCubicMeterQty}{$i adim.inc}
  class operator /(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalCubicMeterQty): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalCubicMeterQty): TReciprocalQuarticMeterQty; inline;
  class operator *(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalMeterQty): TReciprocalQuarticMeterQty; inline;
  class operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalMeterQty): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalCubicMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalCubicMeterQty; const ARight: TSquareMeterQty): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TReciprocalCubicMeterQty): TReciprocalMeterQty; inline;
  class operator /(const ALeft: double; const ARight: TReciprocalCubicMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TReciprocalCubicMeterQty; const ARight: TCubicMeterQty): double; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TReciprocalCubicMeterQty): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerCubicMeterPerSteradianQty}{$i adim.inc}
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerCubicMeterPerSteradianQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TCubicMeterQty): TWattPerSteradianQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TWattPerCubicMeterPerSteradianQty): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerCubicMeterQty; const ARight: TWattPerCubicMeterPerSteradianQty): TSteradianQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TSteradianQty): TWattPerCubicMeterQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerCubicMeterPerSteradianQty): TWattPerCubicMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerCubicMeterPerSteradianQty): TCubicMeterSteradianQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TCubicMeterSteradianQty): TWattQty; inline;
  class operator *(const ALeft: TCubicMeterSteradianQty; const ARight: TWattPerCubicMeterPerSteradianQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCoulombPerMeterQty}{$i adim.inc}
  class operator /(const ALeft: TSquareCoulombPerMeterQty; const ARight: TCoulombPerMeterQty): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TCoulombPerMeterQty): TSquareCoulombPerMeterQty; inline;
  class operator *(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombQty): TSquareCoulombPerMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerMolePerKelvinQty}{$i adim.inc}
  class operator /(const ALeft: TJoulePerMoleQty; const ARight: TJoulePerMolePerKelvinQty): TKelvinQty; inline;
  class operator *(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TKelvinQty): TJoulePerMoleQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TJoulePerMolePerKelvinQty): TJoulePerMoleQty; inline;
  class operator /(const ALeft: TJoulePerKelvinQty; const ARight: TJoulePerMolePerKelvinQty): TMoleQty; inline;
  class operator *(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TMoleQty): TJoulePerKelvinQty; inline;
  class operator *(const ALeft: TMoleQty; const ARight: TJoulePerMolePerKelvinQty): TJoulePerKelvinQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TJoulePerMolePerKelvinQty): TMoleKelvinQty; inline;
  class operator *(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TMoleKelvinQty): TJouleQty; inline;
  class operator *(const ALeft: TMoleKelvinQty; const ARight: TJoulePerMolePerKelvinQty): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerQuarticKelvinQty}{$i adim.inc}
  class operator /(const ALeft: TWattPerQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TSquareMeterQty): TWattPerQuarticKelvinQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TWattPerQuarticKelvinQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TQuarticKelvinQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TQuarticKelvinQty): TWattPerSquareMeterQty; inline;
  class operator *(const ALeft: TQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TSquareMeterQuarticKelvinQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TSquareMeterQuarticKelvinQty): TWattQty; inline;
  class operator *(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerSecondQty}{$i adim.inc}
  class operator *(const ALeft: TCoulombPerMeterQty; const ARight: TMeterPerSecondQty): TAmpereQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TCoulombPerMeterQty): TAmpereQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TMeterPerSecondQty): TCoulombPerMeterQty; inline;
  class operator /(const ALeft: TVoltPerMeterQty; const ARight: TMeterPerSecondQty): TTeslaQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TTeslaQty): TVoltPerMeterQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TMeterPerSecondQty): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterPerSecondQty): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TMeterPerSecondQty): TKilogramPerSquareMeterQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerSquareMeterQty): TPoiseuilleQty; inline;
  class operator *(const ALeft: TKilogramPerSquareMeterQty; const ARight: TMeterPerSecondQty): TPoiseuilleQty; inline;
  class operator /(const ALeft: TCubicMeterPerSecondQty; const ARight: TMeterPerSecondQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TSquareMeterQty): TCubicMeterPerSecondQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TMeterPerSecondQty): TCubicMeterPerSecondQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TMeterPerSecondQty): TNewtonQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TNewtonQty): TWattQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TMeterPerSecondQty): TWattQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TMeterPerSecondQty): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramMeterPerSecondQty): TJouleQty; inline;
  class operator *(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterPerSecondQty): TJouleQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TMeterPerSecondQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerSecondQty): TNewtonQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TMeterPerSecondQty): TNewtonQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterPerSecondQty): TKilogramMeterQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramMeterQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramMeterQty; const ARight: TMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterPerSecondQty): TKilogramQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramQty): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TMeterPerSecondQty): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterPerSecondQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSecondQty): TSquareMeterPerSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCoulombPerCubicMeterQty}{$i adim.inc}
  class operator /(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombPerCubicMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TCoulombPerCubicMeterQty; const ARight: TSquareMeterQty): TCoulombPerMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TCoulombPerCubicMeterQty): TCoulombPerMeterQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerCubicMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TCoulombPerCubicMeterQty; const ARight: TCubicMeterQty): TCoulombQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TCoulombPerCubicMeterQty): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterKelvinPerWattQty}{$i adim.inc}
  class operator /(const ALeft: TMeterKelvinQty; const ARight: TMeterKelvinPerWattQty): TWattQty; inline;
  class operator *(const ALeft: TMeterKelvinPerWattQty; const ARight: TWattQty): TMeterKelvinQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TMeterKelvinPerWattQty): TMeterKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalSquareRootMeterQty}{$i adim.inc}
  class operator /(const ALeft: TReciprocalSquareRootCubicMeterQty; const ARight: TReciprocalSquareRootMeterQty): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareRootMeterQty): TReciprocalSquareRootCubicMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TReciprocalMeterQty): TReciprocalSquareRootCubicMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareRootMeterQty): TReciprocalSquareRootMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TReciprocalSquareRootMeterQty): TReciprocalMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerSteradianPerHertzQty}{$i adim.inc}
  class operator /(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterQty): TWattPerSteradianPerHertzQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerSteradianPerHertzQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterPerSecondQty): TWattPerSteradianQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSteradianHertzQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSteradianHertzQty): TWattPerSquareMeterQty; inline;
  class operator *(const ALeft: TSteradianHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSquareMeterSteradianHertzQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterSteradianHertzQty): TWattQty; inline;
  class operator *(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=THenryPerMeterQty}{$i adim.inc}
  class operator /(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: THenryPerMeterQty): TFaradPerMeterQty; inline;
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TFaradPerMeterQty): TSquareSecondPerSquareMeterQty; inline;
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: THenryPerMeterQty): TSquareSecondPerSquareMeterQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: THenryPerMeterQty): TSquareAmpereQty; inline;
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TSquareAmpereQty): TNewtonQty; inline;
  class operator *(const ALeft: TSquareAmpereQty; const ARight: THenryPerMeterQty): TNewtonQty; inline;
  class operator /(const ALeft: TTeslaQty; const ARight: THenryPerMeterQty): TAmperePerMeterQty; inline;
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TAmperePerMeterQty): TTeslaQty; inline;
  class operator *(const ALeft: TAmperePerMeterQty; const ARight: THenryPerMeterQty): TTeslaQty; inline;
  class operator /(const ALeft: TTeslaMeterQty; const ARight: THenryPerMeterQty): TAmpereQty; inline;
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TAmpereQty): TTeslaMeterQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: THenryPerMeterQty): TTeslaMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TOhmQty}{$i adim.inc}
  class operator /(const ALeft: TWeberQty; const ARight: TOhmQty): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TOhmQty): TWeberQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TCoulombQty): TWeberQty; inline;
  class operator /(const ALeft: double; const ARight: TOhmQty): TSiemensQty; inline;
  class operator /(const ALeft: TVoltQty; const ARight: TOhmQty): TAmpereQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TAmpereQty): TVoltQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TOhmQty): TVoltQty; inline;
  class operator /(const ALeft: TSquareVoltQty; const ARight: TOhmQty): TWattQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TWattQty): TSquareVoltQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TOhmQty): TSquareVoltQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TOhmQty): TSquareAmpereQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TSquareAmpereQty): TWattQty; inline;
  class operator *(const ALeft: TSquareAmpereQty; const ARight: TOhmQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterQty}{$i adim.inc}
  class operator /(const ALeft: TMeterSteradianQty; const ARight: TMeterQty): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TMeterQty): TMeterSteradianQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSteradianQty): TMeterSteradianQty; inline;
  class operator *(const ALeft: TCoulombPerCubicMeterQty; const ARight: TMeterQty): TCoulombPerSquareMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCoulombPerCubicMeterQty): TCoulombPerSquareMeterQty; inline;
  class operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TMeterQty): TCoulombPerCubicMeterQty; inline;
  class operator *(const ALeft: TRadianPerMeterQty; const ARight: TMeterQty): TRadianQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TRadianPerMeterQty): TRadianQty; inline;
  class operator /(const ALeft: TRadianQty; const ARight: TMeterQty): TRadianPerMeterQty; inline;
  class operator /(const ALeft: THenryPerMeterQty; const ARight: TMeterQty): TTeslaPerAmpereQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TTeslaPerAmpereQty): THenryPerMeterQty; inline;
  class operator *(const ALeft: TTeslaPerAmpereQty; const ARight: TMeterQty): THenryPerMeterQty; inline;
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TMeterQty): THenryQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: THenryPerMeterQty): THenryQty; inline;
  class operator /(const ALeft: THenryQty; const ARight: TMeterQty): THenryPerMeterQty; inline;
  class operator /(const ALeft: TTeslaMeterQty; const ARight: TMeterQty): TTeslaQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TTeslaQty): TTeslaMeterQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TMeterQty): TTeslaMeterQty; inline;
  class operator *(const ALeft: TAmperePerMeterQty; const ARight: TMeterQty): TAmpereQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TAmperePerMeterQty): TAmpereQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TMeterQty): TAmperePerMeterQty; inline;
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: TMeterQty): TFaradQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TFaradPerMeterQty): TFaradQty; inline;
  class operator /(const ALeft: TFaradQty; const ARight: TMeterQty): TFaradPerMeterQty; inline;
  class operator /(const ALeft: TVoltMeterQty; const ARight: TMeterQty): TVoltQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TVoltQty): TVoltMeterQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TMeterQty): TVoltMeterQty; inline;
  class operator *(const ALeft: TCoulombPerSquareMeterQty; const ARight: TMeterQty): TCoulombPerMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCoulombPerSquareMeterQty): TCoulombPerMeterQty; inline;
  class operator /(const ALeft: TCoulombPerMeterQty; const ARight: TMeterQty): TCoulombPerSquareMeterQty; inline;
  class operator *(const ALeft: TSquareCoulombPerMeterQty; const ARight: TMeterQty): TSquareCoulombQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareCoulombPerMeterQty): TSquareCoulombQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TMeterQty): TSquareCoulombPerMeterQty; inline;
  class operator *(const ALeft: TCoulombPerMeterQty; const ARight: TMeterQty): TCoulombQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCoulombPerMeterQty): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TMeterQty): TCoulombPerMeterQty; inline;
  class operator *(const ALeft: TVoltPerMeterQty; const ARight: TMeterQty): TVoltQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TVoltPerMeterQty): TVoltQty; inline;
  class operator /(const ALeft: TVoltQty; const ARight: TMeterQty): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TOhmMeterQty; const ARight: TMeterQty): TOhmQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TOhmQty): TOhmMeterQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TMeterQty): TOhmMeterQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterQty; const ARight: TMeterQty): TWattPerSquareMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerCubicMeterQty): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TMeterQty): TWattPerCubicMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterQty; const ARight: TMeterQty): TWattPerMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerSquareMeterQty): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TMeterQty): TWattPerSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerMeterQty; const ARight: TMeterQty): TWattQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerMeterQty): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TMeterQty): TWattPerMeterQty; inline;
  class operator /(const ALeft: TMeterKelvinQty; const ARight: TMeterQty): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TMeterQty): TMeterKelvinQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKelvinQty): TMeterKelvinQty; inline;
  class operator *(const ALeft: TSquareKilogramPerMeterQty; const ARight: TMeterQty): TSquareKilogramQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareKilogramPerMeterQty): TSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TMeterQty): TSquareKilogramPerMeterQty; inline;
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TMeterQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TNewtonSquareMeterQty): TNewtonCubicMeterQty; inline;
  class operator *(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterQty): TNewtonCubicMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterQty): TJouleQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TJouleQty): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TMeterQty): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TMeterQty): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterQty): TCubicMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareMeterPerSquareSecondQty): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSecondQty; const ARight: TMeterQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TMeterPerSecondQty): TSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TMeterQty): TSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TPoiseuilleQty; const ARight: TMeterQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TPoiseuilleQty): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TMeterQty): TPoiseuilleQty; inline;
  class operator /(const ALeft: TNewtonPerMeterQty; const ARight: TMeterQty): TPascalQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TPascalQty): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TMeterQty): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TNewtonPerMeterQty; const ARight: TMeterQty): TNewtonQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TNewtonPerMeterQty): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TMeterQty): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TNewtonPerCubicMeterQty; const ARight: TMeterQty): TPascalQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TNewtonPerCubicMeterQty): TPascalQty; inline;
  class operator /(const ALeft: TPascalQty; const ARight: TMeterQty): TNewtonPerCubicMeterQty; inline;
  class operator *(const ALeft: TSiemensPerMeterQty; const ARight: TMeterQty): TSiemensQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSiemensPerMeterQty): TSiemensQty; inline;
  class operator /(const ALeft: TSiemensQty; const ARight: TMeterQty): TSiemensPerMeterQty; inline;
  class operator /(const ALeft: TCoulombMeterQty; const ARight: TMeterQty): TCoulombQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCoulombQty): TCoulombMeterQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TMeterQty): TCoulombMeterQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TMeterQty): TNewtonQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TNewtonQty): TJouleQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TMeterQty): TJouleQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterQty): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TReciprocalQuarticMeterQty; const ARight: TMeterQty): TReciprocalCubicMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TReciprocalQuarticMeterQty): TReciprocalCubicMeterQty; inline;
  class operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TMeterQty): TReciprocalQuarticMeterQty; inline;
  class operator *(const ALeft: TReciprocalCubicMeterQty; const ARight: TMeterQty): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TReciprocalCubicMeterQty): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TMeterQty): TReciprocalCubicMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TMeterQty): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TMeterQty): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TMeterQty): double; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TReciprocalMeterQty): double; inline;
  class operator /(const ALeft: double; const ARight: TMeterQty): TReciprocalMeterQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramPerSecondQty): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TMeterQty): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TMeterQty): TKilogramQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramQty): TKilogramMeterQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TMeterQty): TKilogramMeterQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TMeterPerSquareSecondQty): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterQty): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerSquareSecondQty): TSquareSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TSquareSecondQty): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterQty): TSquareHertzQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TMeterQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareHertzQty): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSexticMeterQty; const ARight: TMeterQty): TQuinticMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TQuinticMeterQty): TSexticMeterQty; inline;
  class operator *(const ALeft: TQuinticMeterQty; const ARight: TMeterQty): TSexticMeterQty; inline;
  class operator /(const ALeft: TQuinticMeterQty; const ARight: TMeterQty): TQuarticMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TQuarticMeterQty): TQuinticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TMeterQty): TQuinticMeterQty; inline;
  class operator /(const ALeft: TQuarticMeterQty; const ARight: TMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCubicMeterQty): TQuarticMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TMeterQty): TQuarticMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TMeterQty): TCubicMeterQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TMeterQty): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TMeterQty): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerMeterQty}{$i adim.inc}
  class operator /(const ALeft: TNewtonQty; const ARight: TKilogramPerMeterQty): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerMeterQty): TNewtonQty; inline;
  class operator *(const ALeft: TKilogramPerMeterQty; const ARight: TSquareMeterPerSquareSecondQty): TNewtonQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerMeterQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerMeterQty; const ARight: TMeterPerSecondQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerMeterQty): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerMeterQty): TMeterQty; inline;
  class operator *(const ALeft: TKilogramPerMeterQty; const ARight: TMeterQty): TKilogramQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramPerMeterQty): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerCubicMeterQty}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TKilogramPerCubicMeterQty): TCubicMeterPerKilogramQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TKilogramPerCubicMeterQty): TPoiseuilleQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TSquareMeterPerSecondQty): TPoiseuilleQty; inline;
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TKilogramPerCubicMeterQty): TSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TNewtonPerCubicMeterQty; const ARight: TKilogramPerCubicMeterQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TKilogramPerCubicMeterQty): TNewtonPerCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TMeterPerSquareSecondQty): TNewtonPerCubicMeterQty; inline;
  class operator /(const ALeft: TPascalQty; const ARight: TKilogramPerCubicMeterQty): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerCubicMeterQty): TPascalQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TSquareMeterPerSquareSecondQty): TPascalQty; inline;
  class operator /(const ALeft: TKilogramPerSquareMeterQty; const ARight: TKilogramPerCubicMeterQty): TMeterQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TMeterQty): TKilogramPerSquareMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramPerCubicMeterQty): TKilogramPerSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerCubicMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TCubicMeterQty): TKilogramQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TKilogramPerCubicMeterQty): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerQuarticMeterPerSecondQty}{$i adim.inc}
  class operator /(const ALeft: TPascalQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TCubicMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TCubicMeterPerSecondQty): TPascalQty; inline;
  class operator *(const ALeft: TCubicMeterPerSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TPascalQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TQuarticMeterSecondQty; inline;
  class operator *(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TQuarticMeterSecondQty): TKilogramQty; inline;
  class operator *(const ALeft: TQuarticMeterSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TQuarticMeterQty; inline;
  class operator *(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TQuarticMeterQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TKilogramPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerSteradianQty}{$i adim.inc}
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSquareMeterQty): TWattPerSteradianQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianQty): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianQty): TSteradianQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSteradianQty): TWattPerSquareMeterQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerSquareMeterPerSteradianQty): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerSteradianQty): TSquareMeterSteradianQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSquareMeterSteradianQty): TWattQty; inline;
  class operator *(const ALeft: TSquareMeterSteradianQty; const ARight: TWattPerSquareMeterPerSteradianQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerWattQty}{$i adim.inc}
  class operator /(const ALeft: TMeterKelvinPerWattQty; const ARight: TMeterPerWattQty): TKelvinQty; inline;
  class operator *(const ALeft: TMeterPerWattQty; const ARight: TKelvinQty): TMeterKelvinPerWattQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TMeterPerWattQty): TMeterKelvinPerWattQty; inline;
  class operator /(const ALeft: double; const ARight: TMeterPerWattQty): TWattPerMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerWattQty): TWattQty; inline;
  class operator *(const ALeft: TMeterPerWattQty; const ARight: TWattQty): TMeterQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TMeterPerWattQty): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareRootMeterQty}{$i adim.inc}
  class operator *(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TSquareRootMeterQty): double; inline;
  class operator *(const ALeft: TSquareRootMeterQty; const ARight: TReciprocalSquareRootMeterQty): double; inline;
  class operator /(const ALeft: double; const ARight: TSquareRootMeterQty): TReciprocalSquareRootMeterQty; inline;
  class operator *(const ALeft: TSquareRootMeterQty; const ARight: TSquareRootMeterQty): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TSquareRootMeterQty): TSquareRootMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TAmperePerSquareMeterQty}{$i adim.inc}
  class operator /(const ALeft: TAmperePerMeterQty; const ARight: TAmperePerSquareMeterQty): TMeterQty; inline;
  class operator *(const ALeft: TAmperePerSquareMeterQty; const ARight: TMeterQty): TAmperePerMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TAmperePerSquareMeterQty): TAmperePerMeterQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TAmperePerSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TAmperePerSquareMeterQty; const ARight: TSquareMeterQty): TAmpereQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TAmperePerSquareMeterQty): TAmpereQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=THertzQty}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: THertzQty): TWattPerSquareMeterPerSteradianQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerSquareMeterPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: THertzQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
  class operator *(const ALeft: TWattPerSteradianPerHertzQty; const ARight: THertzQty): TWattPerSteradianQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TWattPerSteradianPerHertzQty): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: THertzQty): TWattPerSteradianPerHertzQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: THertzQty): TSquareMeterSteradianQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TSquareMeterSteradianQty): TSquareMeterSteradianHertzQty; inline;
  class operator *(const ALeft: TSquareMeterSteradianQty; const ARight: THertzQty): TSquareMeterSteradianHertzQty; inline;
  class operator /(const ALeft: TSteradianHertzQty; const ARight: THertzQty): TSteradianQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TSteradianQty): TSteradianHertzQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: THertzQty): TSteradianHertzQty; inline;
  class operator *(const ALeft: THenryQty; const ARight: THertzQty): TOhmQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: THenryQty): TOhmQty; inline;
  class operator /(const ALeft: TOhmQty; const ARight: THertzQty): THenryQty; inline;
  class operator /(const ALeft: TSiemensQty; const ARight: THertzQty): TFaradQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TFaradQty): TSiemensQty; inline;
  class operator *(const ALeft: TFaradQty; const ARight: THertzQty): TSiemensQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: THertzQty): TJouleQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TJouleQty): TWattQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: THertzQty): TWattQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: THertzQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TKilogramSquareMeterPerSecondQty): TJouleQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: THertzQty): TJouleQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: THertzQty): TKilogramSquareMeterQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TKilogramSquareMeterQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterQty; const ARight: THertzQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: THertzQty): TKilogramQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TKilogramQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: THertzQty): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: THertzQty): TMeterQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TMeterQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: THertzQty): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TSquareHertzQty; const ARight: THertzQty): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: THertzQty): TSquareHertzQty; inline;
  class operator /(const ALeft: THertzQty; const ARight: THertzQty): TRadianQty; inline;
  class operator /(const ALeft: THertzQty; const ARight: TRadianQty): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TRadianQty): THertzQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: THertzQty): THertzQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerQuarticSecondQty}{$i adim.inc}
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerQuarticSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSquareSecondQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerQuarticSecondQty): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerQuarticSecondQty): TCubicSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuarticSecondQty; const ARight: TCubicSecondQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TMeterPerQuarticSecondQty): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerQuarticSecondQty): TQuarticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuarticSecondQty; const ARight: TQuarticSecondQty): TMeterQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TMeterPerQuarticSecondQty): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerMeterPerKelvinQty}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TWattPerMeterPerKelvinQty): TMeterKelvinPerWattQty; inline;
  class operator /(const ALeft: TWattPerKelvinQty; const ARight: TWattPerMeterPerKelvinQty): TMeterQty; inline;
  class operator *(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TMeterQty): TWattPerKelvinQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerMeterPerKelvinQty): TWattPerKelvinQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerMeterPerKelvinQty): TKelvinQty; inline;
  class operator *(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TKelvinQty): TWattPerMeterQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TWattPerMeterPerKelvinQty): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerMeterPerKelvinQty): TMeterKelvinQty; inline;
  class operator *(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TMeterKelvinQty): TWattQty; inline;
  class operator *(const ALeft: TMeterKelvinQty; const ARight: TWattPerMeterPerKelvinQty): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKelvinPerMeterQty}{$i adim.inc}
  class operator *(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TKelvinPerMeterQty): TWattPerSquareMeterQty; inline;
  class operator *(const ALeft: TKelvinPerMeterQty; const ARight: TWattPerMeterPerKelvinQty): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TKelvinPerMeterQty): TWattPerMeterPerKelvinQty; inline;
  class operator /(const ALeft: TKelvinQty; const ARight: TKelvinPerMeterQty): TMeterQty; inline;
  class operator *(const ALeft: TKelvinPerMeterQty; const ARight: TMeterQty): TKelvinQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKelvinPerMeterQty): TKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerCubicSecondQty}{$i adim.inc}
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerCubicSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerCubicSecondQty; const ARight: TSquareSecondQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerCubicSecondQty): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerCubicSecondQty): TCubicSecondQty; inline;
  class operator *(const ALeft: TMeterPerCubicSecondQty; const ARight: TCubicSecondQty): TMeterQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TMeterPerCubicSecondQty): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramPerSquareMeterQty}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramPerSquareMeterQty): TNewtonQty; inline;
  class operator *(const ALeft: TSquareKilogramPerSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TSquareKilogramPerSquareMeterQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareKilogramPerSquareMeterQty; const ARight: TSquareMeterQty): TSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramPerSquareMeterQty): TSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerAmpereQty}{$i adim.inc}
  class operator /(const ALeft: THenryPerMeterQty; const ARight: TMeterPerAmpereQty): TTeslaQty; inline;
  class operator *(const ALeft: TMeterPerAmpereQty; const ARight: TTeslaQty): THenryPerMeterQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TMeterPerAmpereQty): THenryPerMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerAmpereQty): TAmpereQty; inline;
  class operator *(const ALeft: TMeterPerAmpereQty; const ARight: TAmpereQty): TMeterQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TMeterPerAmpereQty): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKatalQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMolePerCubicMeterQty}{$i adim.inc}
  class operator /(const ALeft: TMoleQty; const ARight: TMolePerCubicMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TMolePerCubicMeterQty; const ARight: TCubicMeterQty): TMoleQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TMolePerCubicMeterQty): TMoleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSecondQty}{$i adim.inc}
  class operator *(const ALeft: TGrayPerSecondQty; const ARight: TSecondQty): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TGrayPerSecondQty): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TSecondQty): TGrayPerSecondQty; inline;
  class operator *(const ALeft: TVoltMeterPerSecondQty; const ARight: TSecondQty): TVoltMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TVoltMeterPerSecondQty): TVoltMeterQty; inline;
  class operator /(const ALeft: TVoltMeterQty; const ARight: TSecondQty): TVoltMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TSecondQty): TKilogramPerQuarticMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TKilogramPerQuarticMeterQty; inline;
  class operator /(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TSecondQty): TKilogramPerQuarticMeterPerSecondQty; inline;
  class operator /(const ALeft: TQuarticMeterSecondQty; const ARight: TSecondQty): TQuarticMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TQuarticMeterQty): TQuarticMeterSecondQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TSecondQty): TQuarticMeterSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TSecondQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSquareMeterPerSecondQty): TSquareMeterQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSecondQty): TSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TSecondQty): TPascalQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TPascalQty): TPoiseuilleQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TSecondQty): TPoiseuilleQty; inline;
  class operator *(const ALeft: TCubicMeterPerSecondQty; const ARight: TSecondQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TCubicMeterPerSecondQty): TCubicMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TSecondQty): TCubicMeterPerSecondQty; inline;
  class operator *(const ALeft: TKatalQty; const ARight: TSecondQty): TMoleQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKatalQty): TMoleQty; inline;
  class operator /(const ALeft: TMoleQty; const ARight: TSecondQty): TKatalQty; inline;
  class operator /(const ALeft: TLumenSecondQty; const ARight: TSecondQty): TLumenQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TLumenQty): TLumenSecondQty; inline;
  class operator *(const ALeft: TLumenQty; const ARight: TSecondQty): TLumenSecondQty; inline;
  class operator /(const ALeft: THenryQty; const ARight: TSecondQty): TOhmQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TOhmQty): THenryQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TSecondQty): THenryQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TSecondQty): TVoltQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TVoltQty): TWeberQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TSecondQty): TWeberQty; inline;
  class operator *(const ALeft: TSiemensQty; const ARight: TSecondQty): TFaradQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSiemensQty): TFaradQty; inline;
  class operator /(const ALeft: TFaradQty; const ARight: TSecondQty): TSiemensQty; inline;
  class operator /(const ALeft: TSecondQty; const ARight: TOhmQty): TFaradQty; inline;
  class operator /(const ALeft: TSecondQty; const ARight: TFaradQty): TOhmQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TSecondQty): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TSecondQty): TCoulombQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TAmpereQty): TCoulombQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TSecondQty): TJouleQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TWattQty): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSecondQty): TWattQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TSecondQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TJouleQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSecondQty): TJouleQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSecondQty): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TNewtonQty): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TSecondQty): TNewtonQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSecondQty): TKilogramSquareMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TKilogramSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TSecondQty): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramMeterPerSecondQty; const ARight: TSecondQty): TKilogramMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKilogramMeterPerSecondQty): TKilogramMeterQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TSecondQty): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TSecondQty): TKilogramQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKilogramPerSecondQty): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TSecondQty): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TMeterSecondQty; const ARight: TSecondQty): TMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterQty): TMeterSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSecondQty): TMeterSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSecondQty): TMeterPerCubicSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerQuarticSecondQty): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TSecondQty): TMeterPerQuarticSecondQty; inline;
  class operator *(const ALeft: TMeterPerCubicSecondQty; const ARight: TSecondQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerCubicSecondQty): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TSecondQty): TMeterPerCubicSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TSecondQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerSquareSecondQty): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TSecondQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TSecondQty): TMeterQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerSecondQty): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TSecondQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TSecondQty): THertzQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSquareHertzQty): THertzQty; inline;
  class operator /(const ALeft: THertzQty; const ARight: TSecondQty): TSquareHertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TSecondQty): TRadianQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: THertzQty): TRadianQty; inline;
  class operator /(const ALeft: TRadianQty; const ARight: TSecondQty): THertzQty; inline;
  class operator /(const ALeft: double; const ARight: TSecondQty): THertzQty; inline;
  class operator /(const ALeft: TSexticSecondQty; const ARight: TSecondQty): TQuinticSecondQty; inline;
  class operator *(const ALeft: TQuinticSecondQty; const ARight: TSecondQty): TSexticSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TQuinticSecondQty): TSexticSecondQty; inline;
  class operator /(const ALeft: TQuinticSecondQty; const ARight: TSecondQty): TQuarticSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TSecondQty): TQuinticSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TQuarticSecondQty): TQuinticSecondQty; inline;
  class operator /(const ALeft: TQuarticSecondQty; const ARight: TSecondQty): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TSecondQty): TQuarticSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TCubicSecondQty): TQuarticSecondQty; inline;
  class operator /(const ALeft: TCubicSecondQty; const ARight: TSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSecondQty): TCubicSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSquareSecondQty): TCubicSecondQty; inline;
  class operator /(const ALeft: TSquareSecondQty; const ARight: TSecondQty): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSecondQty): TSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalKelvinQty}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TReciprocalKelvinQty): TKelvinQty; inline;
  class operator *(const ALeft: TReciprocalKelvinQty; const ARight: TKelvinQty): double; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TReciprocalKelvinQty): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalHenryQty}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TReciprocalHenryQty): THenryQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerQuinticSecondQty}{$i adim.inc}
  class operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TMeterPerQuinticSecondQty): TSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSecondQty): TMeterPerQuarticSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterPerQuarticSecondQty; inline;
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerQuinticSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSquareSecondQty): TMeterPerCubicSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerQuinticSecondQty): TCubicSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TCubicSecondQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerQuinticSecondQty): TQuarticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TQuarticSecondQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerQuinticSecondQty): TQuinticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TQuinticSecondQty): TMeterQty; inline;
  class operator *(const ALeft: TQuinticSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerSexticSecondQty}{$i adim.inc}
  class operator /(const ALeft: TMeterPerQuinticSecondQty; const ARight: TMeterPerSexticSecondQty): TSecondQty; inline;
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TSecondQty): TMeterPerQuinticSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerQuinticSecondQty; inline;
  class operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TMeterPerSexticSecondQty): TSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TSquareSecondQty): TMeterPerQuarticSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerQuarticSecondQty; inline;
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerSexticSecondQty): TCubicSecondQty; inline;
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TCubicSecondQty): TMeterPerCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerSexticSecondQty): TQuarticSecondQty; inline;
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TQuarticSecondQty): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSexticSecondQty): TQuinticSecondQty; inline;
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TQuinticSecondQty): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TQuinticSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerSexticSecondQty): TSexticSecondQty; inline;
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TSexticSecondQty): TMeterQty; inline;
  class operator *(const ALeft: TSexticSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TLuxQty}{$i adim.inc}
  class operator /(const ALeft: TLuxSecondQty; const ARight: TLuxQty): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TLuxQty): TLuxSecondQty; inline;
  class operator *(const ALeft: TLuxQty; const ARight: TSecondQty): TLuxSecondQty; inline;
  class operator /(const ALeft: TLumenQty; const ARight: TLuxQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TLuxQty; const ARight: TSquareMeterQty): TLumenQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TLuxQty): TLumenQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerMeterPerSteradianQty}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerMeterPerSteradianQty): TMeterSteradianQty; inline;
  class operator *(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TMeterSteradianQty): TWattQty; inline;
  class operator *(const ALeft: TMeterSteradianQty; const ARight: TWattPerMeterPerSteradianQty): TWattQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerMeterPerSteradianQty): TSteradianQty; inline;
  class operator *(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TSteradianQty): TWattPerMeterQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerMeterPerSteradianQty): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerMeterPerSteradianQty): TMeterQty; inline;
  class operator *(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TMeterQty): TWattPerSteradianQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerMeterPerSteradianQty): TWattPerSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKatalPerCubicMeterQty}{$i adim.inc}
  class operator /(const ALeft: TKatalQty; const ARight: TKatalPerCubicMeterQty): TCubicMeterQty; inline;
  class operator *(const ALeft: TKatalPerCubicMeterQty; const ARight: TCubicMeterQty): TKatalQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TKatalPerCubicMeterQty): TKatalQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKelvinPerWattQty}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TKelvinPerWattQty): TWattPerKelvinQty; inline;
  class operator /(const ALeft: TKelvinQty; const ARight: TKelvinPerWattQty): TWattQty; inline;
  class operator *(const ALeft: TKelvinPerWattQty; const ARight: TWattQty): TKelvinQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TKelvinPerWattQty): TKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSecondPerMeterQty}{$i adim.inc}
  class operator /(const ALeft: TKilogramPerMeterQty; const ARight: TSecondPerMeterQty): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TSecondPerMeterQty; const ARight: TKilogramPerSecondQty): TKilogramPerMeterQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TSecondPerMeterQty): TKilogramPerMeterQty; inline;
  class operator /(const ALeft: TSecondQty; const ARight: TSecondPerMeterQty): TMeterQty; inline;
  class operator *(const ALeft: TSecondPerMeterQty; const ARight: TMeterQty): TSecondQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSecondPerMeterQty): TSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCandelaPerSquareMeterQty}{$i adim.inc}
  class operator /(const ALeft: TCandelaQty; const ARight: TCandelaPerSquareMeterQty): TSquareMeterQty; inline;
  class operator *(const ALeft: TCandelaPerSquareMeterQty; const ARight: TSquareMeterQty): TCandelaQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TCandelaPerSquareMeterQty): TCandelaQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCoulombPerMoleQty}{$i adim.inc}
  class operator /(const ALeft: TJoulePerMoleQty; const ARight: TCoulombPerMoleQty): TVoltQty; inline;
  class operator *(const ALeft: TCoulombPerMoleQty; const ARight: TVoltQty): TJoulePerMoleQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TCoulombPerMoleQty): TJoulePerMoleQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerMoleQty): TMoleQty; inline;
  class operator *(const ALeft: TCoulombPerMoleQty; const ARight: TMoleQty): TCoulombQty; inline;
  class operator *(const ALeft: TMoleQty; const ARight: TCoulombPerMoleQty): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TDayQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=THourQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMinuteQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareDayQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareHourQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMinuteQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TAstronomicalQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TInchQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TFootQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TYardQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMileQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNauticalMileQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TAngstromQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareInchQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareFootQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareYardQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMileQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicInchQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicFootQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicYardQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TLitreQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TGallonQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TTonneQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPoundQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TOunceQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TStoneQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TTonQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TElectronvoltPerSquareSpeedOfLightQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TDegreeCelsiusQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TDegreeFahrenheitQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TDegreeQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareDegreeQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TRadianPerSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TReciprocalSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TRadianPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerHourQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMilePerHourQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNauticalMilePerHourQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerSecondPerSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerHourPerSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerKilogramQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TGrayQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSievertQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerSquareMeterPerHertzQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TDioptreQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonMeterSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPoundPerCubicInchQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPoundForceQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramSquareMeterPerQuarticSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonPerSquareMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TBarQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPoundPerSquareInchQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerCubicMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerMeterPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattHourQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerHertzQty}{$i adim.inc}
  class operator /(const ALeft: TWattPerHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSquareMeterSteradianQty; inline;
  class operator /(const ALeft: TWattPerHertzQty; const ARight: TSquareMeterSteradianQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
  class operator /(const ALeft: TWattPerHertzQty; const ARight: TWattPerSteradianPerHertzQty): TSteradianQty; inline;
  class operator /(const ALeft: TWattPerHertzQty; const ARight: TSteradianQty): TWattPerSteradianPerHertzQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TElectronvoltQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPoundForceInchQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TRydbergQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCalorieQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerDegreeQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonMeterPerRadianQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonMeterPerDegreeQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareSecondPerRadianQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerCubicSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TAmpereHourQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TAmpereSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareAmpereSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerAmperePerCubicSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareAmpereQuarticSecondPerKilogramPerSquareMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareAmperePerCubicSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareAmpereCubicSecondPerKilogramPerSquareMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWeberPerSquareMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerAmperePerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerAmperePerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareAmperePerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCandelaSteradianQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCandelaSteradianPerSquareMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TBequerelQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMolePerSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPascalPerMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerSquareMeterPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerSquareMeterQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerHertzQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPoundForcePerInchQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TPascalSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerMeterPerSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramCubicMeterPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramQuarticMeterPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TMeterPerKilogramPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TCubicMeterPerKilogramPerSquareSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareSecondPerKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondPerKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterPerCubicSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerCubicSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerCubicSecondPerKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterPerCubicSecondPerKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TKilogramPerCubicSecondPerKelvinQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonPerCoulombQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonSquareMeterPerCoulombQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonPerAmpereQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TTeslaMeterPerAmpereQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TNewtonPerSquareAmpereQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJouleSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerHertzQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TElectronvoltSecondQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TElectronvoltMeterPerSpeedOfLightQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE INTF_QUANTITY}{$DEFINE TQuantity:=TJoulePerTeslaQty}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{ External Operators }

operator /(const ALeft: TCubicSecondQty; const ARight: TSquareSecondQty): TSecondQty; inline;
operator /(const ALeft: TQuarticSecondQty; const ARight: TCubicSecondQty): TSecondQty; inline;
operator /(const ALeft: TQuinticSecondQty; const ARight: TQuarticSecondQty): TSecondQty; inline;
operator /(const ALeft: TQuinticSecondQty; const ARight: TSquareSecondQty): TCubicSecondQty; inline;
operator /(const ALeft: TSexticSecondQty; const ARight: TQuinticSecondQty): TSecondQty; inline;
operator /(const ALeft: TSexticSecondQty; const ARight: TQuarticSecondQty): TSquareSecondQty; inline;
operator /(const ALeft: TCubicMeterQty; const ARight: TSquareMeterQty): TMeterQty; inline;
operator /(const ALeft: TQuarticMeterQty; const ARight: TCubicMeterQty): TMeterQty; inline;
operator /(const ALeft: TQuinticMeterQty; const ARight: TQuarticMeterQty): TMeterQty; inline;
operator /(const ALeft: TQuinticMeterQty; const ARight: TCubicMeterQty): TSquareMeterQty; inline;
operator /(const ALeft: TSexticMeterQty; const ARight: TQuinticMeterQty): TMeterQty; inline;
operator /(const ALeft: TSexticMeterQty; const ARight: TQuarticMeterQty): TSquareMeterQty; inline;
operator /(const ALeft: TCubicKelvinQty; const ARight: TSquareKelvinQty): TKelvinQty; inline;
operator /(const ALeft: TQuarticKelvinQty; const ARight: TCubicKelvinQty): TKelvinQty; inline;
operator /(const ALeft: double; const ARight: THertzQty): TSecondQty; inline;
operator /(const ALeft: TRadianQty; const ARight: THertzQty): TSecondQty; inline;
operator /(const ALeft: double; const ARight: TSquareSecondQty): TSquareHertzQty; inline;
operator /(const ALeft: THertzQty; const ARight: TSquareHertzQty): TSecondQty; inline;
operator /(const ALeft: TRadianQty; const ARight: TSquareSecondQty): TSquareHertzQty; inline;
operator /(const ALeft: TSteradianQty; const ARight: TSquareSecondQty): TSteradianPerSquareSecondQty; inline;
operator /(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSteradianQty): TSquareHertzQty; inline;
operator /(const ALeft: TMeterQty; const ARight: TMeterPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterQty): THertzQty; inline;
operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareHertzQty): TMeterQty; inline;
operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerSquareSecondQty): TMeterQty; inline;
operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareSecondQty): TMeterQty; inline;
operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSquareSecondQty): TSecondQty; inline;
operator /(const ALeft: TMeterQty; const ARight: TCubicSecondQty): TMeterPerCubicSecondQty; inline;
operator /(const ALeft: TMeterPerSecondQty; const ARight: TSquareSecondQty): TMeterPerCubicSecondQty; inline;
operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerCubicSecondQty): TSecondQty; inline;
operator /(const ALeft: TMeterQty; const ARight: TQuarticSecondQty): TMeterPerQuarticSecondQty; inline;
operator /(const ALeft: TMeterPerSecondQty; const ARight: TCubicSecondQty): TMeterPerQuarticSecondQty; inline;
operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareSecondQty): TMeterPerQuarticSecondQty; inline;
operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerQuarticSecondQty): TSecondQty; inline;
operator /(const ALeft: TMeterQty; const ARight: TQuinticSecondQty): TMeterPerQuinticSecondQty; inline;
operator /(const ALeft: TMeterPerSecondQty; const ARight: TQuarticSecondQty): TMeterPerQuinticSecondQty; inline;
operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TCubicSecondQty): TMeterPerQuinticSecondQty; inline;
operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TSquareSecondQty): TMeterPerQuinticSecondQty; inline;
operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSecondQty): TMeterPerQuinticSecondQty; inline;
operator /(const ALeft: TMeterQty; const ARight: TSexticSecondQty): TMeterPerSexticSecondQty; inline;
operator /(const ALeft: TMeterPerSecondQty; const ARight: TQuinticSecondQty): TMeterPerSexticSecondQty; inline;
operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TQuarticSecondQty): TMeterPerSexticSecondQty; inline;
operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TCubicSecondQty): TMeterPerSexticSecondQty; inline;
operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSquareSecondQty): TMeterPerSexticSecondQty; inline;
operator /(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSecondQty): TMeterPerSexticSecondQty; inline;
operator /(const ALeft: TSquareMeterQty; const ARight: TSquareSecondQty): TSquareMeterPerSquareSecondQty; inline;
operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterPerSquareSecondQty): TMeterQty; inline;
operator /(const ALeft: TMeterSecondQty; const ARight: TMeterQty): TSecondQty; inline;
operator /(const ALeft: TKilogramMeterQty; const ARight: TKilogramQty): TMeterQty; inline;
operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramQty): THertzQty; inline;
operator /(const ALeft: TKilogramMeterQty; const ARight: TKilogramMeterPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramPerSecondQty): TMeterQty; inline;
operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramQty): TMeterPerSecondQty; inline;
operator /(const ALeft: double; const ARight: TReciprocalSquareRootMeterQty): TSquareRootMeterQty; inline;
operator /(const ALeft: double; const ARight: TReciprocalMeterQty): TMeterQty; inline;
operator /(const ALeft: TReciprocalSquareRootCubicMeterQty; const ARight: TReciprocalMeterQty): TReciprocalSquareRootMeterQty; inline;
operator /(const ALeft: double; const ARight: TSquareMeterQty): TReciprocalSquareMeterQty; inline;
operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareMeterQty): TMeterQty; inline;
operator /(const ALeft: double; const ARight: TCubicMeterQty): TReciprocalCubicMeterQty; inline;
operator /(const ALeft: TReciprocalMeterQty; const ARight: TSquareMeterQty): TReciprocalCubicMeterQty; inline;
operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalCubicMeterQty): TMeterQty; inline;
operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalMeterQty): TReciprocalCubicMeterQty; inline;
operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalCubicMeterQty; inline;
operator /(const ALeft: double; const ARight: TQuarticMeterQty): TReciprocalQuarticMeterQty; inline;
operator /(const ALeft: TReciprocalMeterQty; const ARight: TCubicMeterQty): TReciprocalQuarticMeterQty; inline;
operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareMeterQty): TReciprocalQuarticMeterQty; inline;
operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalQuarticMeterQty): TMeterQty; inline;
operator /(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalMeterQty): TReciprocalCubicMeterQty; inline;
operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalQuarticMeterQty; inline;
operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareMeterQty): TKilogramQty; inline;
operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramSquareMeterQty): THertzQty; inline;
operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramMeterPerSecondQty): TMeterQty; inline;
operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TReciprocalMeterQty): TKilogramSquareMeterPerSecondQty; inline;
operator /(const ALeft: TKilogramPerSecondQty; const ARight: TReciprocalSquareMeterQty): TKilogramSquareMeterPerSecondQty; inline;
operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramMeterQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TSecondQty; const ARight: TMeterQty): TSecondPerMeterQty; inline;
operator /(const ALeft: TKilogramQty; const ARight: TMeterQty): TKilogramPerMeterQty; inline;
operator /(const ALeft: TKilogramPerMeterQty; const ARight: TKilogramPerSecondQty): TSecondPerMeterQty; inline;
operator /(const ALeft: TKilogramPerSecondQty; const ARight: TMeterPerSecondQty): TKilogramPerMeterQty; inline;
operator /(const ALeft: TKilogramQty; const ARight: TSquareMeterQty): TKilogramPerSquareMeterQty; inline;
operator /(const ALeft: TKilogramQty; const ARight: TCubicMeterQty): TKilogramPerCubicMeterQty; inline;
operator /(const ALeft: TKilogramPerSquareMeterQty; const ARight: TMeterQty): TKilogramPerCubicMeterQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TMeterPerSquareSecondQty): TKilogramQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareSecondQty): TKilogramPerMeterQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TKilogramPerSecondQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TNewtonQty): TSecondQty; inline;
operator /(const ALeft: TKilogramMeterQty; const ARight: TSquareSecondQty): TNewtonQty; inline;
operator /(const ALeft: TNewtonRadianQty; const ARight: TNewtonQty): TRadianQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TSquareMeterQty): TPascalQty; inline;
operator /(const ALeft: TPascalQty; const ARight: TSquareMeterPerSquareSecondQty): TKilogramPerCubicMeterQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TNewtonQty): TMeterQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TCubicMeterQty): TPascalQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TKilogramMeterPerSecondQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TSquareMeterPerSquareSecondQty): TKilogramQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TKilogramSquareMeterQty): TSquareHertzQty; inline;
operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareSecondQty): TJouleQty; inline;
operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TJouleQty): TSecondQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TKilogramSquareMeterPerSecondQty): THertzQty; inline;
operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TJouleQty): TKilogramQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TJoulePerRadianQty): TRadianQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TWattQty): TSecondQty; inline;
operator /(const ALeft: TWattQty; const ARight: TJouleQty): THertzQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSquareMeterPerSquareSecondQty): TKilogramPerSecondQty; inline;
operator /(const ALeft: TWattQty; const ARight: TNewtonQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TCoulombQty; const ARight: TAmpereQty): TSecondQty; inline;
operator /(const ALeft: TCoulombMeterQty; const ARight: TCoulombQty): TMeterQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TCoulombQty): TVoltQty; inline;
operator /(const ALeft: TWattQty; const ARight: TAmpereQty): TVoltQty; inline;
operator /(const ALeft: TCoulombQty; const ARight: TFaradQty): TVoltQty; inline;
operator /(const ALeft: TSquareCoulombQty; const ARight: TJouleQty): TFaradQty; inline;
operator *(const ALeft: TFaradQty; const ARight: TOhmQty): TSecondQty; inline;
operator *(const ALeft: TOhmQty; const ARight: TFaradQty): TSecondQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSquareAmpereQty): TOhmQty; inline;
operator /(const ALeft: TSquareVoltQty; const ARight: TWattQty): TOhmQty; inline;
operator /(const ALeft: TVoltQty; const ARight: TAmpereQty): TOhmQty; inline;
operator /(const ALeft: double; const ARight: TSiemensQty): TOhmQty; inline;
operator /(const ALeft: TFaradQty; const ARight: TSiemensQty): TSecondQty; inline;
operator /(const ALeft: TSiemensQty; const ARight: TFaradQty): THertzQty; inline;
operator /(const ALeft: TAmpereQty; const ARight: TSiemensQty): TVoltQty; inline;
operator /(const ALeft: TSiemensQty; const ARight: TSiemensPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TKilogramPerSecondQty; const ARight: TCoulombQty): TTeslaQty; inline;
operator /(const ALeft: TWeberQty; const ARight: TSquareMeterQty): TTeslaQty; inline;
operator /(const ALeft: TWeberQty; const ARight: TVoltQty): TSecondQty; inline;
operator /(const ALeft: TWeberQty; const ARight: TCoulombQty): TOhmQty; inline;
operator /(const ALeft: TWeberQty; const ARight: TAmpereQty): THenryQty; inline;
operator /(const ALeft: THenryQty; const ARight: TOhmQty): TSecondQty; inline;
operator /(const ALeft: TOhmQty; const ARight: THenryQty): THertzQty; inline;
operator /(const ALeft: double; const ARight: THenryQty): TReciprocalHenryQty; inline;
operator /(const ALeft: TLumenQty; const ARight: TSteradianQty): TCandelaQty; inline;
operator /(const ALeft: TLumenSecondQty; const ARight: TLumenQty): TSecondQty; inline;
operator /(const ALeft: TLumenSecondPerCubicMeterQty; const ARight: TCubicMeterQty): TLumenSecondQty; inline;
operator /(const ALeft: TLumenQty; const ARight: TSquareMeterQty): TLuxQty; inline;
operator /(const ALeft: TLuxSecondQty; const ARight: TSecondQty): TLuxQty; inline;
operator /(const ALeft: TMoleQty; const ARight: TKatalQty): TSecondQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TCubicMeterQty): TNewtonPerCubicMeterQty; inline;
operator /(const ALeft: TPascalQty; const ARight: TNewtonPerCubicMeterQty): TMeterQty; inline;
operator /(const ALeft: TNewtonPerCubicMeterQty; const ARight: TMeterPerSquareSecondQty): TKilogramPerCubicMeterQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TSquareMeterQty): TNewtonPerMeterQty; inline;
operator /(const ALeft: TNewtonPerMeterQty; const ARight: TPascalQty): TMeterQty; inline;
operator /(const ALeft: TNewtonPerMeterQty; const ARight: TKilogramQty): TSquareHertzQty; inline;
operator /(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TCubicMeterPerSecondQty; const ARight: TSquareMeterQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TPoiseuilleQty; const ARight: TPascalQty): TSecondQty; inline;
operator /(const ALeft: TPoiseuilleQty; const ARight: TKilogramPerSquareMeterQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TKilogramPerSecondQty; const ARight: TPoiseuilleQty): TMeterQty; inline;
operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TSquareMeterPerSecondQty; const ARight: TMeterPerSecondQty): TMeterQty; inline;
operator /(const ALeft: TPoiseuilleQty; const ARight: TSquareMeterPerSecondQty): TKilogramPerCubicMeterQty; inline;
operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramQty): TSquareMeterPerSecondQty; inline;
operator /(const ALeft: TKilogramQty; const ARight: TQuarticMeterQty): TKilogramPerQuarticMeterQty; inline;
operator /(const ALeft: TQuarticMeterSecondQty; const ARight: TQuarticMeterQty): TSecondQty; inline;
operator /(const ALeft: TKilogramPerSecondQty; const ARight: TQuarticMeterQty): TKilogramPerQuarticMeterPerSecondQty; inline;
operator /(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TKilogramQty; const ARight: TQuarticMeterSecondQty): TKilogramPerQuarticMeterPerSecondQty; inline;
operator /(const ALeft: TPascalQty; const ARight: TCubicMeterPerSecondQty): TKilogramPerQuarticMeterPerSecondQty; inline;
operator /(const ALeft: TCubicMeterQty; const ARight: TKilogramQty): TCubicMeterPerKilogramQty; inline;
operator /(const ALeft: double; const ARight: TCubicMeterPerKilogramQty): TKilogramPerCubicMeterQty; inline;
operator /(const ALeft: TKilogramSquareSecondQty; const ARight: TSquareSecondQty): TKilogramQty; inline;
operator /(const ALeft: TCubicMeterQty; const ARight: TSquareSecondQty): TCubicMeterPerSquareSecondQty; inline;
operator *(const ALeft: TSquareMeterQty; const ARight: TMeterPerSquareSecondQty): TCubicMeterPerSquareSecondQty; inline;
operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareMeterQty): TCubicMeterPerSquareSecondQty; inline;
operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareMeterPerSquareSecondQty): TMeterQty; inline;
operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareMeterQty): TNewtonQty; inline;
operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TJouleQty): TMeterQty; inline;
operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TQuarticMeterQty): TPascalQty; inline;
operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TCubicMeterPerSquareSecondQty): TKilogramQty; inline;
operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TCubicMeterQty): TNewtonQty; inline;
operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TJouleQty): TSquareMeterQty; inline;
operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TNewtonSquareMeterQty): TMeterQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TSquareKilogramQty): TNewtonPerSquareKilogramQty; inline;
operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareMeterQty): TSquareKilogramPerSquareMeterQty; inline;
operator /(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramQty): TSquareMeterPerSquareKilogramQty; inline;
operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TNewtonQty): TSquareMeterPerSquareKilogramQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TSquareKilogramPerSquareMeterQty; inline;
operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareKilogramQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareMeterQty): TNewtonPerSquareKilogramQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TSquareKilogramPerMeterQty; inline;
operator *(const ALeft: TSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TCubicMeterPerKilogramQty; inline;
operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareSecondQty): TCubicMeterPerKilogramQty; inline;
operator /(const ALeft: TCubicMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TKilogramSquareSecondQty; inline;
operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TKilogramQty; inline;
operator /(const ALeft: double; const ARight: TKelvinQty): TReciprocalKelvinQty; inline;
operator /(const ALeft: TKilogramKelvinQty; const ARight: TKilogramQty): TKelvinQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TJoulePerKelvinQty): TKelvinQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TKilogramKelvinQty): TJoulePerKilogramPerKelvinQty; inline;
operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TJoulePerKilogramPerKelvinQty): TKelvinQty; inline;
operator /(const ALeft: TJoulePerKelvinQty; const ARight: TJoulePerKilogramPerKelvinQty): TKilogramQty; inline;
operator /(const ALeft: TMeterKelvinQty; const ARight: TKelvinQty): TMeterQty; inline;
operator /(const ALeft: TKelvinQty; const ARight: TMeterQty): TKelvinPerMeterQty; inline;
operator /(const ALeft: TWattQty; const ARight: TWattPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSquareMeterQty): TWattPerSquareMeterQty; inline;
operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerSquareMeterQty): TMeterQty; inline;
operator /(const ALeft: TWattQty; const ARight: TCubicMeterQty): TWattPerCubicMeterQty; inline;
operator /(const ALeft: TWattPerMeterQty; const ARight: TSquareMeterQty): TWattPerCubicMeterQty; inline;
operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerCubicMeterQty): TMeterQty; inline;
operator /(const ALeft: TWattQty; const ARight: TWattPerKelvinQty): TKelvinQty; inline;
operator /(const ALeft: TWattQty; const ARight: TMeterKelvinQty): TWattPerMeterPerKelvinQty; inline;
operator /(const ALeft: TWattPerMeterQty; const ARight: TKelvinQty): TWattPerMeterPerKelvinQty; inline;
operator /(const ALeft: TWattPerKelvinQty; const ARight: TMeterQty): TWattPerMeterPerKelvinQty; inline;
operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerMeterPerKelvinQty): TKelvinPerMeterQty; inline;
operator /(const ALeft: TKelvinQty; const ARight: TWattQty): TKelvinPerWattQty; inline;
operator /(const ALeft: double; const ARight: TWattPerKelvinQty): TKelvinPerWattQty; inline;
operator /(const ALeft: TMeterQty; const ARight: TWattQty): TMeterPerWattQty; inline;
operator /(const ALeft: double; const ARight: TWattPerMeterQty): TMeterPerWattQty; inline;
operator /(const ALeft: TMeterKelvinQty; const ARight: TWattQty): TMeterKelvinPerWattQty; inline;
operator /(const ALeft: TMeterKelvinPerWattQty; const ARight: TKelvinQty): TMeterPerWattQty; inline;
operator /(const ALeft: double; const ARight: TMeterKelvinPerWattQty): TWattPerMeterPerKelvinQty; inline;
operator /(const ALeft: TSquareMeterKelvinQty; const ARight: TSquareMeterQty): TKelvinQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSquareMeterKelvinQty): TWattPerSquareMeterPerKelvinQty; inline;
operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerKelvinQty): TKelvinQty; inline;
operator /(const ALeft: TWattPerKelvinQty; const ARight: TSquareMeterQty): TWattPerSquareMeterPerKelvinQty; inline;
operator /(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TQuarticKelvinQty): TSquareMeterQty; inline;
operator /(const ALeft: TWattQty; const ARight: TQuarticKelvinQty): TWattPerQuarticKelvinQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSquareMeterQuarticKelvinQty): TWattPerSquareMeterPerQuarticKelvinQty; inline;
operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TQuarticKelvinQty): TWattPerSquareMeterPerQuarticKelvinQty; inline;
operator /(const ALeft: TWattPerQuarticKelvinQty; const ARight: TSquareMeterQty): TWattPerSquareMeterPerQuarticKelvinQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TMoleQty): TJoulePerMoleQty; inline;
operator /(const ALeft: TMoleKelvinQty; const ARight: TMoleQty): TKelvinQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TMoleKelvinQty): TJoulePerMolePerKelvinQty; inline;
operator /(const ALeft: TJoulePerKelvinQty; const ARight: TMoleQty): TJoulePerMolePerKelvinQty; inline;
operator /(const ALeft: TJoulePerMoleQty; const ARight: TKelvinQty): TJoulePerMolePerKelvinQty; inline;
operator /(const ALeft: TOhmMeterQty; const ARight: TOhmQty): TMeterQty; inline;
operator /(const ALeft: TVoltQty; const ARight: TVoltPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TCoulombQty): TVoltPerMeterQty; inline;
operator /(const ALeft: TVoltPerMeterQty; const ARight: TTeslaQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TAmpereQty; const ARight: TCoulombPerMeterQty): TMeterPerSecondQty; inline;
operator /(const ALeft: TSquareCoulombQty; const ARight: TSquareCoulombPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TSquareCoulombPerMeterQty; const ARight: TCoulombQty): TCoulombPerMeterQty; inline;
operator /(const ALeft: TCoulombQty; const ARight: TSquareMeterQty): TCoulombPerSquareMeterQty; inline;
operator /(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombPerSquareMeterQty): TMeterQty; inline;
operator /(const ALeft: TSquareMeterQty; const ARight: TSquareCoulombQty): TSquareMeterPerSquareCoulombQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TSquareCoulombQty): TNewtonPerSquareCoulombQty; inline;
operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TNewtonQty): TSquareMeterPerSquareCoulombQty; inline;
operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TSquareCoulombQty; inline;
operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareMeterQty): TNewtonPerSquareCoulombQty; inline;
operator /(const ALeft: TVoltPerMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TCoulombPerSquareMeterQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TSquareCoulombPerMeterQty; inline;
operator /(const ALeft: TVoltMeterQty; const ARight: TVoltQty): TMeterQty; inline;
operator /(const ALeft: TVoltMeterQty; const ARight: TSquareMeterQty): TVoltPerMeterQty; inline;
operator /(const ALeft: TVoltMeterQty; const ARight: TVoltMeterPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TFaradQty; const ARight: TFaradPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TSquareCoulombQty; const ARight: TNewtonSquareMeterQty): TFaradPerMeterQty; inline;
operator /(const ALeft: TCoulombQty; const ARight: TVoltMeterQty): TFaradPerMeterQty; inline;
operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TVoltPerMeterQty): TFaradPerMeterQty; inline;
operator /(const ALeft: double; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TFaradPerMeterQty; inline;
operator /(const ALeft: TAmpereQty; const ARight: TAmperePerMeterQty): TMeterQty; inline;
operator /(const ALeft: TMeterQty; const ARight: TAmpereQty): TMeterPerAmpereQty; inline;
operator /(const ALeft: TTeslaMeterQty; const ARight: TTeslaQty): TMeterQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TTeslaMeterQty): TAmpereQty; inline;
operator /(const ALeft: TTeslaQty; const ARight: TAmpereQty): TTeslaPerAmpereQty; inline;
operator /(const ALeft: THenryQty; const ARight: THenryPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TTeslaMeterQty; const ARight: TAmpereQty): THenryPerMeterQty; inline;
operator /(const ALeft: THenryPerMeterQty; const ARight: TTeslaPerAmpereQty): TMeterQty; inline;
operator /(const ALeft: THenryPerMeterQty; const ARight: TTeslaQty): TMeterPerAmpereQty; inline;
operator /(const ALeft: TTeslaQty; const ARight: TAmperePerMeterQty): THenryPerMeterQty; inline;
operator /(const ALeft: TNewtonQty; const ARight: TSquareAmpereQty): THenryPerMeterQty; inline;
operator /(const ALeft: TRadianQty; const ARight: TRadianPerMeterQty): TMeterQty; inline;
operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareSecondQty): TSquareKilogramPerSquareSecondQty; inline;
operator /(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TNewtonPerMeterQty): TKilogramQty; inline;
operator /(const ALeft: TSquareSecondQty; const ARight: TSquareMeterQty): TSquareSecondPerSquareMeterQty; inline;
operator /(const ALeft: double; const ARight: TSquareMeterPerSquareSecondQty): TSquareSecondPerSquareMeterQty; inline;
operator /(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: TFaradPerMeterQty): THenryPerMeterQty; inline;
operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareJouleQty): TSquareSecondQty; inline;
operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TNewtonCubicMeterQty): TKilogramQty; inline;
operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareKilogramSquareMeterPerSquareSecondQty): TSquareMeterQty; inline;
operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TSquareJouleSquareSecondQty): TReciprocalSquareMeterQty; inline;
operator /(const ALeft: TCoulombQty; const ARight: TKilogramQty): TCoulombPerKilogramQty; inline;
operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TSquareMeterQty): TAmpereQty; inline;
operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TCoulombQty): TSquareMeterPerSecondQty; inline;
operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TKilogramSquareMeterPerSecondQty): TCoulombPerKilogramQty; inline;
operator /(const ALeft: TJouleQty; const ARight: TSquareMeterAmpereQty): TTeslaQty; inline;
operator /(const ALeft: TLumenQty; const ARight: TWattQty): TLumenPerWattQty; inline;
operator /(const ALeft: double; const ARight: TMoleQty): TReciprocalMoleQty; inline;
operator /(const ALeft: TAmpereQty; const ARight: TSquareMeterQty): TAmperePerSquareMeterQty; inline;
operator /(const ALeft: TAmperePerMeterQty; const ARight: TMeterQty): TAmperePerSquareMeterQty; inline;
operator /(const ALeft: TMoleQty; const ARight: TCubicMeterQty): TMolePerCubicMeterQty; inline;
operator /(const ALeft: TCandelaQty; const ARight: TSquareMeterQty): TCandelaPerSquareMeterQty; inline;
operator /(const ALeft: TCoulombQty; const ARight: TCubicMeterQty): TCoulombPerCubicMeterQty; inline;
operator /(const ALeft: TCoulombPerMeterQty; const ARight: TSquareMeterQty): TCoulombPerCubicMeterQty; inline;
operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TCoulombPerCubicMeterQty): TMeterQty; inline;
operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TGrayPerSecondQty): TSecondQty; inline;
operator /(const ALeft: TSteradianHertzQty; const ARight: TSteradianQty): THertzQty; inline;
operator /(const ALeft: TMeterSteradianQty; const ARight: TSteradianQty): TMeterQty; inline;
operator /(const ALeft: TSquareMeterSteradianQty; const ARight: TSteradianQty): TSquareMeterQty; inline;
operator /(const ALeft: TCubicMeterSteradianQty; const ARight: TCubicMeterQty): TSteradianQty; inline;
operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterSteradianQty): THertzQty; inline;
operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSteradianHertzQty): TSquareMeterQty; inline;
operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSteradianQty): TSquareMeterPerSecondQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSteradianQty): TWattPerSteradianQty; inline;
operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSteradianPerHertzQty): THertzQty; inline;
operator *(const ALeft: TSteradianQty; const ARight: TWattPerSteradianPerHertzQty): TWattPerHertzQty; inline;
operator *(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSteradianQty): TWattPerHertzQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSteradianHertzQty): TWattPerSteradianPerHertzQty; inline;
operator /(const ALeft: TWattPerSteradianQty; const ARight: TMeterQty): TWattPerMeterPerSteradianQty; inline;
operator /(const ALeft: TWattPerMeterQty; const ARight: TSteradianQty): TWattPerMeterPerSteradianQty; inline;
operator /(const ALeft: TWattQty; const ARight: TMeterSteradianQty): TWattPerMeterPerSteradianQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSquareMeterSteradianQty): TWattPerSquareMeterPerSteradianQty; inline;
operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TSteradianQty): TWattPerSquareMeterPerSteradianQty; inline;
operator /(const ALeft: TWattPerSteradianQty; const ARight: TSquareMeterQty): TWattPerSquareMeterPerSteradianQty; inline;
operator /(const ALeft: TWattQty; const ARight: TCubicMeterSteradianQty): TWattPerCubicMeterPerSteradianQty; inline;
operator /(const ALeft: TWattPerCubicMeterQty; const ARight: TSteradianQty): TWattPerCubicMeterPerSteradianQty; inline;
operator /(const ALeft: TWattPerSteradianQty; const ARight: TCubicMeterQty): TWattPerCubicMeterPerSteradianQty; inline;
operator /(const ALeft: TWattQty; const ARight: TSquareMeterSteradianHertzQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TSteradianHertzQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
operator /(const ALeft: TWattPerSteradianQty; const ARight: TSquareMeterPerSecondQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
operator *(const ALeft: TSquareMeterSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerHertzQty; inline;
operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterSteradianQty): TWattPerHertzQty; inline;
operator /(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): THertzQty; inline;
operator /(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSquareMeterQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
operator /(const ALeft: TKatalQty; const ARight: TCubicMeterQty): TKatalPerCubicMeterQty; inline;
operator /(const ALeft: TCoulombQty; const ARight: TMoleQty): TCoulombPerMoleQty; inline;
operator /(const ALeft: TJoulePerMoleQty; const ARight: TVoltQty): TCoulombPerMoleQty; inline;

{ TUnit classes }

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterAmpereQty}{$DEFINE TUnit:=TSquareMeterAmpereUnit}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TSquareMeterAmpereUnit): TTeslaQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TSquareMeterAmpereUnit): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareKilogramQty}{$DEFINE TUnit:=TSquareMeterPerSquareKilogramUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareMeterPerSquareKilogramUnit): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareKilogramUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareKilogramUnit): TSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareKilogramQty; const ARight: TSquareMeterPerSquareKilogramUnit): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TGrayPerSecondQty}{$DEFINE TUnit:=TGrayPerSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TGrayPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TGrayPerSecondUnit): TSquareMeterPerSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TVoltMeterPerSecondQty}{$DEFINE TUnit:=TVoltMeterPerSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TVoltMeterQty; const ARight: TVoltMeterPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TVoltMeterPerSecondUnit): TVoltMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMoleQty}{$DEFINE TUnit:=TMoleUnit}{$i adim.inc}
  class operator *(const ALeft: TCoulombPerMoleQty; const ARight: TMoleUnit): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TMoleUnit): TCoulombPerMoleQty; inline;
  class operator *(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TMoleUnit): TJoulePerKelvinQty; inline;
  class operator /(const ALeft: TJoulePerKelvinQty; const ARight: TMoleUnit): TJoulePerMolePerKelvinQty; inline;
  class operator /(const ALeft: TMoleKelvinQty; const ARight: TMoleUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TMoleUnit): TMoleKelvinQty; inline;
  class operator *(const ALeft: TJoulePerMoleQty; const ARight: TMoleUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TMoleUnit): TJoulePerMoleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattQty}{$DEFINE TUnit:=TWattUnit}{$i adim.inc}
  class operator *(const ALeft: TLumenPerWattQty; const ARight: TWattUnit): TLumenQty; inline;
  class operator /(const ALeft: TLumenQty; const ARight: TWattUnit): TLumenPerWattQty; inline;
  class operator *(const ALeft: TMeterKelvinPerWattQty; const ARight: TWattUnit): TMeterKelvinQty; inline;
  class operator /(const ALeft: TMeterKelvinQty; const ARight: TWattUnit): TMeterKelvinPerWattQty; inline;
  class operator *(const ALeft: TMeterPerWattQty; const ARight: TWattUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TWattUnit): TMeterPerWattQty; inline;
  class operator *(const ALeft: TKelvinPerWattQty; const ARight: TWattUnit): TKelvinQty; inline;
  class operator /(const ALeft: TKelvinQty; const ARight: TWattUnit): TKelvinPerWattQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TWattUnit): TSquareVoltQty; inline;
  class operator /(const ALeft: TSquareVoltQty; const ARight: TWattUnit): TOhmQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TWattUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TWattUnit): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TFaradQty}{$DEFINE TUnit:=TFaradUnit}{$i adim.inc}
  class operator /(const ALeft: TSiemensQty; const ARight: TFaradUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TFaradUnit): TSiemensQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TFaradUnit): TSecondQty; inline;
  class operator /(const ALeft: TSecondQty; const ARight: TFaradUnit): TOhmQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TFaradUnit): TJouleQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TFaradUnit): TSquareCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TFaradUnit): TVoltQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TFaradUnit): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerMeterQty}{$DEFINE TUnit:=TWattPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerMeterUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalSquareMeterQty}{$DEFINE TUnit:=TReciprocalSquareMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TSquareJouleSquareSecondQty; const ARight: TReciprocalSquareMeterUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TReciprocalSquareMeterUnit): TSquareJouleSquareSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TReciprocalSquareMeterUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TReciprocalSquareMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalQuarticMeterQty; inline;
  class operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalCubicMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalMeterQty; inline;
  class operator /(const ALeft: double; const ARight: TReciprocalSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TReciprocalSquareMeterUnit): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareKilogramPerSquareSecondQty}{$DEFINE TUnit:=TSquareKilogramPerSquareSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerSquareSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareKilogramPerSquareSecondUnit): TSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareKilogramPerMeterQty}{$DEFINE TUnit:=TSquareKilogramPerMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramPerMeterUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSquareKilogramPerMeterUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareKilogramPerMeterUnit): TSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TQuarticMeterSecondQty}{$DEFINE TUnit:=TQuarticMeterSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TQuarticMeterSecondUnit): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TQuarticMeterSecondUnit): TKilogramPerQuarticMeterPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonQty}{$DEFINE TUnit:=TNewtonUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TNewtonUnit): TSquareMeterPerSquareCoulombQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareCoulombQty; const ARight: TNewtonUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TNewtonUnit): TSquareMeterPerSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareKilogramQty; const ARight: TNewtonUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TNewtonUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TNewtonUnit): TNewtonCubicMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TNewtonUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TNewtonUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TNewtonUnit): TWattQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TNewtonUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TNewtonUnit): TJouleQty; inline;
  class operator /(const ALeft: TSquareNewtonQty; const ARight: TNewtonUnit): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TNewtonUnit): TSquareNewtonQty; inline;
  class operator /(const ALeft: TNewtonRadianQty; const ARight: TNewtonUnit): TRadianQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: TNewtonUnit): TNewtonRadianQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TNewtonUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TNewtonUnit): TKilogramMeterQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TNewtonUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TNewtonUnit): TKilogramMeterPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLumenSecondQty}{$DEFINE TUnit:=TLumenSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TLumenSecondPerCubicMeterQty; const ARight: TLumenSecondUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TLumenSecondUnit): TLumenSecondPerCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramMeterPerSecondQty}{$DEFINE TUnit:=TKilogramMeterPerSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TKilogramMeterPerSecondUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramMeterPerSecondUnit): TJouleQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramMeterPerSecondUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TKilogramMeterPerSecondUnit): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramMeterPerSecondUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TKilogramMeterPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKilogramMeterPerSecondUnit): TKilogramMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareCoulombPerMeterQty}{$DEFINE TUnit:=TSquareCoulombPerMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombPerMeterUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSquareCoulombPerMeterUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TSquareCoulombPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareCoulombPerMeterUnit): TSquareCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerMoleQty}{$DEFINE TUnit:=TJoulePerMoleUnit}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TJoulePerMoleUnit): TMoleQty; inline;
  class operator *(const ALeft: TMoleQty; const ARight: TJoulePerMoleUnit): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TSquareMeterPerSquareSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareMeterPerSquareSecondUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareMeterPerSquareSecondUnit): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSquareMeterPerSquareSecondUnit): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TSquareMeterPerSquareSecondUnit): TWattQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSquareMeterPerSquareSecondUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareMeterPerSquareSecondUnit): TJouleQty; inline;
  class operator /(const ALeft: TPascalQty; const ARight: TSquareMeterPerSquareSecondUnit): TKilogramPerCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TSquareMeterPerSquareSecondUnit): TPascalQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareSecondUnit): TKilogramPerMeterQty; inline;
  class operator *(const ALeft: TKilogramPerMeterQty; const ARight: TSquareMeterPerSquareSecondUnit): TNewtonQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareMeterPerSquareSecondUnit): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramPerSecondQty}{$DEFINE TUnit:=TKilogramPerSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TKilogramPerSecondUnit): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerSecondUnit): TSquareKilogramPerSquareSecondQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TKilogramPerSecondUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerSecondUnit): TWattQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TKilogramPerSecondUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerSecondUnit): TNewtonQty; inline;
  class operator /(const ALeft: TKilogramPerMeterQty; const ARight: TKilogramPerSecondUnit): TSecondPerMeterQty; inline;
  class operator *(const ALeft: TSecondPerMeterQty; const ARight: TKilogramPerSecondUnit): TKilogramPerMeterQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramPerSecondUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramPerSecondUnit): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKilogramPerSecondUnit): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$DEFINE TUnit:=TNewtonPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TNewtonPerMeterUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TNewtonPerMeterUnit): TSquareKilogramPerSquareSecondQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TNewtonPerMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TNewtonPerMeterUnit): TJouleQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TNewtonPerMeterUnit): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerKilogramPerKelvinQty}{$DEFINE TUnit:=TJoulePerKilogramPerKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TJoulePerKelvinQty; const ARight: TJoulePerKilogramPerKelvinUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TJoulePerKilogramPerKelvinUnit): TJoulePerKelvinQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TJoulePerKilogramPerKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TJoulePerKilogramPerKelvinUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TJoulePerKilogramPerKelvinUnit): TKilogramKelvinQty; inline;
  class operator *(const ALeft: TKilogramKelvinQty; const ARight: TJoulePerKilogramPerKelvinUnit): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSteradianPerHertzQty}{$DEFINE TUnit:=TWattPerSteradianPerHertzUnit}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSteradianPerHertzUnit): TSteradianHertzQty; inline;
  class operator *(const ALeft: TSteradianHertzQty; const ARight: TWattPerSteradianPerHertzUnit): TWattQty; inline;
  class operator /(const ALeft: TWattPerHertzQty; const ARight: TWattPerSteradianPerHertzUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerSteradianPerHertzUnit): TWattPerHertzQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSteradianPerHertzUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TWattPerSteradianPerHertzUnit): TWattPerSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TAmperePerMeterQty}{$DEFINE TUnit:=TAmperePerMeterUnit}{$i adim.inc}
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TAmperePerMeterUnit): TTeslaQty; inline;
  class operator /(const ALeft: TTeslaQty; const ARight: TAmperePerMeterUnit): THenryPerMeterQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TAmperePerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TAmperePerMeterUnit): TAmpereQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSteradianQty}{$DEFINE TUnit:=TWattPerSteradianUnit}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSteradianUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerSteradianUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerKelvinQty}{$DEFINE TUnit:=TWattPerKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TWattPerKelvinUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCandelaQty}{$DEFINE TUnit:=TCandelaUnit}{$i adim.inc}
  class operator /(const ALeft: TLumenQty; const ARight: TCandelaUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TCandelaUnit): TLumenQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerKelvinQty}{$DEFINE TUnit:=TJoulePerKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TJoulePerKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TJoulePerKelvinUnit): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSiemensPerMeterQty}{$DEFINE TUnit:=TSiemensPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TSiemensQty; const ARight: TSiemensPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSiemensPerMeterUnit): TSiemensQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicMeterPerSquareSecondQty}{$DEFINE TUnit:=TCubicMeterPerSquareSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TCubicMeterPerSquareSecondUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TCubicMeterPerSquareSecondUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerSquareSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TCubicMeterPerSquareSecondUnit): TCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramQty}{$DEFINE TUnit:=TKilogramUnit}{$i adim.inc}
  class operator *(const ALeft: TCoulombPerKilogramQty; const ARight: TKilogramUnit): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TKilogramUnit): TCoulombPerKilogramQty; inline;
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TKilogramUnit): TNewtonCubicMeterQty; inline;
  class operator *(const ALeft: TNewtonCubicMeterQty; const ARight: TKilogramUnit): TSquareJouleSquareSecondQty; inline;
  class operator /(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TKilogramUnit): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TNewtonPerMeterQty; const ARight: TKilogramUnit): TSquareKilogramPerSquareSecondQty; inline;
  class operator *(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKilogramUnit): TJoulePerKelvinQty; inline;
  class operator /(const ALeft: TJoulePerKelvinQty; const ARight: TKilogramUnit): TJoulePerKilogramPerKelvinQty; inline;
  class operator /(const ALeft: TKilogramKelvinQty; const ARight: TKilogramUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TKilogramUnit): TKilogramKelvinQty; inline;
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TKilogramUnit): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TKilogramUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TKilogramUnit): TCubicMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TKilogramUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramSquareSecondQty; const ARight: TKilogramUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TKilogramUnit): TKilogramSquareSecondQty; inline;
  class operator *(const ALeft: TCubicMeterPerKilogramQty; const ARight: TKilogramUnit): TCubicMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TKilogramUnit): TCubicMeterPerKilogramQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TKilogramUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramUnit): TSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TNewtonPerMeterQty; const ARight: TKilogramUnit): TSquareHertzQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TKilogramUnit): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TKilogramUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TKilogramUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TKilogramUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramUnit): TJouleQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TKilogramUnit): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TKilogramUnit): TNewtonQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TKilogramUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TKilogramUnit): TKilogramSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramUnit): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TKilogramUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TKilogramUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramUnit): TKilogramMeterQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TKilogramUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TKilogramUnit): TSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramSquareSecondQty}{$DEFINE TUnit:=TKilogramSquareSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TKilogramSquareSecondUnit): TCubicMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TKilogramSquareSecondUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalSquareRootCubicMeterQty}{$DEFINE TUnit:=TReciprocalSquareRootCubicMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalMeterQty}{$DEFINE TUnit:=TReciprocalMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TReciprocalMeterUnit): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TReciprocalMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalCubicMeterQty; inline;
  class operator *(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalQuarticMeterQty; inline;
  class operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalCubicMeterQty; inline;
  class operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalSquareRootCubicMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalSquareRootMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalSquareRootCubicMeterQty; inline;
  class operator /(const ALeft: double; const ARight: TReciprocalMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TReciprocalMeterUnit): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareKilogramQty}{$DEFINE TUnit:=TNewtonSquareMeterPerSquareKilogramUnit}{$i adim.inc}
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TKilogramSquareSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TCubicMeterQty; inline;
  class operator /(const ALeft: TCubicMeterPerKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TCubicMeterPerKilogramQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TSquareKilogramPerMeterQty; inline;
  class operator *(const ALeft: TSquareKilogramPerMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TJouleQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TSquareKilogramPerSquareMeterQty; inline;
  class operator *(const ALeft: TSquareKilogramPerSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TKilogramSquareMeterPerSecondUnit): TCoulombPerKilogramQty; inline;
  class operator *(const ALeft: TCoulombPerKilogramQty; const ARight: TKilogramSquareMeterPerSecondUnit): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TSquareJouleSquareSecondQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TKilogramSquareMeterPerSecondUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TKilogramSquareMeterPerSecondUnit): TJouleQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TKilogramSquareMeterPerSecondUnit): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TKilogramSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicSecondQty}{$DEFINE TUnit:=TCubicSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TCubicSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TCubicSecondUnit): TMeterPerSexticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TCubicSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TCubicSecondUnit): TMeterPerQuinticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuarticSecondQty; const ARight: TCubicSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TCubicSecondUnit): TMeterPerQuarticSecondQty; inline;
  class operator *(const ALeft: TMeterPerCubicSecondQty; const ARight: TCubicSecondUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TCubicSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TSexticSecondQty; const ARight: TCubicSecondUnit): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TCubicSecondUnit): TSexticSecondQty; inline;
  class operator /(const ALeft: TQuinticSecondQty; const ARight: TCubicSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TCubicSecondUnit): TQuinticSecondQty; inline;
  class operator /(const ALeft: TQuarticSecondQty; const ARight: TCubicSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TCubicSecondUnit): TQuarticSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareVoltQty}{$DEFINE TUnit:=TSquareVoltUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramPerSquareMeterQty}{$DEFINE TUnit:=TKilogramPerSquareMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TKilogramPerSquareMeterUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerSquareMeterUnit): TPoiseuilleQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TKilogramPerSquareMeterUnit): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterQty}{$DEFINE TUnit:=TSquareMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterUnit): TWattPerSteradianPerHertzQty; inline;
  class operator /(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSquareMeterUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterPerSteradianQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterUnit): TSteradianHertzQty; inline;
  class operator *(const ALeft: TSteradianHertzQty; const ARight: TSquareMeterUnit): TSquareMeterSteradianHertzQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianQty; const ARight: TSquareMeterUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TSquareMeterUnit): TSquareMeterSteradianQty; inline;
  class operator *(const ALeft: TCoulombPerCubicMeterQty; const ARight: TSquareMeterUnit): TCoulombPerMeterQty; inline;
  class operator /(const ALeft: TCoulombPerMeterQty; const ARight: TSquareMeterUnit): TCoulombPerCubicMeterQty; inline;
  class operator *(const ALeft: TCandelaPerSquareMeterQty; const ARight: TSquareMeterUnit): TCandelaQty; inline;
  class operator /(const ALeft: TCandelaQty; const ARight: TSquareMeterUnit): TCandelaPerSquareMeterQty; inline;
  class operator *(const ALeft: TAmperePerSquareMeterQty; const ARight: TSquareMeterUnit): TAmpereQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TSquareMeterUnit): TAmperePerSquareMeterQty; inline;
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TSquareMeterUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TSquareMeterUnit): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareMeterUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TSquareMeterUnit): TSquareJouleSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: TSquareMeterUnit): TSquareSecondQty; inline;
  class operator /(const ALeft: TSquareSecondQty; const ARight: TSquareMeterUnit): TSquareSecondPerSquareMeterQty; inline;
  class operator /(const ALeft: TVoltMeterQty; const ARight: TSquareMeterUnit): TVoltPerMeterQty; inline;
  class operator *(const ALeft: TVoltPerMeterQty; const ARight: TSquareMeterUnit): TVoltMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareMeterUnit): TNewtonPerSquareCoulombQty; inline;
  class operator *(const ALeft: TNewtonPerSquareCoulombQty; const ARight: TSquareMeterUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator *(const ALeft: TCoulombPerSquareMeterQty; const ARight: TSquareMeterUnit): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TSquareMeterUnit): TCoulombPerSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TSquareMeterUnit): TWattPerQuarticKelvinQty; inline;
  class operator /(const ALeft: TWattPerQuarticKelvinQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterPerQuarticKelvinQty; inline;
  class operator /(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TSquareMeterUnit): TQuarticKelvinQty; inline;
  class operator *(const ALeft: TQuarticKelvinQty; const ARight: TSquareMeterUnit): TSquareMeterQuarticKelvinQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TSquareMeterUnit): TWattPerKelvinQty; inline;
  class operator /(const ALeft: TWattPerKelvinQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterPerKelvinQty; inline;
  class operator /(const ALeft: TSquareMeterKelvinQty; const ARight: TSquareMeterUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TSquareMeterUnit): TSquareMeterKelvinQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterQty; const ARight: TSquareMeterUnit): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TSquareMeterUnit): TWattPerCubicMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterQty; const ARight: TSquareMeterUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareMeterUnit): TNewtonPerSquareKilogramQty; inline;
  class operator *(const ALeft: TNewtonPerSquareKilogramQty; const ARight: TSquareMeterUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareKilogramPerSquareMeterQty; const ARight: TSquareMeterUnit): TSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareMeterUnit): TSquareKilogramPerSquareMeterQty; inline;
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TSquareMeterUnit): TJouleQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TSquareMeterUnit): TNewtonCubicMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareMeterUnit): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSquareMeterUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareMeterUnit): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareMeterUnit): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TCubicMeterPerSecondQty; const ARight: TSquareMeterUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TSquareMeterUnit): TCubicMeterPerSecondQty; inline;
  class operator *(const ALeft: TNewtonPerMeterQty; const ARight: TSquareMeterUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSquareMeterUnit): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TLuxQty; const ARight: TSquareMeterUnit): TLumenQty; inline;
  class operator /(const ALeft: TLumenQty; const ARight: TSquareMeterUnit): TLuxQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TSquareMeterUnit): TTeslaQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TSquareMeterUnit): TWeberQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TSquareMeterUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TSquareMeterUnit): TPascalQty; inline;
  class operator *(const ALeft: TKilogramPerSquareMeterQty; const ARight: TSquareMeterUnit): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TSquareMeterUnit): TKilogramPerSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareMeterUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareMeterUnit): TKilogramSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalQuarticMeterQty; const ARight: TSquareMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareMeterUnit): TReciprocalQuarticMeterQty; inline;
  class operator *(const ALeft: TReciprocalCubicMeterQty; const ARight: TSquareMeterUnit): TReciprocalMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TSquareMeterUnit): TReciprocalCubicMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareMeterUnit): double; inline;
  class operator /(const ALeft: double; const ARight: TSquareMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TSexticMeterQty; const ARight: TSquareMeterUnit): TQuarticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TSquareMeterUnit): TSexticMeterQty; inline;
  class operator /(const ALeft: TQuinticMeterQty; const ARight: TSquareMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TSquareMeterUnit): TQuinticMeterQty; inline;
  class operator /(const ALeft: TQuarticMeterQty; const ARight: TSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSquareMeterUnit): TQuarticMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TSquareMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareMeterUnit): TCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSecondQty}{$DEFINE TUnit:=TSquareMeterPerSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterPerSecondUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TSquareMeterPerSecondUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterPerSecondUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TSquareMeterPerSecondUnit): TSquareMeterSteradianHertzQty; inline;
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TSquareMeterPerSecondUnit): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TSquareMeterPerSecondUnit): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSquareMeterPerSecondUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TSquareMeterPerSecondUnit): TKilogramPerCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TSquareMeterPerSecondUnit): TPoiseuilleQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSquareMeterPerSecondUnit): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerRadianQty}{$DEFINE TUnit:=TJoulePerRadianUnit}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TJoulePerRadianUnit): TRadianQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: TJoulePerRadianUnit): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TRadianQty}{$DEFINE TUnit:=TRadianUnit}{$i adim.inc}
  class operator *(const ALeft: TJoulePerRadianQty; const ARight: TRadianUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TRadianUnit): TJoulePerRadianQty; inline;
  class operator /(const ALeft: TNewtonRadianQty; const ARight: TRadianUnit): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TRadianUnit): TNewtonRadianQty; inline;
  class operator /(const ALeft: TSquareHertzQty; const ARight: TRadianUnit): TSquareHertzQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TRadianUnit): TSquareHertzQty; inline;
  class operator /(const ALeft: THertzQty; const ARight: TRadianUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TRadianUnit): THertzQty; inline;
  class operator /(const ALeft: TSteradianQty; const ARight: TRadianUnit): TRadianQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: TRadianUnit): TSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCoulombPerKilogramQty}{$DEFINE TUnit:=TCoulombPerKilogramUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TCoulombPerKilogramUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TCoulombPerKilogramUnit): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerKilogramUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TCoulombPerKilogramUnit): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterSteradianQty}{$DEFINE TUnit:=TMeterSteradianUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TMeterSteradianUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TMeterSteradianUnit): TWattPerMeterPerSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TAmpereQty}{$DEFINE TUnit:=TAmpereUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TAmpereUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TAmpereUnit): TSquareMeterAmpereQty; inline;
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TAmpereUnit): TTeslaMeterQty; inline;
  class operator /(const ALeft: TTeslaMeterQty; const ARight: TAmpereUnit): THenryPerMeterQty; inline;
  class operator *(const ALeft: TTeslaPerAmpereQty; const ARight: TAmpereUnit): TTeslaQty; inline;
  class operator /(const ALeft: TTeslaQty; const ARight: TAmpereUnit): TTeslaPerAmpereQty; inline;
  class operator *(const ALeft: TTeslaMeterQty; const ARight: TAmpereUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TAmpereUnit): TTeslaMeterQty; inline;
  class operator *(const ALeft: TMeterPerAmpereQty; const ARight: TAmpereUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TAmpereUnit): TMeterPerAmpereQty; inline;
  class operator *(const ALeft: THenryQty; const ARight: TAmpereUnit): TWeberQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TAmpereUnit): THenryQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TAmpereUnit): TVoltQty; inline;
  class operator /(const ALeft: TVoltQty; const ARight: TAmpereUnit): TOhmQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TAmpereUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TAmpereUnit): TVoltQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TAmpereUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TAmpereUnit): TCoulombQty; inline;
  class operator /(const ALeft: TSquareAmpereQty; const ARight: TAmpereUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TAmpereUnit): TSquareAmpereQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSiemensQty}{$DEFINE TUnit:=TSiemensUnit}{$i adim.inc}
  class operator /(const ALeft: TAmpereQty; const ARight: TSiemensUnit): TVoltQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TSiemensUnit): TAmpereQty; inline;
  class operator /(const ALeft: TFaradQty; const ARight: TSiemensUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSiemensUnit): TFaradQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCoulombQty}{$DEFINE TUnit:=TCoulombUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TCoulombUnit): TSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TCoulombUnit): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: TSquareCoulombPerMeterQty; const ARight: TCoulombUnit): TCoulombPerMeterQty; inline;
  class operator *(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombUnit): TSquareCoulombPerMeterQty; inline;
  class operator *(const ALeft: TVoltPerMeterQty; const ARight: TCoulombUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TCoulombUnit): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TCoulombUnit): TOhmQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TCoulombUnit): TWeberQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TCoulombUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TCoulombUnit): TTeslaQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TCoulombUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TCoulombUnit): TVoltQty; inline;
  class operator /(const ALeft: TCoulombMeterQty; const ARight: TCoulombUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCoulombUnit): TCoulombMeterQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TCoulombUnit): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TCoulombUnit): TSquareCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TQuarticMeterQty}{$DEFINE TUnit:=TQuarticMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TQuarticMeterUnit): TPascalQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TQuarticMeterUnit): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TQuarticMeterUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TQuarticMeterUnit): TKilogramPerQuarticMeterPerSecondQty; inline;
  class operator /(const ALeft: TQuarticMeterSecondQty; const ARight: TQuarticMeterUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TQuarticMeterUnit): TQuarticMeterSecondQty; inline;
  class operator *(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TQuarticMeterUnit): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TQuarticMeterUnit): TKilogramPerQuarticMeterQty; inline;
  class operator *(const ALeft: TReciprocalQuarticMeterQty; const ARight: TQuarticMeterUnit): double; inline;
  class operator /(const ALeft: double; const ARight: TQuarticMeterUnit): TReciprocalQuarticMeterQty; inline;
  class operator /(const ALeft: TSexticMeterQty; const ARight: TQuarticMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TQuarticMeterUnit): TSexticMeterQty; inline;
  class operator /(const ALeft: TQuinticMeterQty; const ARight: TQuarticMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TQuarticMeterUnit): TQuinticMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPascalQty}{$DEFINE TUnit:=TPascalUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TPascalUnit): TQuarticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TPascalUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TPascalUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TPascalUnit): TPoiseuilleQty; inline;
  class operator /(const ALeft: TNewtonPerMeterQty; const ARight: TPascalUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TPascalUnit): TNewtonPerMeterQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TPascalUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TPascalUnit): TJouleQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TPascalUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TPascalUnit): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramPerQuarticMeterQty}{$DEFINE TUnit:=TKilogramPerQuarticMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerQuarticMeterUnit): TQuarticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TKilogramPerQuarticMeterUnit): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalMoleQty}{$DEFINE TUnit:=TReciprocalMoleUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerSquareCoulombQty}{$DEFINE TUnit:=TNewtonPerSquareCoulombUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TNewtonPerSquareCoulombUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TNewtonPerSquareCoulombUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerSquareCoulombUnit): TSquareCoulombQty; inline;
  class operator *(const ALeft: TSquareCoulombQty; const ARight: TNewtonPerSquareCoulombUnit): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonRadianQty}{$DEFINE TUnit:=TNewtonRadianUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerSquareKilogramQty}{$DEFINE TUnit:=TNewtonPerSquareKilogramUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TNewtonPerSquareKilogramUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TNewtonPerSquareKilogramUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerSquareKilogramUnit): TSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareKilogramQty; const ARight: TNewtonPerSquareKilogramUnit): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THenryQty}{$DEFINE TUnit:=THenryUnit}{$i adim.inc}
  class operator /(const ALeft: TOhmQty; const ARight: THenryUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: THenryUnit): TOhmQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: THenryUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: THenryUnit): TWeberQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerQuarticKelvinQty}{$DEFINE TUnit:=TWattPerQuarticKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerQuarticKelvinUnit): TQuarticKelvinQty; inline;
  class operator *(const ALeft: TQuarticKelvinQty; const ARight: TWattPerQuarticKelvinUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWeberQty}{$DEFINE TUnit:=TWeberUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TVoltPerMeterQty}{$DEFINE TUnit:=TVoltPerMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: TVoltPerMeterUnit): TCoulombPerSquareMeterQty; inline;
  class operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TVoltPerMeterUnit): TFaradPerMeterQty; inline;
  class operator /(const ALeft: TVoltMeterQty; const ARight: TVoltPerMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TVoltPerMeterUnit): TVoltMeterQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TVoltPerMeterUnit): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TVoltPerMeterUnit): TNewtonQty; inline;
  class operator /(const ALeft: TVoltQty; const ARight: TVoltPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TVoltPerMeterUnit): TVoltQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareKilogramSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TSquareKilogramSquareMeterPerSquareSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareKilogramSquareMeterPerSquareSecondUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramSquareMeterPerSquareSecondUnit): TSquareJouleSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicMeterPerKilogramQty}{$DEFINE TUnit:=TCubicMeterPerKilogramUnit}{$i adim.inc}
  class operator /(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerKilogramUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TCubicMeterPerKilogramUnit): TCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterKelvinQty}{$DEFINE TUnit:=TSquareMeterKelvinUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TSquareMeterKelvinUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSquareMeterKelvinUnit): TWattPerSquareMeterPerKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerCubicMeterQty}{$DEFINE TUnit:=TWattPerCubicMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerCubicMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerCubicMeterUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerCubicMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerCubicMeterUnit): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerCubicMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TWattPerCubicMeterUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCoulombPerSquareMeterQty}{$DEFINE TUnit:=TCoulombPerSquareMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TCoulombPerSquareMeterUnit): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TVoltPerMeterQty; const ARight: TCoulombPerSquareMeterUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombPerSquareMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCoulombPerSquareMeterUnit): TCoulombPerMeterQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TCoulombPerSquareMeterUnit): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TVoltQty}{$DEFINE TUnit:=TVoltUnit}{$i adim.inc}
  class operator *(const ALeft: TCoulombPerMoleQty; const ARight: TVoltUnit): TJoulePerMoleQty; inline;
  class operator /(const ALeft: TJoulePerMoleQty; const ARight: TVoltUnit): TCoulombPerMoleQty; inline;
  class operator /(const ALeft: TVoltMeterQty; const ARight: TVoltUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TVoltUnit): TVoltMeterQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TVoltUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TVoltUnit): TWeberQty; inline;
  class operator *(const ALeft: TSiemensQty; const ARight: TVoltUnit): TAmpereQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TVoltUnit): TSiemensQty; inline;
  class operator *(const ALeft: TFaradQty; const ARight: TVoltUnit): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TVoltUnit): TFaradQty; inline;
  class operator /(const ALeft: TSquareVoltQty; const ARight: TVoltUnit): TVoltQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TVoltUnit): TSquareVoltQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TVoltUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TVoltUnit): TWattQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TVoltUnit): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TVoltUnit): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TOhmMeterQty}{$DEFINE TUnit:=TOhmMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicMeterPerSecondQty}{$DEFINE TUnit:=TCubicMeterPerSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TCubicMeterPerSecondUnit): TPascalQty; inline;
  class operator /(const ALeft: TPascalQty; const ARight: TCubicMeterPerSecondUnit): TKilogramPerQuarticMeterPerSecondQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TCubicMeterPerSecondUnit): TCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TJouleUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleQty; const ARight: TJouleUnit): TJouleQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TJouleUnit): TSquareJouleQty; inline;
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TJouleUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TJouleUnit): TNewtonCubicMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TJouleUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TJouleUnit): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TFaradQty; const ARight: TJouleUnit): TSquareCoulombQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TJouleUnit): TFaradQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TJouleUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TJouleUnit): TWattQty; inline;
  class operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TJouleUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TJouleUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TJouleUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TJouleUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TJouleUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TJouleUnit): TKilogramSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicKelvinQty}{$DEFINE TUnit:=TCubicKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TQuarticKelvinQty; const ARight: TCubicKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TCubicKelvinUnit): TQuarticKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalQuarticMeterQty}{$DEFINE TUnit:=TReciprocalQuarticMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalQuarticMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TReciprocalQuarticMeterUnit): TReciprocalCubicMeterQty; inline;
  class operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalQuarticMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TReciprocalQuarticMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalQuarticMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TReciprocalQuarticMeterUnit): TReciprocalMeterQty; inline;
  class operator /(const ALeft: double; const ARight: TReciprocalQuarticMeterUnit): TQuarticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TReciprocalQuarticMeterUnit): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCoulombMeterQty}{$DEFINE TUnit:=TCoulombMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLuxSecondQty}{$DEFINE TUnit:=TLuxSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TTeslaQty}{$DEFINE TUnit:=TTeslaUnit}{$i adim.inc}
  class operator *(const ALeft: TSquareMeterAmpereQty; const ARight: TTeslaUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TTeslaUnit): TSquareMeterAmpereQty; inline;
  class operator /(const ALeft: THenryPerMeterQty; const ARight: TTeslaUnit): TMeterPerAmpereQty; inline;
  class operator *(const ALeft: TMeterPerAmpereQty; const ARight: TTeslaUnit): THenryPerMeterQty; inline;
  class operator /(const ALeft: TTeslaMeterQty; const ARight: TTeslaUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TTeslaUnit): TTeslaMeterQty; inline;
  class operator /(const ALeft: TVoltPerMeterQty; const ARight: TTeslaUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TTeslaUnit): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TTeslaUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TTeslaUnit): TWeberQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TTeslaUnit): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TTeslaUnit): TKilogramPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSteradianPerSquareSecondQty}{$DEFINE TUnit:=TSteradianPerSquareSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TSteradianQty; const ARight: TSteradianPerSquareSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSteradianPerSquareSecondUnit): TSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLumenPerWattQty}{$DEFINE TUnit:=TLumenPerWattUnit}{$i adim.inc}
  class operator /(const ALeft: TLumenQty; const ARight: TLumenPerWattUnit): TWattQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TLumenPerWattUnit): TLumenQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TTeslaMeterQty}{$DEFINE TUnit:=TTeslaMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonQty; const ARight: TTeslaMeterUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TTeslaMeterUnit): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerCubicMeterQty}{$DEFINE TUnit:=TNewtonPerCubicMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TPascalQty; const ARight: TNewtonPerCubicMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TNewtonPerCubicMeterUnit): TPascalQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerCubicMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TNewtonPerCubicMeterUnit): TNewtonQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareCoulombQty}{$DEFINE TUnit:=TSquareMeterPerSquareCoulombUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareMeterPerSquareCoulombUnit): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareCoulombUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareCoulombUnit): TSquareCoulombQty; inline;
  class operator *(const ALeft: TSquareCoulombQty; const ARight: TSquareMeterPerSquareCoulombUnit): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareSecondQty}{$DEFINE TUnit:=TSquareSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareSecondUnit): TSquareJouleQty; inline;
  class operator *(const ALeft: TSquareJouleQty; const ARight: TSquareSecondUnit): TSquareJouleSquareSecondQty; inline;
  class operator *(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TSquareSecondUnit): TSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareSecondUnit): TSquareKilogramPerSquareSecondQty; inline;
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareSecondUnit): TCubicMeterPerKilogramQty; inline;
  class operator /(const ALeft: TCubicMeterPerKilogramQty; const ARight: TSquareSecondUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator *(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareSecondUnit): TCubicMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TSquareSecondUnit): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TKilogramSquareSecondQty; const ARight: TSquareSecondUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareSecondUnit): TKilogramSquareSecondQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TSquareSecondUnit): TKilogramSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareSecondUnit): TJouleQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSquareSecondUnit): TKilogramMeterQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TSquareSecondUnit): TNewtonQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TSquareSecondUnit): TSquareMeterQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareSecondUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TSquareSecondUnit): TMeterPerQuarticSecondQty; inline;
  class operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSquareSecondUnit): TMeterPerSexticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSquareSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TSquareSecondUnit): TMeterPerQuinticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSquareSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareSecondUnit): TMeterPerQuarticSecondQty; inline;
  class operator *(const ALeft: TMeterPerCubicSecondQty; const ARight: TSquareSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TSquareSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareSecondUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TSquareSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSquareSecondUnit): TSteradianQty; inline;
  class operator /(const ALeft: TSteradianQty; const ARight: TSquareSecondUnit): TSteradianPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TSquareSecondUnit): TRadianQty; inline;
  class operator /(const ALeft: TRadianQty; const ARight: TSquareSecondUnit): TSquareHertzQty; inline;
  class operator /(const ALeft: TSexticSecondQty; const ARight: TSquareSecondUnit): TQuarticSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TSquareSecondUnit): TSexticSecondQty; inline;
  class operator /(const ALeft: TQuinticSecondQty; const ARight: TSquareSecondUnit): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TSquareSecondUnit): TQuinticSecondQty; inline;
  class operator /(const ALeft: TQuarticSecondQty; const ARight: TSquareSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareSecondUnit): TQuarticSecondQty; inline;
  class operator /(const ALeft: TCubicSecondQty; const ARight: TSquareSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSquareSecondUnit): TCubicSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSteradianQty}{$DEFINE TUnit:=TSteradianUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TSteradianUnit): TWattPerCubicMeterQty; inline;
  class operator /(const ALeft: TWattPerCubicMeterQty; const ARight: TSteradianUnit): TWattPerCubicMeterPerSteradianQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSteradianUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TSteradianUnit): TWattPerSquareMeterPerSteradianQty; inline;
  class operator *(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TSteradianUnit): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TSteradianUnit): TWattPerMeterPerSteradianQty; inline;
  class operator *(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSteradianUnit): TWattPerHertzQty; inline;
  class operator /(const ALeft: TWattPerHertzQty; const ARight: TSteradianUnit): TWattPerSteradianPerHertzQty; inline;
  class operator *(const ALeft: TWattPerSteradianQty; const ARight: TSteradianUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSteradianUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSteradianUnit): TSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TSteradianUnit): TSquareMeterSteradianHertzQty; inline;
  class operator /(const ALeft: TCubicMeterSteradianQty; const ARight: TSteradianUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TSteradianUnit): TCubicMeterSteradianQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianQty; const ARight: TSteradianUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSteradianUnit): TSquareMeterSteradianQty; inline;
  class operator /(const ALeft: TMeterSteradianQty; const ARight: TSteradianUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSteradianUnit): TMeterSteradianQty; inline;
  class operator /(const ALeft: TSteradianHertzQty; const ARight: TSteradianUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TSteradianUnit): TSteradianHertzQty; inline;
  class operator /(const ALeft: TLumenQty; const ARight: TSteradianUnit): TCandelaQty; inline;
  class operator *(const ALeft: TCandelaQty; const ARight: TSteradianUnit): TLumenQty; inline;
  class operator /(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSteradianUnit): TSquareHertzQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TSteradianUnit): TSteradianPerSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareCoulombQty}{$DEFINE TUnit:=TSquareCoulombUnit}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareCoulombUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
  class operator *(const ALeft: TNewtonPerSquareCoulombQty; const ARight: TSquareCoulombUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TSquareCoulombUnit): TNewtonPerSquareCoulombQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombUnit): TSquareMeterQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareCoulombUnit): TSquareMeterPerSquareCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareSecondPerSquareMeterQty}{$DEFINE TUnit:=TSquareSecondPerSquareMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareSecondQty; const ARight: TSquareSecondPerSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSquareSecondPerSquareMeterUnit): TSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareHertzQty}{$DEFINE TUnit:=TSquareHertzUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonPerMeterQty; const ARight: TSquareHertzUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TSquareHertzUnit): TNewtonPerMeterQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSquareHertzUnit): TKilogramSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareHertzUnit): TJouleQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareHertzUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSquareHertzUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSquareHertzUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TSquareHertzUnit): TSteradianPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareHertzQty; const ARight: TSquareHertzUnit): TRadianQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: TSquareHertzUnit): TSquareHertzQty; inline;
  class operator /(const ALeft: TRadianQty; const ARight: TSquareHertzUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareHertzUnit): TRadianQty; inline;
  class operator /(const ALeft: THertzQty; const ARight: TSquareHertzUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSquareHertzUnit): THertzQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TTeslaPerAmpereQty}{$DEFINE TUnit:=TTeslaPerAmpereUnit}{$i adim.inc}
  class operator /(const ALeft: THenryPerMeterQty; const ARight: TTeslaPerAmpereUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TTeslaPerAmpereUnit): THenryPerMeterQty; inline;
  class operator /(const ALeft: TTeslaQty; const ARight: TTeslaPerAmpereUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TTeslaPerAmpereUnit): TTeslaQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerKelvinQty}{$DEFINE TUnit:=TWattPerSquareMeterPerKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TWattPerKelvinQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TWattPerKelvinQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TSquareMeterKelvinQty; inline;
  class operator *(const ALeft: TSquareMeterKelvinQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterQty}{$DEFINE TUnit:=TWattPerSquareMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerSquareMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerSquareMeterUnit): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TFaradPerMeterQty}{$DEFINE TUnit:=TFaradPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: TFaradPerMeterUnit): THenryPerMeterQty; inline;
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TFaradPerMeterUnit): TSquareSecondPerSquareMeterQty; inline;
  class operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TFaradPerMeterUnit): TVoltPerMeterQty; inline;
  class operator *(const ALeft: TVoltPerMeterQty; const ARight: TFaradPerMeterUnit): TCoulombPerSquareMeterQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TFaradPerMeterUnit): TVoltMeterQty; inline;
  class operator *(const ALeft: TVoltMeterQty; const ARight: TFaradPerMeterUnit): TCoulombQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TFaradPerMeterUnit): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TNewtonSquareMeterQty; const ARight: TFaradPerMeterUnit): TSquareCoulombQty; inline;
  class operator /(const ALeft: TFaradQty; const ARight: TFaradPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TFaradPerMeterUnit): TFaradQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramKelvinQty}{$DEFINE TUnit:=TKilogramKelvinUnit}{$i adim.inc}
  class operator *(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKilogramKelvinUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TKilogramKelvinUnit): TJoulePerKilogramPerKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMoleKelvinQty}{$DEFINE TUnit:=TMoleKelvinUnit}{$i adim.inc}
  class operator *(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TMoleKelvinUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TMoleKelvinUnit): TJoulePerMolePerKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKelvinQty}{$DEFINE TUnit:=TKelvinUnit}{$i adim.inc}
  class operator *(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TKelvinUnit): TJoulePerMoleQty; inline;
  class operator /(const ALeft: TJoulePerMoleQty; const ARight: TKelvinUnit): TJoulePerMolePerKelvinQty; inline;
  class operator /(const ALeft: TMoleKelvinQty; const ARight: TKelvinUnit): TMoleQty; inline;
  class operator *(const ALeft: TMoleQty; const ARight: TKelvinUnit): TMoleKelvinQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TKelvinUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TKelvinUnit): TWattPerSquareMeterPerKelvinQty; inline;
  class operator /(const ALeft: TSquareMeterKelvinQty; const ARight: TKelvinUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TKelvinUnit): TSquareMeterKelvinQty; inline;
  class operator /(const ALeft: TMeterKelvinPerWattQty; const ARight: TKelvinUnit): TMeterPerWattQty; inline;
  class operator *(const ALeft: TMeterPerWattQty; const ARight: TKelvinUnit): TMeterKelvinPerWattQty; inline;
  class operator *(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TKelvinUnit): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TKelvinUnit): TWattPerMeterPerKelvinQty; inline;
  class operator *(const ALeft: TWattPerKelvinQty; const ARight: TKelvinUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TKelvinUnit): TWattPerKelvinQty; inline;
  class operator /(const ALeft: TMeterKelvinQty; const ARight: TKelvinUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKelvinUnit): TMeterKelvinQty; inline;
  class operator *(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKelvinUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKelvinUnit): TJoulePerKilogramPerKelvinQty; inline;
  class operator *(const ALeft: TJoulePerKelvinQty; const ARight: TKelvinUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TKelvinUnit): TJoulePerKelvinQty; inline;
  class operator /(const ALeft: TKilogramKelvinQty; const ARight: TKelvinUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TKelvinUnit): TKilogramKelvinQty; inline;
  class operator *(const ALeft: TReciprocalKelvinQty; const ARight: TKelvinUnit): double; inline;
  class operator /(const ALeft: double; const ARight: TKelvinUnit): TReciprocalKelvinQty; inline;
  class operator /(const ALeft: TQuarticKelvinQty; const ARight: TKelvinUnit): TCubicKelvinQty; inline;
  class operator *(const ALeft: TCubicKelvinQty; const ARight: TKelvinUnit): TQuarticKelvinQty; inline;
  class operator /(const ALeft: TCubicKelvinQty; const ARight: TKelvinUnit): TSquareKelvinQty; inline;
  class operator *(const ALeft: TSquareKelvinQty; const ARight: TKelvinUnit): TCubicKelvinQty; inline;
  class operator /(const ALeft: TSquareKelvinQty; const ARight: TKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TKelvinUnit): TSquareKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TRadianPerMeterQty}{$DEFINE TUnit:=TRadianPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TRadianQty; const ARight: TRadianPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TRadianPerMeterUnit): TRadianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareJouleQty}{$DEFINE TUnit:=TSquareJouleUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareJouleUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSquareJouleUnit): TSquareJouleSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalCubicMeterQty}{$DEFINE TUnit:=TReciprocalCubicMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalCubicMeterUnit): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalCubicMeterUnit): TReciprocalQuarticMeterQty; inline;
  class operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalCubicMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TReciprocalCubicMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalCubicMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TReciprocalCubicMeterUnit): TReciprocalMeterQty; inline;
  class operator /(const ALeft: double; const ARight: TReciprocalCubicMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TReciprocalCubicMeterUnit): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterSteradianHertzQty}{$DEFINE TUnit:=TSquareMeterSteradianHertzUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterSteradianHertzUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSquareMeterSteradianHertzUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TVoltMeterQty}{$DEFINE TUnit:=TVoltMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: TVoltMeterUnit): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TVoltMeterUnit): TFaradPerMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerCubicMeterPerSteradianQty}{$DEFINE TUnit:=TWattPerCubicMeterPerSteradianUnit}{$i adim.inc}
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerCubicMeterQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TWattPerCubicMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TCubicMeterSteradianQty; inline;
  class operator *(const ALeft: TCubicMeterSteradianQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCoulombPerMeterQty}{$DEFINE TUnit:=TCoulombPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareCoulombPerMeterQty; const ARight: TCoulombPerMeterUnit): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TCoulombPerMeterUnit): TSquareCoulombPerMeterQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TCoulombPerMeterUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TCoulombPerMeterUnit): TAmpereQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCoulombPerMeterUnit): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLumenQty}{$DEFINE TUnit:=TLumenUnit}{$i adim.inc}
  class operator /(const ALeft: TLumenSecondQty; const ARight: TLumenUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TLumenUnit): TLumenSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSteradianHertzQty}{$DEFINE TUnit:=TSteradianHertzUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSteradianHertzUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TSteradianHertzUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
  class operator *(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSteradianHertzUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSteradianHertzUnit): TWattPerSteradianPerHertzQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSteradianHertzUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSteradianHertzUnit): TSquareMeterSteradianHertzQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerMolePerKelvinQty}{$DEFINE TUnit:=TJoulePerMolePerKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TJoulePerMoleQty; const ARight: TJoulePerMolePerKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TJoulePerMolePerKelvinUnit): TJoulePerMoleQty; inline;
  class operator /(const ALeft: TJoulePerKelvinQty; const ARight: TJoulePerMolePerKelvinUnit): TMoleQty; inline;
  class operator *(const ALeft: TMoleQty; const ARight: TJoulePerMolePerKelvinUnit): TJoulePerKelvinQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TJoulePerMolePerKelvinUnit): TMoleKelvinQty; inline;
  class operator *(const ALeft: TMoleKelvinQty; const ARight: TJoulePerMolePerKelvinUnit): TJouleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramMeterQty}{$DEFINE TUnit:=TKilogramMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramMeterUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TQuarticSecondQty}{$DEFINE TUnit:=TQuarticSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TQuarticSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TQuarticSecondUnit): TMeterPerSexticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TQuarticSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TQuarticSecondUnit): TMeterPerQuinticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuarticSecondQty; const ARight: TQuarticSecondUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TQuarticSecondUnit): TMeterPerQuarticSecondQty; inline;
  class operator /(const ALeft: TSexticSecondQty; const ARight: TQuarticSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TQuarticSecondUnit): TSexticSecondQty; inline;
  class operator /(const ALeft: TQuinticSecondQty; const ARight: TQuarticSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TQuarticSecondUnit): TQuinticSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerQuarticKelvinQty}{$DEFINE TUnit:=TWattPerSquareMeterPerQuarticKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TWattPerQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TWattPerQuarticKelvinQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TQuarticKelvinQty; inline;
  class operator *(const ALeft: TQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TSquareMeterQuarticKelvinQty; inline;
  class operator *(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerSecondQty}{$DEFINE TUnit:=TMeterPerSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TCoulombPerMeterQty; const ARight: TMeterPerSecondUnit): TAmpereQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TMeterPerSecondUnit): TCoulombPerMeterQty; inline;
  class operator /(const ALeft: TVoltPerMeterQty; const ARight: TMeterPerSecondUnit): TTeslaQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TMeterPerSecondUnit): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TSquareMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TMeterPerSecondUnit): TSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TMeterPerSecondUnit): TKilogramPerSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramPerSquareMeterQty; const ARight: TMeterPerSecondUnit): TPoiseuilleQty; inline;
  class operator /(const ALeft: TCubicMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TMeterPerSecondUnit): TCubicMeterPerSecondQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TMeterPerSecondUnit): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TMeterPerSecondUnit): TWattQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TMeterPerSecondUnit): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TJouleQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TMeterPerSecondUnit): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TMeterPerSecondUnit): TNewtonQty; inline;
  class operator *(const ALeft: TKilogramPerMeterQty; const ARight: TMeterPerSecondUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TMeterPerSecondUnit): TKilogramPerMeterQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TKilogramMeterQty; inline;
  class operator *(const ALeft: TKilogramMeterQty; const ARight: TMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TMeterPerSecondUnit): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterPerSecondUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerSecondUnit): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCoulombPerCubicMeterQty}{$DEFINE TUnit:=TCoulombPerCubicMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TCoulombPerCubicMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCoulombPerCubicMeterUnit): TCoulombPerSquareMeterQty; inline;
  class operator /(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombPerCubicMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TCoulombPerCubicMeterUnit): TCoulombPerMeterQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerCubicMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TCoulombPerCubicMeterUnit): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareKelvinQty}{$DEFINE TUnit:=TSquareKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TQuarticKelvinQty; const ARight: TSquareKelvinUnit): TSquareKelvinQty; inline;
  class operator *(const ALeft: TSquareKelvinQty; const ARight: TSquareKelvinUnit): TQuarticKelvinQty; inline;
  class operator /(const ALeft: TCubicKelvinQty; const ARight: TSquareKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TSquareKelvinUnit): TCubicKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterKelvinPerWattQty}{$DEFINE TUnit:=TMeterKelvinPerWattUnit}{$i adim.inc}
  class operator /(const ALeft: TMeterKelvinQty; const ARight: TMeterKelvinPerWattUnit): TWattQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TMeterKelvinPerWattUnit): TMeterKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalSquareRootMeterQty}{$DEFINE TUnit:=TReciprocalSquareRootMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TReciprocalSquareRootCubicMeterQty; const ARight: TReciprocalSquareRootMeterUnit): TReciprocalMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareRootMeterUnit): TReciprocalSquareRootCubicMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareRootMeterUnit): TReciprocalSquareRootMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TReciprocalSquareRootMeterUnit): TReciprocalMeterQty; inline;
  class operator /(const ALeft: double; const ARight: TReciprocalSquareRootMeterUnit): TSquareRootMeterQty; inline;
  class operator *(const ALeft: TSquareRootMeterQty; const ARight: TReciprocalSquareRootMeterUnit): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TQuarticKelvinQty}{$DEFINE TUnit:=TQuarticKelvinUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TQuarticKelvinUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TQuarticKelvinUnit): TWattPerSquareMeterPerQuarticKelvinQty; inline;
  class operator *(const ALeft: TWattPerQuarticKelvinQty; const ARight: TQuarticKelvinUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TQuarticKelvinUnit): TWattPerQuarticKelvinQty; inline;
  class operator /(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TQuarticKelvinUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TQuarticKelvinUnit): TSquareMeterQuarticKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoiseuilleQty}{$DEFINE TUnit:=TPoiseuilleUnit}{$i adim.inc}
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TPoiseuilleUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TPoiseuilleUnit): TKilogramPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerSteradianPerHertzQty}{$DEFINE TUnit:=TWattPerSquareMeterPerSteradianPerHertzUnit}{$i adim.inc}
  class operator /(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerSteradianPerHertzQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerSquareMeterPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSquareMeterSteradianQty; inline;
  class operator *(const ALeft: TSquareMeterSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerHertzQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSteradianHertzQty; inline;
  class operator *(const ALeft: TSteradianHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSquareMeterSteradianHertzQty; inline;
  class operator *(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterQty}{$DEFINE TUnit:=TNewtonSquareMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: TNewtonSquareMeterUnit): TSquareCoulombQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TNewtonSquareMeterUnit): TFaradPerMeterQty; inline;
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TNewtonSquareMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TNewtonSquareMeterUnit): TNewtonCubicMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSexticSecondQty}{$DEFINE TUnit:=TSexticSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TSexticSecondUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TSexticSecondUnit): TMeterPerSexticSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THenryPerMeterQty}{$DEFINE TUnit:=THenryPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: THenryPerMeterUnit): TFaradPerMeterQty; inline;
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: THenryPerMeterUnit): TSquareSecondPerSquareMeterQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: THenryPerMeterUnit): TSquareAmpereQty; inline;
  class operator *(const ALeft: TSquareAmpereQty; const ARight: THenryPerMeterUnit): TNewtonQty; inline;
  class operator /(const ALeft: TTeslaQty; const ARight: THenryPerMeterUnit): TAmperePerMeterQty; inline;
  class operator *(const ALeft: TAmperePerMeterQty; const ARight: THenryPerMeterUnit): TTeslaQty; inline;
  class operator /(const ALeft: TTeslaMeterQty; const ARight: THenryPerMeterUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: THenryPerMeterUnit): TTeslaMeterQty; inline;
  class operator /(const ALeft: THenryQty; const ARight: THenryPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: THenryPerMeterUnit): THenryQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterKelvinQty}{$DEFINE TUnit:=TMeterKelvinUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TMeterKelvinUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TMeterKelvinUnit): TWattPerMeterPerKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TOhmQty}{$DEFINE TUnit:=TOhmUnit}{$i adim.inc}
  class operator /(const ALeft: TOhmMeterQty; const ARight: TOhmUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TOhmUnit): TOhmMeterQty; inline;
  class operator /(const ALeft: THenryQty; const ARight: TOhmUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TOhmUnit): THenryQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TOhmUnit): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TOhmUnit): TWeberQty; inline;
  class operator /(const ALeft: TVoltQty; const ARight: TOhmUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TOhmUnit): TVoltQty; inline;
  class operator /(const ALeft: TSquareVoltQty; const ARight: TOhmUnit): TWattQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TOhmUnit): TSquareVoltQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TOhmUnit): TSquareAmpereQty; inline;
  class operator *(const ALeft: TSquareAmpereQty; const ARight: TOhmUnit): TWattQty; inline;
  class operator /(const ALeft: TSecondQty; const ARight: TOhmUnit): TFaradQty; inline;
  class operator *(const ALeft: TFaradQty; const ARight: TOhmUnit): TSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterQty}{$DEFINE TUnit:=TKilogramSquareMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TKilogramSquareMeterUnit): TSquareHertzQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TKilogramSquareMeterUnit): TJouleQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramSquareMeterUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TKilogramSquareMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterQty}{$DEFINE TUnit:=TMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TMeterUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TMeterUnit): TWattPerMeterPerSteradianQty; inline;
  class operator /(const ALeft: TMeterSteradianQty; const ARight: TMeterUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TMeterUnit): TMeterSteradianQty; inline;
  class operator *(const ALeft: TCoulombPerCubicMeterQty; const ARight: TMeterUnit): TCoulombPerSquareMeterQty; inline;
  class operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TMeterUnit): TCoulombPerCubicMeterQty; inline;
  class operator *(const ALeft: TAmperePerSquareMeterQty; const ARight: TMeterUnit): TAmperePerMeterQty; inline;
  class operator /(const ALeft: TAmperePerMeterQty; const ARight: TMeterUnit): TAmperePerSquareMeterQty; inline;
  class operator *(const ALeft: TRadianPerMeterQty; const ARight: TMeterUnit): TRadianQty; inline;
  class operator /(const ALeft: TRadianQty; const ARight: TMeterUnit): TRadianPerMeterQty; inline;
  class operator /(const ALeft: THenryPerMeterQty; const ARight: TMeterUnit): TTeslaPerAmpereQty; inline;
  class operator *(const ALeft: TTeslaPerAmpereQty; const ARight: TMeterUnit): THenryPerMeterQty; inline;
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TMeterUnit): THenryQty; inline;
  class operator /(const ALeft: THenryQty; const ARight: TMeterUnit): THenryPerMeterQty; inline;
  class operator /(const ALeft: TTeslaMeterQty; const ARight: TMeterUnit): TTeslaQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TMeterUnit): TTeslaMeterQty; inline;
  class operator *(const ALeft: TAmperePerMeterQty; const ARight: TMeterUnit): TAmpereQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TMeterUnit): TAmperePerMeterQty; inline;
  class operator *(const ALeft: TFaradPerMeterQty; const ARight: TMeterUnit): TFaradQty; inline;
  class operator /(const ALeft: TFaradQty; const ARight: TMeterUnit): TFaradPerMeterQty; inline;
  class operator /(const ALeft: TVoltMeterQty; const ARight: TMeterUnit): TVoltQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TMeterUnit): TVoltMeterQty; inline;
  class operator *(const ALeft: TCoulombPerSquareMeterQty; const ARight: TMeterUnit): TCoulombPerMeterQty; inline;
  class operator /(const ALeft: TCoulombPerMeterQty; const ARight: TMeterUnit): TCoulombPerSquareMeterQty; inline;
  class operator *(const ALeft: TSquareCoulombPerMeterQty; const ARight: TMeterUnit): TSquareCoulombQty; inline;
  class operator /(const ALeft: TSquareCoulombQty; const ARight: TMeterUnit): TSquareCoulombPerMeterQty; inline;
  class operator *(const ALeft: TCoulombPerMeterQty; const ARight: TMeterUnit): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TMeterUnit): TCoulombPerMeterQty; inline;
  class operator *(const ALeft: TVoltPerMeterQty; const ARight: TMeterUnit): TVoltQty; inline;
  class operator /(const ALeft: TVoltQty; const ARight: TMeterUnit): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TOhmMeterQty; const ARight: TMeterUnit): TOhmQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TMeterUnit): TOhmMeterQty; inline;
  class operator *(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TMeterUnit): TWattPerKelvinQty; inline;
  class operator /(const ALeft: TWattPerKelvinQty; const ARight: TMeterUnit): TWattPerMeterPerKelvinQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterQty; const ARight: TMeterUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TMeterUnit): TWattPerCubicMeterQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterQty; const ARight: TMeterUnit): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TMeterUnit): TWattPerSquareMeterQty; inline;
  class operator *(const ALeft: TWattPerMeterQty; const ARight: TMeterUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TMeterUnit): TWattPerMeterQty; inline;
  class operator *(const ALeft: TKelvinPerMeterQty; const ARight: TMeterUnit): TKelvinQty; inline;
  class operator /(const ALeft: TKelvinQty; const ARight: TMeterUnit): TKelvinPerMeterQty; inline;
  class operator /(const ALeft: TMeterKelvinQty; const ARight: TMeterUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TMeterUnit): TMeterKelvinQty; inline;
  class operator *(const ALeft: TSquareKilogramPerMeterQty; const ARight: TMeterUnit): TSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TMeterUnit): TSquareKilogramPerMeterQty; inline;
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TMeterUnit): TNewtonSquareMeterQty; inline;
  class operator *(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterUnit): TNewtonCubicMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterUnit): TJouleQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TMeterUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TMeterUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterUnit): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSecondQty; const ARight: TMeterUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TMeterUnit): TSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TPoiseuilleQty; const ARight: TMeterUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TMeterUnit): TPoiseuilleQty; inline;
  class operator /(const ALeft: TNewtonPerMeterQty; const ARight: TMeterUnit): TPascalQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TMeterUnit): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TNewtonPerMeterQty; const ARight: TMeterUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TMeterUnit): TNewtonPerMeterQty; inline;
  class operator *(const ALeft: TNewtonPerCubicMeterQty; const ARight: TMeterUnit): TPascalQty; inline;
  class operator /(const ALeft: TPascalQty; const ARight: TMeterUnit): TNewtonPerCubicMeterQty; inline;
  class operator *(const ALeft: TSiemensPerMeterQty; const ARight: TMeterUnit): TSiemensQty; inline;
  class operator /(const ALeft: TSiemensQty; const ARight: TMeterUnit): TSiemensPerMeterQty; inline;
  class operator /(const ALeft: TCoulombMeterQty; const ARight: TMeterUnit): TCoulombQty; inline;
  class operator *(const ALeft: TCoulombQty; const ARight: TMeterUnit): TCoulombMeterQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TMeterUnit): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TMeterUnit): TJouleQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TMeterUnit): TKilogramPerSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramPerSquareMeterQty; const ARight: TMeterUnit): TKilogramPerCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramPerMeterQty; const ARight: TMeterUnit): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TMeterUnit): TKilogramPerMeterQty; inline;
  class operator *(const ALeft: TSecondPerMeterQty; const ARight: TMeterUnit): TSecondQty; inline;
  class operator /(const ALeft: TSecondQty; const ARight: TMeterUnit): TSecondPerMeterQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterUnit): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TReciprocalQuarticMeterQty; const ARight: TMeterUnit): TReciprocalCubicMeterQty; inline;
  class operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TMeterUnit): TReciprocalQuarticMeterQty; inline;
  class operator *(const ALeft: TReciprocalCubicMeterQty; const ARight: TMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TMeterUnit): TReciprocalCubicMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TMeterUnit): TReciprocalMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TMeterUnit): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalMeterQty; const ARight: TMeterUnit): double; inline;
  class operator /(const ALeft: double; const ARight: TMeterUnit): TReciprocalMeterQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterUnit): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TMeterUnit): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TMeterUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TMeterUnit): TKilogramMeterQty; inline;
  class operator /(const ALeft: TMeterSecondQty; const ARight: TMeterUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterUnit): TMeterSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterUnit): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterUnit): TSquareHertzQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TMeterUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TMeterUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TSexticMeterQty; const ARight: TMeterUnit): TQuinticMeterQty; inline;
  class operator *(const ALeft: TQuinticMeterQty; const ARight: TMeterUnit): TSexticMeterQty; inline;
  class operator /(const ALeft: TQuinticMeterQty; const ARight: TMeterUnit): TQuarticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TMeterUnit): TQuinticMeterQty; inline;
  class operator /(const ALeft: TQuarticMeterQty; const ARight: TMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TMeterUnit): TQuarticMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TMeterUnit): TCubicMeterQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TMeterUnit): TSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TQuinticSecondQty}{$DEFINE TUnit:=TQuinticSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TQuinticSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TQuinticSecondUnit): TMeterPerSexticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TQuinticSecondUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TQuinticSecondUnit): TMeterPerQuinticSecondQty; inline;
  class operator /(const ALeft: TSexticSecondQty; const ARight: TQuinticSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TQuinticSecondUnit): TSexticSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramPerMeterQty}{$DEFINE TUnit:=TKilogramPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TNewtonQty; const ARight: TKilogramPerMeterUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerMeterUnit): TNewtonQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerMeterUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerMeterUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramPerMeterUnit): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareNewtonQty}{$DEFINE TUnit:=TSquareNewtonUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicMeterSteradianQty}{$DEFINE TUnit:=TCubicMeterSteradianUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TCubicMeterSteradianUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TCubicMeterSteradianUnit): TWattPerCubicMeterPerSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerSquareSecondQty}{$DEFINE TUnit:=TMeterPerSquareSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TMeterPerSquareSecondUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TMeterPerSquareSecondUnit): TCubicMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TNewtonPerCubicMeterQty; const ARight: TMeterPerSquareSecondUnit): TKilogramPerCubicMeterQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TMeterPerSquareSecondUnit): TNewtonPerCubicMeterQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TMeterPerSquareSecondUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TMeterPerSquareSecondUnit): TNewtonQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterPerSquareSecondUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TMeterPerSquareSecondUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSquareSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerSquareSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerSquareSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerSquareSecondUnit): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramPerCubicMeterQty}{$DEFINE TUnit:=TKilogramPerCubicMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TKilogramPerCubicMeterUnit): TPoiseuilleQty; inline;
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TKilogramPerCubicMeterUnit): TSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TNewtonPerCubicMeterQty; const ARight: TKilogramPerCubicMeterUnit): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TKilogramPerCubicMeterUnit): TNewtonPerCubicMeterQty; inline;
  class operator /(const ALeft: TPascalQty; const ARight: TKilogramPerCubicMeterUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerCubicMeterUnit): TPascalQty; inline;
  class operator /(const ALeft: TKilogramPerSquareMeterQty; const ARight: TKilogramPerCubicMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKilogramPerCubicMeterUnit): TKilogramPerSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerCubicMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TKilogramPerCubicMeterUnit): TKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramPerQuarticMeterPerSecondQty}{$DEFINE TUnit:=TKilogramPerQuarticMeterPerSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TPascalQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TCubicMeterPerSecondQty; inline;
  class operator *(const ALeft: TCubicMeterPerSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TPascalQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TQuarticMeterSecondQty; inline;
  class operator *(const ALeft: TQuarticMeterSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TKilogramPerQuarticMeterQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TQuarticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TKilogramPerSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerSteradianQty}{$DEFINE TUnit:=TWattPerSquareMeterPerSteradianUnit}{$i adim.inc}
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TSquareMeterSteradianQty; inline;
  class operator *(const ALeft: TSquareMeterSteradianQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerWattQty}{$DEFINE TUnit:=TMeterPerWattUnit}{$i adim.inc}
  class operator /(const ALeft: TMeterKelvinPerWattQty; const ARight: TMeterPerWattUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TMeterPerWattUnit): TMeterKelvinPerWattQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerWattUnit): TWattQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TMeterPerWattUnit): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareRootMeterQty}{$DEFINE TUnit:=TSquareRootMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TSquareRootMeterUnit): double; inline;
  class operator /(const ALeft: double; const ARight: TSquareRootMeterUnit): TReciprocalSquareRootMeterQty; inline;
  class operator *(const ALeft: TSquareRootMeterQty; const ARight: TSquareRootMeterUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TSquareRootMeterUnit): TSquareRootMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterSteradianQty}{$DEFINE TUnit:=TSquareMeterSteradianUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterSteradianUnit): TWattPerHertzQty; inline;
  class operator /(const ALeft: TWattPerHertzQty; const ARight: TSquareMeterSteradianUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSquareMeterSteradianUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSquareMeterSteradianUnit): TWattPerSquareMeterPerSteradianQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterSteradianUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TSquareMeterSteradianUnit): TSquareMeterSteradianHertzQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonCubicMeterQty}{$DEFINE TUnit:=TNewtonCubicMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TNewtonCubicMeterUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: TNewtonCubicMeterUnit): TSquareJouleSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TAmperePerSquareMeterQty}{$DEFINE TUnit:=TAmperePerSquareMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TAmperePerMeterQty; const ARight: TAmperePerSquareMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TAmperePerSquareMeterUnit): TAmperePerMeterQty; inline;
  class operator /(const ALeft: TAmpereQty; const ARight: TAmperePerSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TAmperePerSquareMeterUnit): TAmpereQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THertzQty}{$DEFINE TUnit:=THertzUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: THertzUnit): TWattPerSquareMeterPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: THertzUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
  class operator *(const ALeft: TWattPerSteradianPerHertzQty; const ARight: THertzUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: THertzUnit): TWattPerSteradianPerHertzQty; inline;
  class operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: THertzUnit): TSquareMeterSteradianQty; inline;
  class operator *(const ALeft: TSquareMeterSteradianQty; const ARight: THertzUnit): TSquareMeterSteradianHertzQty; inline;
  class operator /(const ALeft: TSteradianHertzQty; const ARight: THertzUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: THertzUnit): TSteradianHertzQty; inline;
  class operator *(const ALeft: THenryQty; const ARight: THertzUnit): TOhmQty; inline;
  class operator /(const ALeft: TOhmQty; const ARight: THertzUnit): THenryQty; inline;
  class operator /(const ALeft: TSiemensQty; const ARight: THertzUnit): TFaradQty; inline;
  class operator *(const ALeft: TFaradQty; const ARight: THertzUnit): TSiemensQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: THertzUnit): TJouleQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: THertzUnit): TWattQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: THertzUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: THertzUnit): TJouleQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: THertzUnit): TKilogramSquareMeterQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterQty; const ARight: THertzUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramPerSecondQty; const ARight: THertzUnit): TKilogramQty; inline;
  class operator *(const ALeft: TKilogramQty; const ARight: THertzUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: THertzUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: THertzUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TSquareHertzQty; const ARight: THertzUnit): THertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: THertzUnit): TSquareHertzQty; inline;
  class operator /(const ALeft: THertzQty; const ARight: THertzUnit): TRadianQty; inline;
  class operator *(const ALeft: TRadianQty; const ARight: THertzUnit): THertzQty; inline;
  class operator /(const ALeft: TRadianQty; const ARight: THertzUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: THertzUnit): TRadianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerQuarticSecondQty}{$DEFINE TUnit:=TMeterPerQuarticSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerQuarticSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerQuarticSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerQuarticSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerQuarticSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerQuarticSecondUnit): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TMeterPerQuarticSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerQuarticSecondUnit): TQuarticSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TMeterPerQuarticSecondUnit): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerMeterPerKelvinQty}{$DEFINE TUnit:=TWattPerMeterPerKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerMeterPerKelvinUnit): TKelvinPerMeterQty; inline;
  class operator *(const ALeft: TKelvinPerMeterQty; const ARight: TWattPerMeterPerKelvinUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerKelvinQty; const ARight: TWattPerMeterPerKelvinUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerMeterPerKelvinUnit): TWattPerKelvinQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerMeterPerKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TWattPerMeterPerKelvinUnit): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TWattPerMeterPerKelvinUnit): TMeterKelvinQty; inline;
  class operator *(const ALeft: TMeterKelvinQty; const ARight: TWattPerMeterPerKelvinUnit): TWattQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKelvinPerMeterQty}{$DEFINE TUnit:=TKelvinPerMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TKelvinPerMeterUnit): TWattPerSquareMeterQty; inline;
  class operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TKelvinPerMeterUnit): TWattPerMeterPerKelvinQty; inline;
  class operator /(const ALeft: TKelvinQty; const ARight: TKelvinPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TKelvinPerMeterUnit): TKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerCubicSecondQty}{$DEFINE TUnit:=TMeterPerCubicSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerCubicSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerCubicSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerCubicSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerCubicSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerCubicSecondUnit): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TMeterPerCubicSecondUnit): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareJouleSquareSecondQty}{$DEFINE TUnit:=TSquareJouleSquareSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TSquareJouleSquareSecondUnit): TReciprocalSquareMeterQty; inline;
  class operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareJouleSquareSecondUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareKilogramPerSquareMeterQty}{$DEFINE TUnit:=TSquareKilogramPerSquareMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramPerSquareMeterUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TSquareKilogramPerSquareMeterUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramPerSquareMeterUnit): TSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerAmpereQty}{$DEFINE TUnit:=TMeterPerAmpereUnit}{$i adim.inc}
  class operator /(const ALeft: THenryPerMeterQty; const ARight: TMeterPerAmpereUnit): TTeslaQty; inline;
  class operator *(const ALeft: TTeslaQty; const ARight: TMeterPerAmpereUnit): THenryPerMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerAmpereUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TMeterPerAmpereUnit): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKatalQty}{$DEFINE TUnit:=TKatalUnit}{$i adim.inc}
  class operator /(const ALeft: TMoleQty; const ARight: TKatalUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TKatalUnit): TMoleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterQuarticKelvinQty}{$DEFINE TUnit:=TSquareMeterQuarticKelvinUnit}{$i adim.inc}
  class operator *(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TSquareMeterQuarticKelvinUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSquareMeterQuarticKelvinUnit): TWattPerSquareMeterPerQuarticKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMolePerCubicMeterQty}{$DEFINE TUnit:=TMolePerCubicMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TMoleQty; const ARight: TMolePerCubicMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TMolePerCubicMeterUnit): TMoleQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareKilogramQty}{$DEFINE TUnit:=TSquareKilogramUnit}{$i adim.inc}
  class operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramUnit): TNewtonSquareMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareKilogramUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
  class operator *(const ALeft: TSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramUnit): TSquareMeterQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramUnit): TSquareMeterPerSquareKilogramQty; inline;
  class operator *(const ALeft: TNewtonPerSquareKilogramQty; const ARight: TSquareKilogramUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TSquareKilogramUnit): TNewtonPerSquareKilogramQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicMeterQty}{$DEFINE TUnit:=TCubicMeterUnit}{$i adim.inc}
  class operator *(const ALeft: TKatalPerCubicMeterQty; const ARight: TCubicMeterUnit): TKatalQty; inline;
  class operator /(const ALeft: TKatalQty; const ARight: TCubicMeterUnit): TKatalPerCubicMeterQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TCubicMeterUnit): TWattPerSteradianQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TCubicMeterUnit): TWattPerCubicMeterPerSteradianQty; inline;
  class operator /(const ALeft: TCubicMeterSteradianQty; const ARight: TCubicMeterUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TCubicMeterUnit): TCubicMeterSteradianQty; inline;
  class operator *(const ALeft: TCoulombPerCubicMeterQty; const ARight: TCubicMeterUnit): TCoulombQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCubicMeterUnit): TCoulombPerCubicMeterQty; inline;
  class operator *(const ALeft: TMolePerCubicMeterQty; const ARight: TCubicMeterUnit): TMoleQty; inline;
  class operator /(const ALeft: TMoleQty; const ARight: TCubicMeterUnit): TMolePerCubicMeterQty; inline;
  class operator *(const ALeft: TWattPerCubicMeterQty; const ARight: TCubicMeterUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TCubicMeterUnit): TWattPerCubicMeterQty; inline;
  class operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TCubicMeterUnit): TNewtonQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TCubicMeterUnit): TNewtonCubicMeterQty; inline;
  class operator *(const ALeft: TNewtonPerCubicMeterQty; const ARight: TCubicMeterUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TCubicMeterUnit): TNewtonPerCubicMeterQty; inline;
  class operator /(const ALeft: TLumenSecondPerCubicMeterQty; const ARight: TCubicMeterUnit): TLumenSecondQty; inline;
  class operator *(const ALeft: TLumenSecondQty; const ARight: TCubicMeterUnit): TLumenSecondPerCubicMeterQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TCubicMeterUnit): TPascalQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TCubicMeterUnit): TJouleQty; inline;
  class operator *(const ALeft: TKilogramPerCubicMeterQty; const ARight: TCubicMeterUnit): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TCubicMeterUnit): TKilogramPerCubicMeterQty; inline;
  class operator *(const ALeft: TReciprocalQuarticMeterQty; const ARight: TCubicMeterUnit): TReciprocalMeterQty; inline;
  class operator /(const ALeft: TReciprocalMeterQty; const ARight: TCubicMeterUnit): TReciprocalQuarticMeterQty; inline;
  class operator *(const ALeft: TReciprocalCubicMeterQty; const ARight: TCubicMeterUnit): double; inline;
  class operator /(const ALeft: double; const ARight: TCubicMeterUnit): TReciprocalCubicMeterQty; inline;
  class operator /(const ALeft: TSexticMeterQty; const ARight: TCubicMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TCubicMeterUnit): TSexticMeterQty; inline;
  class operator /(const ALeft: TQuinticMeterQty; const ARight: TCubicMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TCubicMeterUnit): TQuinticMeterQty; inline;
  class operator /(const ALeft: TQuarticMeterQty; const ARight: TCubicMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TCubicMeterUnit): TQuarticMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareAmpereQty}{$DEFINE TUnit:=TSquareAmpereUnit}{$i adim.inc}
  class operator *(const ALeft: THenryPerMeterQty; const ARight: TSquareAmpereUnit): TNewtonQty; inline;
  class operator /(const ALeft: TNewtonQty; const ARight: TSquareAmpereUnit): THenryPerMeterQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TSquareAmpereUnit): TWattQty; inline;
  class operator /(const ALeft: TWattQty; const ARight: TSquareAmpereUnit): TOhmQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSecondQty}{$DEFINE TUnit:=TSecondUnit}{$i adim.inc}
  class operator *(const ALeft: TGrayPerSecondQty; const ARight: TSecondUnit): TSquareMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TSecondUnit): TGrayPerSecondQty; inline;
  class operator *(const ALeft: TVoltMeterPerSecondQty; const ARight: TSecondUnit): TVoltMeterQty; inline;
  class operator /(const ALeft: TVoltMeterQty; const ARight: TSecondUnit): TVoltMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TSecondUnit): TKilogramPerQuarticMeterQty; inline;
  class operator /(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TSecondUnit): TKilogramPerQuarticMeterPerSecondQty; inline;
  class operator /(const ALeft: TQuarticMeterSecondQty; const ARight: TSecondUnit): TQuarticMeterQty; inline;
  class operator *(const ALeft: TQuarticMeterQty; const ARight: TSecondUnit): TQuarticMeterSecondQty; inline;
  class operator *(const ALeft: TSquareMeterPerSecondQty; const ARight: TSecondUnit): TSquareMeterQty; inline;
  class operator /(const ALeft: TSquareMeterQty; const ARight: TSecondUnit): TSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TPoiseuilleQty; const ARight: TSecondUnit): TPascalQty; inline;
  class operator *(const ALeft: TPascalQty; const ARight: TSecondUnit): TPoiseuilleQty; inline;
  class operator *(const ALeft: TCubicMeterPerSecondQty; const ARight: TSecondUnit): TCubicMeterQty; inline;
  class operator /(const ALeft: TCubicMeterQty; const ARight: TSecondUnit): TCubicMeterPerSecondQty; inline;
  class operator *(const ALeft: TKatalQty; const ARight: TSecondUnit): TMoleQty; inline;
  class operator /(const ALeft: TMoleQty; const ARight: TSecondUnit): TKatalQty; inline;
  class operator /(const ALeft: TLuxSecondQty; const ARight: TSecondUnit): TLuxQty; inline;
  class operator *(const ALeft: TLuxQty; const ARight: TSecondUnit): TLuxSecondQty; inline;
  class operator /(const ALeft: TLumenSecondQty; const ARight: TSecondUnit): TLumenQty; inline;
  class operator *(const ALeft: TLumenQty; const ARight: TSecondUnit): TLumenSecondQty; inline;
  class operator /(const ALeft: THenryQty; const ARight: TSecondUnit): TOhmQty; inline;
  class operator *(const ALeft: TOhmQty; const ARight: TSecondUnit): THenryQty; inline;
  class operator /(const ALeft: TWeberQty; const ARight: TSecondUnit): TVoltQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TSecondUnit): TWeberQty; inline;
  class operator *(const ALeft: TSiemensQty; const ARight: TSecondUnit): TFaradQty; inline;
  class operator /(const ALeft: TFaradQty; const ARight: TSecondUnit): TSiemensQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TSecondUnit): TAmpereQty; inline;
  class operator *(const ALeft: TAmpereQty; const ARight: TSecondUnit): TCoulombQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TSecondUnit): TJouleQty; inline;
  class operator /(const ALeft: TJouleQty; const ARight: TSecondUnit): TWattQty; inline;
  class operator *(const ALeft: TJouleQty; const ARight: TSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSecondUnit): TJouleQty; inline;
  class operator *(const ALeft: TNewtonQty; const ARight: TSecondUnit): TKilogramMeterPerSecondQty; inline;
  class operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TSecondUnit): TNewtonQty; inline;
  class operator *(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSecondUnit): TKilogramSquareMeterQty; inline;
  class operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramMeterPerSecondQty; const ARight: TSecondUnit): TKilogramMeterQty; inline;
  class operator /(const ALeft: TKilogramMeterQty; const ARight: TSecondUnit): TKilogramMeterPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TSecondUnit): TKilogramQty; inline;
  class operator /(const ALeft: TKilogramQty; const ARight: TSecondUnit): TKilogramPerSecondQty; inline;
  class operator /(const ALeft: TMeterSecondQty; const ARight: TSecondUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSecondUnit): TMeterSecondQty; inline;
  class operator *(const ALeft: TMeterPerSexticSecondQty; const ARight: TSecondUnit): TMeterPerQuinticSecondQty; inline;
  class operator /(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSecondUnit): TMeterPerSexticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSecondUnit): TMeterPerQuarticSecondQty; inline;
  class operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSecondUnit): TMeterPerQuinticSecondQty; inline;
  class operator *(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TSecondUnit): TMeterPerQuarticSecondQty; inline;
  class operator *(const ALeft: TMeterPerCubicSecondQty; const ARight: TSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator *(const ALeft: TMeterPerSecondQty; const ARight: TSecondUnit): TMeterQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TSecondUnit): TMeterPerSecondQty; inline;
  class operator *(const ALeft: TSquareHertzQty; const ARight: TSecondUnit): THertzQty; inline;
  class operator /(const ALeft: THertzQty; const ARight: TSecondUnit): TSquareHertzQty; inline;
  class operator *(const ALeft: THertzQty; const ARight: TSecondUnit): TRadianQty; inline;
  class operator /(const ALeft: TRadianQty; const ARight: TSecondUnit): THertzQty; inline;
  class operator /(const ALeft: TSexticSecondQty; const ARight: TSecondUnit): TQuinticSecondQty; inline;
  class operator *(const ALeft: TQuinticSecondQty; const ARight: TSecondUnit): TSexticSecondQty; inline;
  class operator /(const ALeft: TQuinticSecondQty; const ARight: TSecondUnit): TQuarticSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TSecondUnit): TQuinticSecondQty; inline;
  class operator /(const ALeft: TQuarticSecondQty; const ARight: TSecondUnit): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TSecondUnit): TQuarticSecondQty; inline;
  class operator /(const ALeft: TCubicSecondQty; const ARight: TSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TSecondUnit): TCubicSecondQty; inline;
  class operator /(const ALeft: TSquareSecondQty; const ARight: TSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TSecondUnit): TSquareSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalKelvinQty}{$DEFINE TUnit:=TReciprocalKelvinUnit}{$i adim.inc}
  class operator /(const ALeft: double; const ARight: TReciprocalKelvinUnit): TKelvinQty; inline;
  class operator *(const ALeft: TKelvinQty; const ARight: TReciprocalKelvinUnit): double; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalHenryQty}{$DEFINE TUnit:=TReciprocalHenryUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TQuinticMeterQty}{$DEFINE TUnit:=TQuinticMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TSexticMeterQty; const ARight: TQuinticMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TQuinticMeterUnit): TSexticMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerQuinticSecondQty}{$DEFINE TUnit:=TMeterPerQuinticSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TMeterPerQuinticSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterPerQuarticSecondQty; inline;
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerQuinticSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerQuinticSecondUnit): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerQuinticSecondUnit): TQuarticSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerQuinticSecondUnit): TQuinticSecondQty; inline;
  class operator *(const ALeft: TQuinticSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerSexticSecondQty}{$DEFINE TUnit:=TMeterPerSexticSecondUnit}{$i adim.inc}
  class operator /(const ALeft: TMeterPerQuinticSecondQty; const ARight: TMeterPerSexticSecondUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerQuinticSecondQty; inline;
  class operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TMeterPerSexticSecondUnit): TSquareSecondQty; inline;
  class operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerQuarticSecondQty; inline;
  class operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerSexticSecondUnit): TCubicSecondQty; inline;
  class operator *(const ALeft: TCubicSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerCubicSecondQty; inline;
  class operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerSexticSecondUnit): TQuarticSecondQty; inline;
  class operator *(const ALeft: TQuarticSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerSquareSecondQty; inline;
  class operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSexticSecondUnit): TQuinticSecondQty; inline;
  class operator *(const ALeft: TQuinticSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerSecondQty; inline;
  class operator /(const ALeft: TMeterQty; const ARight: TMeterPerSexticSecondUnit): TSexticSecondQty; inline;
  class operator *(const ALeft: TSexticSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLuxQty}{$DEFINE TUnit:=TLuxUnit}{$i adim.inc}
  class operator /(const ALeft: TLuxSecondQty; const ARight: TLuxUnit): TSecondQty; inline;
  class operator *(const ALeft: TSecondQty; const ARight: TLuxUnit): TLuxSecondQty; inline;
  class operator /(const ALeft: TLumenQty; const ARight: TLuxUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TLuxUnit): TLumenQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerMeterPerSteradianQty}{$DEFINE TUnit:=TWattPerMeterPerSteradianUnit}{$i adim.inc}
  class operator /(const ALeft: TWattQty; const ARight: TWattPerMeterPerSteradianUnit): TMeterSteradianQty; inline;
  class operator *(const ALeft: TMeterSteradianQty; const ARight: TWattPerMeterPerSteradianUnit): TWattQty; inline;
  class operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerMeterPerSteradianUnit): TSteradianQty; inline;
  class operator *(const ALeft: TSteradianQty; const ARight: TWattPerMeterPerSteradianUnit): TWattPerMeterQty; inline;
  class operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerMeterPerSteradianUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TWattPerMeterPerSteradianUnit): TWattPerSteradianQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareCoulombQty}{$DEFINE TUnit:=TNewtonSquareMeterPerSquareCoulombUnit}{$i adim.inc}
  class operator /(const ALeft: TJouleQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TSquareCoulombPerMeterQty; inline;
  class operator *(const ALeft: TSquareCoulombPerMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TJouleQty; inline;
  class operator /(const ALeft: TVoltPerMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TCoulombPerSquareMeterQty; inline;
  class operator *(const ALeft: TCoulombPerSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TVoltPerMeterQty; inline;
  class operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TSquareCoulombQty; inline;
  class operator *(const ALeft: TSquareCoulombQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TNewtonSquareMeterQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterSecondQty}{$DEFINE TUnit:=TMeterSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLumenSecondPerCubicMeterQty}{$DEFINE TUnit:=TLumenSecondPerCubicMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKatalPerCubicMeterQty}{$DEFINE TUnit:=TKatalPerCubicMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TKatalQty; const ARight: TKatalPerCubicMeterUnit): TCubicMeterQty; inline;
  class operator *(const ALeft: TCubicMeterQty; const ARight: TKatalPerCubicMeterUnit): TKatalQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSexticMeterQty}{$DEFINE TUnit:=TSexticMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKelvinPerWattQty}{$DEFINE TUnit:=TKelvinPerWattUnit}{$i adim.inc}
  class operator /(const ALeft: TKelvinQty; const ARight: TKelvinPerWattUnit): TWattQty; inline;
  class operator *(const ALeft: TWattQty; const ARight: TKelvinPerWattUnit): TKelvinQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSecondPerMeterQty}{$DEFINE TUnit:=TSecondPerMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TKilogramPerMeterQty; const ARight: TSecondPerMeterUnit): TKilogramPerSecondQty; inline;
  class operator *(const ALeft: TKilogramPerSecondQty; const ARight: TSecondPerMeterUnit): TKilogramPerMeterQty; inline;
  class operator /(const ALeft: TSecondQty; const ARight: TSecondPerMeterUnit): TMeterQty; inline;
  class operator *(const ALeft: TMeterQty; const ARight: TSecondPerMeterUnit): TSecondQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCandelaPerSquareMeterQty}{$DEFINE TUnit:=TCandelaPerSquareMeterUnit}{$i adim.inc}
  class operator /(const ALeft: TCandelaQty; const ARight: TCandelaPerSquareMeterUnit): TSquareMeterQty; inline;
  class operator *(const ALeft: TSquareMeterQty; const ARight: TCandelaPerSquareMeterUnit): TCandelaQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCoulombPerMoleQty}{$DEFINE TUnit:=TCoulombPerMoleUnit}{$i adim.inc}
  class operator /(const ALeft: TJoulePerMoleQty; const ARight: TCoulombPerMoleUnit): TVoltQty; inline;
  class operator *(const ALeft: TVoltQty; const ARight: TCoulombPerMoleUnit): TJoulePerMoleQty; inline;
  class operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerMoleUnit): TMoleQty; inline;
  class operator *(const ALeft: TMoleQty; const ARight: TCoulombPerMoleUnit): TCoulombQty; inline;
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TDayQty}{$DEFINE TUnit:=TDayUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THourQty}{$DEFINE TUnit:=THourUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMinuteQty}{$DEFINE TUnit:=TMinuteUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareDayQty}{$DEFINE TUnit:=TSquareDayUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareHourQty}{$DEFINE TUnit:=TSquareHourUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMinuteQty}{$DEFINE TUnit:=TSquareMinuteUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TAstronomicalQty}{$DEFINE TUnit:=TAstronomicalUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TInchQty}{$DEFINE TUnit:=TInchUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TFootQty}{$DEFINE TUnit:=TFootUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TYardQty}{$DEFINE TUnit:=TYardUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMileQty}{$DEFINE TUnit:=TMileUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNauticalMileQty}{$DEFINE TUnit:=TNauticalMileUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TAngstromQty}{$DEFINE TUnit:=TAngstromUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareInchQty}{$DEFINE TUnit:=TSquareInchUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareFootQty}{$DEFINE TUnit:=TSquareFootUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareYardQty}{$DEFINE TUnit:=TSquareYardUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMileQty}{$DEFINE TUnit:=TSquareMileUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicInchQty}{$DEFINE TUnit:=TCubicInchUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicFootQty}{$DEFINE TUnit:=TCubicFootUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCubicYardQty}{$DEFINE TUnit:=TCubicYardUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLitreQty}{$DEFINE TUnit:=TLitreUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TGallonQty}{$DEFINE TUnit:=TGallonUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TTonneQty}{$DEFINE TUnit:=TTonneUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoundQty}{$DEFINE TUnit:=TPoundUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TOunceQty}{$DEFINE TUnit:=TOunceUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TStoneQty}{$DEFINE TUnit:=TStoneUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TTonQty}{$DEFINE TUnit:=TTonUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TElectronvoltPerSquareSpeedOfLightQty}{$DEFINE TUnit:=TElectronvoltPerSquareSpeedOfLightUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TDegreeCelsiusQty}{$DEFINE TUnit:=TDegreeCelsiusUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TDegreeFahrenheitQty}{$DEFINE TUnit:=TDegreeFahrenheitUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TDegreeQty}{$DEFINE TUnit:=TDegreeUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareDegreeQty}{$DEFINE TUnit:=TSquareDegreeUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THertzQty}{$DEFINE TUnit:=TReciprocalSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THertzQty}{$DEFINE TUnit:=TRadianPerSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareHertzQty}{$DEFINE TUnit:=TReciprocalSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareHertzQty}{$DEFINE TUnit:=TRadianPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerHourQty}{$DEFINE TUnit:=TMeterPerHourUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMilePerHourQty}{$DEFINE TUnit:=TMilePerHourUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNauticalMilePerHourQty}{$DEFINE TUnit:=TNauticalMilePerHourUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerSquareSecondQty}{$DEFINE TUnit:=TMeterPerSecondPerSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TMeterPerHourPerSecondQty}{$DEFINE TUnit:=TMeterPerHourPerSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TJoulePerKilogramUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TGrayUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TSievertUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramPerSecondQty}{$DEFINE TUnit:=TJoulePerSquareMeterPerHertzUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramMeterPerSecondQty}{$DEFINE TUnit:=TNewtonSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TReciprocalMeterQty}{$DEFINE TUnit:=TDioptreUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$DEFINE TUnit:=TNewtonMeterSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoundPerCubicInchQty}{$DEFINE TUnit:=TPoundPerCubicInchUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoundForceQty}{$DEFINE TUnit:=TPoundForceUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonQty}{$DEFINE TUnit:=TKilogramMeterPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareNewtonQty}{$DEFINE TUnit:=TSquareKilogramSquareMeterPerQuarticSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPascalQty}{$DEFINE TUnit:=TNewtonPerSquareMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TBarQty}{$DEFINE TUnit:=TBarUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoundPerSquareInchQty}{$DEFINE TUnit:=TPoundPerSquareInchUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPascalQty}{$DEFINE TUnit:=TJoulePerCubicMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPascalQty}{$DEFINE TUnit:=TKilogramPerMeterPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattHourQty}{$DEFINE TUnit:=TWattHourUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TWattSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TWattPerHertzUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TElectronvoltQty}{$DEFINE TUnit:=TElectronvoltUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TNewtonMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoundForceInchQty}{$DEFINE TUnit:=TPoundForceInchUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TRydbergQty}{$DEFINE TUnit:=TRydbergUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCalorieQty}{$DEFINE TUnit:=TCalorieUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerDegreeQty}{$DEFINE TUnit:=TJoulePerDegreeUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerRadianQty}{$DEFINE TUnit:=TNewtonMeterPerRadianUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonMeterPerDegreeQty}{$DEFINE TUnit:=TNewtonMeterPerDegreeUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerRadianQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareSecondPerRadianUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattQty}{$DEFINE TUnit:=TKilogramSquareMeterPerCubicSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TAmpereHourQty}{$DEFINE TUnit:=TAmpereHourUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TCoulombQty}{$DEFINE TUnit:=TAmpereSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareCoulombQty}{$DEFINE TUnit:=TSquareAmpereSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TVoltQty}{$DEFINE TUnit:=TKilogramSquareMeterPerAmperePerCubicSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareVoltQty}{$DEFINE TUnit:=TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TFaradQty}{$DEFINE TUnit:=TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TOhmQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSiemensQty}{$DEFINE TUnit:=TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TTeslaQty}{$DEFINE TUnit:=TWeberPerSquareMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TTeslaQty}{$DEFINE TUnit:=TKilogramPerAmperePerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWeberQty}{$DEFINE TUnit:=TKilogramSquareMeterPerAmperePerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THenryQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLumenQty}{$DEFINE TUnit:=TCandelaSteradianUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TLuxQty}{$DEFINE TUnit:=TCandelaSteradianPerSquareMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THertzQty}{$DEFINE TUnit:=TBequerelUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKatalQty}{$DEFINE TUnit:=TMolePerSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerCubicMeterQty}{$DEFINE TUnit:=TPascalPerMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerCubicMeterQty}{$DEFINE TUnit:=TKilogramPerSquareMeterPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$DEFINE TUnit:=TJoulePerSquareMeterUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$DEFINE TUnit:=TWattPerSquareMeterPerHertzUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoundForcePerInchQty}{$DEFINE TUnit:=TPoundForcePerInchUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$DEFINE TUnit:=TKilogramPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoiseuilleQty}{$DEFINE TUnit:=TPascalSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TPoiseuilleQty}{$DEFINE TUnit:=TKilogramPerMeterPerSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterQty}{$DEFINE TUnit:=TKilogramCubicMeterPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonCubicMeterQty}{$DEFINE TUnit:=TKilogramQuarticMeterPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonPerSquareKilogramQty}{$DEFINE TUnit:=TMeterPerKilogramPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareKilogramQty}{$DEFINE TUnit:=TCubicMeterPerKilogramPerSquareSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerKelvinQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareSecondPerKelvinUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TJoulePerKilogramPerKelvinQty}{$DEFINE TUnit:=TSquareMeterPerSquareSecondPerKelvinUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerMeterQty}{$DEFINE TUnit:=TKilogramMeterPerCubicSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterQty}{$DEFINE TUnit:=TKilogramPerCubicSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerKelvinQty}{$DEFINE TUnit:=TKilogramSquareMeterPerCubicSecondPerKelvinUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerMeterPerKelvinQty}{$DEFINE TUnit:=TKilogramMeterPerCubicSecondPerKelvinUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerKelvinQty}{$DEFINE TUnit:=TKilogramPerCubicSecondPerKelvinUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TVoltPerMeterQty}{$DEFINE TUnit:=TNewtonPerCoulombUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TVoltMeterQty}{$DEFINE TUnit:=TNewtonSquareMeterPerCoulombUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TTeslaMeterQty}{$DEFINE TUnit:=TNewtonPerAmpereUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THenryPerMeterQty}{$DEFINE TUnit:=TTeslaMeterPerAmpereUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=THenryPerMeterQty}{$DEFINE TUnit:=TNewtonPerSquareAmpereUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$DEFINE TUnit:=TJouleSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$DEFINE TUnit:=TJoulePerHertzUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TElectronvoltSecondQty}{$DEFINE TUnit:=TElectronvoltSecondUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TElectronvoltMeterPerSpeedOfLightQty}{$DEFINE TUnit:=TElectronvoltMeterPerSpeedOfLightUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{$DEFINE INTF_UNIT}{$DEFINE TQuantity:=TSquareMeterAmpereQty}{$DEFINE TUnit:=TJoulePerTeslaUnit}{$i adim.inc}
{$DEFINE INTF_END}{$i adim.inc}

{ Quantity of TSquareMeterAmperes }

type
  TSquareMeterAmperes = TSquareMeterAmpereQty;

const
  rsSquareMeterAmpereSymbol     = '%sm2·%sA';
  rsSquareMeterAmpereName       = 'square %smeter %sampere';
  rsSquareMeterAmperePluralName = 'square %smeter %samperes';

const
  cSquareMeterAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterAmpereExponents : TExponents = (2, 1);

{ Quantity of TSquareMetersPerSquareKilogram }

type
  TSquareMetersPerSquareKilogram = TSquareMeterPerSquareKilogramQty;

const
  rsSquareMeterPerSquareKilogramSymbol     = '%sm2/%sg2';
  rsSquareMeterPerSquareKilogramName       = 'square %smeter per square %sgram';
  rsSquareMeterPerSquareKilogramPluralName = 'square %smeters per square %sgram';

const
  cSquareMeterPerSquareKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cSquareMeterPerSquareKilogramExponents : TExponents = (2, -2);

{ Quantity of TGraysPerSecond }

type
  TGraysPerSecond = TGrayPerSecondQty;

const
  rsGrayPerSecondSymbol     = '%sGy/%ss';
  rsGrayPerSecondName       = '%sgray per %ssecond';
  rsGrayPerSecondPluralName = '%sgrays per %ssecond';

const
  cGrayPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cGrayPerSecondExponents : TExponents = (1, -1);

{ Quantity of TVoltMetersPerSecond }

type
  TVoltMetersPerSecond = TVoltMeterPerSecondQty;

const
  rsVoltMeterPerSecondSymbol     = '%sV·%sm/%ss';
  rsVoltMeterPerSecondName       = '%svolt %smeter per %ssecond';
  rsVoltMeterPerSecondPluralName = '%svolt %smeters per %ssecond';

const
  cVoltMeterPerSecondPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cVoltMeterPerSecondExponents : TExponents = (1, 1, -1);

{ Quantity of TMoles }

type
  TMoles = TMoleQty;

var
  mol: TMoleUnit;

const
   kmol: TMoleQty = (FValue: 1E+03);
   hmol: TMoleQty = (FValue: 1E+02);
  damol: TMoleQty = (FValue: 1E+01);

const
  rsMoleSymbol     = '%smol';
  rsMoleName       = '%smole';
  rsMolePluralName = '%smoles';

const
  cMolePrefixes  : TPrefixes  = (pNone);
  cMoleExponents : TExponents = (1);

{ Quantity of TWatts }

type
  TWatts = TWattQty;

var
  W: TWattUnit;

const
      TW: TWattQty = (FValue: 1E+12);
      GW: TWattQty = (FValue: 1E+09);
      MW: TWattQty = (FValue: 1E+06);
      kW: TWattQty = (FValue: 1E+03);
  milliW: TWattQty = (FValue: 1E-03);

const
  rsWattSymbol     = '%sW';
  rsWattName       = '%swatt';
  rsWattPluralName = '%swatts';

const
  cWattPrefixes  : TPrefixes  = (pNone);
  cWattExponents : TExponents = (1);

{ Quantity of TFarads }

type
  TFarads = TFaradQty;

var
  F: TFaradUnit;

const
   mF: TFaradQty = (FValue: 1E-03);
  miF: TFaradQty = (FValue: 1E-06);
   nF: TFaradQty = (FValue: 1E-09);
   pF: TFaradQty = (FValue: 1E-12);

const
  rsFaradSymbol     = '%sF';
  rsFaradName       = '%sfarad';
  rsFaradPluralName = '%sfarads';

const
  cFaradPrefixes  : TPrefixes  = (pNone);
  cFaradExponents : TExponents = (1);

{ Quantity of TWattsPerMeter }

type
  TWattsPerMeter = TWattPerMeterQty;

const
  rsWattPerMeterSymbol     = '%sW/%sm';
  rsWattPerMeterName       = '%swatt per %smeter';
  rsWattPerMeterPluralName = '%swatts per %smeter';

const
  cWattPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerMeterExponents : TExponents = (1, -1);

{ Quantity of TReciprocalSquareMeters }

type
  TReciprocalSquareMeters = TReciprocalSquareMeterQty;

const
  rsReciprocalSquareMeterSymbol     = '1/%sm2';
  rsReciprocalSquareMeterName       = 'reciprocal square %smeter';
  rsReciprocalSquareMeterPluralName = 'reciprocal square %smeters';

const
  cReciprocalSquareMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalSquareMeterExponents : TExponents = (-2);

{ Quantity of TSquareKilogramsPerSquareSecond }

type
  TSquareKilogramsPerSquareSecond = TSquareKilogramPerSquareSecondQty;

const
  rsSquareKilogramPerSquareSecondSymbol     = '%sg2/%ss2';
  rsSquareKilogramPerSquareSecondName       = 'square %sgram per square %ssecond';
  rsSquareKilogramPerSquareSecondPluralName = 'square %sgrams per square %ssecond';

const
  cSquareKilogramPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cSquareKilogramPerSquareSecondExponents : TExponents = (2, -2);

{ Quantity of TSquareKilogramsPerMeter }

type
  TSquareKilogramsPerMeter = TSquareKilogramPerMeterQty;

const
  rsSquareKilogramPerMeterSymbol     = '%sg2/%sm';
  rsSquareKilogramPerMeterName       = 'square %sgram per %smeter';
  rsSquareKilogramPerMeterPluralName = 'square %sgrams per %smeter';

const
  cSquareKilogramPerMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cSquareKilogramPerMeterExponents : TExponents = (2, -1);

{ Quantity of TQuarticMeterSeconds }

type
  TQuarticMeterSeconds = TQuarticMeterSecondQty;

const
  rsQuarticMeterSecondSymbol     = '%sm4·%ss';
  rsQuarticMeterSecondName       = 'quartic %smeter %ssecond';
  rsQuarticMeterSecondPluralName = 'quartic %smeter %sseconds';

const
  cQuarticMeterSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cQuarticMeterSecondExponents : TExponents = (4, 1);

{ Quantity of TNewtons }

type
  TNewtons = TNewtonQty;

var
  N: TNewtonUnit;

const
   GN: TNewtonQty = (FValue: 1E+09);
   MN: TNewtonQty = (FValue: 1E+06);
   kN: TNewtonQty = (FValue: 1E+03);
   hN: TNewtonQty = (FValue: 1E+02);
  daN: TNewtonQty = (FValue: 1E+01);

const
  rsNewtonSymbol     = '%sN';
  rsNewtonName       = '%snewton';
  rsNewtonPluralName = '%snewtons';

const
  cNewtonPrefixes  : TPrefixes  = (pNone);
  cNewtonExponents : TExponents = (1);

{ Quantity of TLumenSeconds }

type
  TLumenSeconds = TLumenSecondQty;

const
  rsLumenSecondSymbol     = '%slm·%ss';
  rsLumenSecondName       = '%slumen %ssecond';
  rsLumenSecondPluralName = '%slumen %sseconds';

const
  cLumenSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cLumenSecondExponents : TExponents = (1, 1);

{ Quantity of TKilogramMetersPerSecond }

type
  TKilogramMetersPerSecond = TKilogramMeterPerSecondQty;

const
  rsKilogramMeterPerSecondSymbol     = '%sg·%sm/%ss';
  rsKilogramMeterPerSecondName       = '%sgram %smeter per %ssecond';
  rsKilogramMeterPerSecondPluralName = '%sgram %smeters per %ssecond';

const
  cKilogramMeterPerSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramMeterPerSecondExponents : TExponents = (1, 1, -1);

{ Quantity of TSquareCoulombsPerMeter }

type
  TSquareCoulombsPerMeter = TSquareCoulombPerMeterQty;

const
  rsSquareCoulombPerMeterSymbol     = '%sC2/%sm';
  rsSquareCoulombPerMeterName       = 'square %scoulomb per %smeter';
  rsSquareCoulombPerMeterPluralName = 'square %scoulombs per %smeter';

const
  cSquareCoulombPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareCoulombPerMeterExponents : TExponents = (2, -1);

{ Quantity of TJoulesPerMole }

type
  TJoulesPerMole = TJoulePerMoleQty;

const
  rsJoulePerMoleSymbol     = '%sJ/%smol';
  rsJoulePerMoleName       = '%sjoule per %smole';
  rsJoulePerMolePluralName = '%sjoules per %smole';

const
  cJoulePerMolePrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerMoleExponents : TExponents = (1, -1);

{ Quantity of TSquareMetersPerSquareSecond }

type
  TSquareMetersPerSquareSecond = TSquareMeterPerSquareSecondQty;

const
  rsSquareMeterPerSquareSecondSymbol     = '%sm2/%ss2';
  rsSquareMeterPerSquareSecondName       = 'square %smeter per square %ssecond';
  rsSquareMeterPerSquareSecondPluralName = 'square %smeters per square %ssecond';

const
  cSquareMeterPerSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterPerSquareSecondExponents : TExponents = (2, -2);

{ Quantity of TKilogramsPerSecond }

type
  TKilogramsPerSecond = TKilogramPerSecondQty;

const
  rsKilogramPerSecondSymbol     = '%sg/%ss';
  rsKilogramPerSecondName       = '%sgram per %ssecond';
  rsKilogramPerSecondPluralName = '%sgrams per %ssecond';

const
  cKilogramPerSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerSecondExponents : TExponents = (1, -1);

{ Quantity of TNewtonsPerMeter }

type
  TNewtonsPerMeter = TNewtonPerMeterQty;

const
  rsNewtonPerMeterSymbol     = '%sN/%sm';
  rsNewtonPerMeterName       = '%snewton per %smeter';
  rsNewtonPerMeterPluralName = '%snewtons per %smeter';

const
  cNewtonPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerMeterExponents : TExponents = (1, -1);

{ Quantity of TJoulesPerKilogramPerKelvin }

type
  TJoulesPerKilogramPerKelvin = TJoulePerKilogramPerKelvinQty;

const
  rsJoulePerKilogramPerKelvinSymbol     = '%sJ/%sg/%sK';
  rsJoulePerKilogramPerKelvinName       = '%sjoule per %sgram per %skelvin';
  rsJoulePerKilogramPerKelvinPluralName = '%sjoules per %sgram per %skelvin';

const
  cJoulePerKilogramPerKelvinPrefixes  : TPrefixes  = (pNone, pKilo, pNone);
  cJoulePerKilogramPerKelvinExponents : TExponents = (1, -1, -1);

{ Quantity of TWattsPerSteradianPerHertz }

type
  TWattsPerSteradianPerHertz = TWattPerSteradianPerHertzQty;

const
  rsWattPerSteradianPerHertzSymbol     = '%sW/sr/%sHz';
  rsWattPerSteradianPerHertzName       = '%swatt per steradian per %shertz';
  rsWattPerSteradianPerHertzPluralName = '%swatts per steradian per %shertz';

const
  cWattPerSteradianPerHertzPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerSteradianPerHertzExponents : TExponents = (1, -1);

{ Quantity of TAmperesPerMeter }

type
  TAmperesPerMeter = TAmperePerMeterQty;

const
  rsAmperePerMeterSymbol     = '%sA/%sm';
  rsAmperePerMeterName       = '%sampere per %smeter';
  rsAmperePerMeterPluralName = '%samperes per %smeter';

const
  cAmperePerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cAmperePerMeterExponents : TExponents = (1, -1);

{ Quantity of TWattsPerSteradian }

type
  TWattsPerSteradian = TWattPerSteradianQty;

const
  rsWattPerSteradianSymbol     = '%sW/sr';
  rsWattPerSteradianName       = '%swatt per steradian';
  rsWattPerSteradianPluralName = '%swatts per steradian';

const
  cWattPerSteradianPrefixes  : TPrefixes  = (pNone);
  cWattPerSteradianExponents : TExponents = (1);

{ Quantity of TWattsPerKelvin }

type
  TWattsPerKelvin = TWattPerKelvinQty;

const
  rsWattPerKelvinSymbol     = '%sW/%sK';
  rsWattPerKelvinName       = '%swatt per %skelvin';
  rsWattPerKelvinPluralName = '%swatts per %skelvin';

const
  cWattPerKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerKelvinExponents : TExponents = (1, -1);

{ Quantity of TCandelas }

type
  TCandelas = TCandelaQty;

var
  cd: TCandelaUnit;

const
  rsCandelaSymbol     = '%scd';
  rsCandelaName       = '%scandela';
  rsCandelaPluralName = '%scandelas';

const
  cCandelaPrefixes  : TPrefixes  = (pNone);
  cCandelaExponents : TExponents = (1);

{ Quantity of TJoulesPerKelvin }

type
  TJoulesPerKelvin = TJoulePerKelvinQty;

const
  rsJoulePerKelvinSymbol     = '%sJ/%sK';
  rsJoulePerKelvinName       = '%sjoule per %skelvin';
  rsJoulePerKelvinPluralName = '%sjoules per %skelvin';

const
  cJoulePerKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerKelvinExponents : TExponents = (1, -1);

{ Quantity of TSiemensPerMeter }

type
  TSiemensPerMeter = TSiemensPerMeterQty;

const
  rsSiemensPerMeterSymbol     = '%sS/%sm';
  rsSiemensPerMeterName       = '%ssiemens per %smeter';
  rsSiemensPerMeterPluralName = '%ssiemens per %smeter';

const
  cSiemensPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cSiemensPerMeterExponents : TExponents = (1, -1);

{ Quantity of TCubicMetersPerSquareSecond }

type
  TCubicMetersPerSquareSecond = TCubicMeterPerSquareSecondQty;

const
  rsCubicMeterPerSquareSecondSymbol     = '%sm3/%ss2';
  rsCubicMeterPerSquareSecondName       = 'cubic %smeter per square %ssecond';
  rsCubicMeterPerSquareSecondPluralName = 'cubic %smeters per square %ssecond';

const
  cCubicMeterPerSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cCubicMeterPerSquareSecondExponents : TExponents = (3, -2);

{ Quantity of TKilograms }

type
  TKilograms = TKilogramQty;

var
  kg: TKilogramUnit;

   hg: TKilogramQty = (FValue: 1E-01);
  dag: TKilogramQty = (FValue: 1E-02);
    g: TKilogramQty = (FValue: 1E-03);
   dg: TKilogramQty = (FValue: 1E-04);
   cg: TKilogramQty = (FValue: 1E-05);
   mg: TKilogramQty = (FValue: 1E-06);
  mig: TKilogramQty = (FValue: 1E-09);
   ng: TKilogramQty = (FValue: 1E-12);
   pg: TKilogramQty = (FValue: 1E-15);

const
  rsKilogramSymbol     = '%sg';
  rsKilogramName       = '%sgram';
  rsKilogramPluralName = '%sgrams';

const
  cKilogramPrefixes  : TPrefixes  = (pKilo);
  cKilogramExponents : TExponents = (1);

{ Quantity of TKilogramSquareSeconds }

type
  TKilogramSquareSeconds = TKilogramSquareSecondQty;

const
  rsKilogramSquareSecondSymbol     = '%sg·%ss2';
  rsKilogramSquareSecondName       = '%sgram square %ssecond';
  rsKilogramSquareSecondPluralName = '%sgram square %sseconds';

const
  cKilogramSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramSquareSecondExponents : TExponents = (1, 2);

{ Quantity of TReciprocalSquareRootCubicMeters }

type
  TReciprocalSquareRootCubicMeters = TReciprocalSquareRootCubicMeterQty;

const
  rsReciprocalSquareRootCubicMeterSymbol     = '1/√%sm3';
  rsReciprocalSquareRootCubicMeterName       = 'reciprocal square root cubic %smeter';
  rsReciprocalSquareRootCubicMeterPluralName = 'reciprocal square root cubic %smeters';

const
  cReciprocalSquareRootCubicMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalSquareRootCubicMeterExponents : TExponents = (-3);

{ Quantity of TReciprocalMeters }

type
  TReciprocalMeters = TReciprocalMeterQty;

const
  rsReciprocalMeterSymbol     = '1/%sm';
  rsReciprocalMeterName       = 'reciprocal %smeter';
  rsReciprocalMeterPluralName = 'reciprocal %smeters';

const
  cReciprocalMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalMeterExponents : TExponents = (-1);

{ Quantity of TNewtonSquareMetersPerSquareKilogram }

type
  TNewtonSquareMetersPerSquareKilogram = TNewtonSquareMeterPerSquareKilogramQty;

const
  rsNewtonSquareMeterPerSquareKilogramSymbol     = '%sN·%sm2/%sg2';
  rsNewtonSquareMeterPerSquareKilogramName       = '%snewton square %smeter per square %sgram';
  rsNewtonSquareMeterPerSquareKilogramPluralName = '%snewton square %smeters per square %sgram';

const
  cNewtonSquareMeterPerSquareKilogramPrefixes  : TPrefixes  = (pNone, pNone, pKilo);
  cNewtonSquareMeterPerSquareKilogramExponents : TExponents = (1, 2, -2);

{ Quantity of TKilogramSquareMetersPerSecond }

type
  TKilogramSquareMetersPerSecond = TKilogramSquareMeterPerSecondQty;

const
  rsKilogramSquareMeterPerSecondSymbol     = '%sg·%sm2/%ss';
  rsKilogramSquareMeterPerSecondName       = '%sgram square %smeter per %ssecond';
  rsKilogramSquareMeterPerSecondPluralName = '%sgram square %smeters per %ssecond';

const
  cKilogramSquareMeterPerSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramSquareMeterPerSecondExponents : TExponents = (1, 2, -1);

{ Quantity of TCubicSeconds }

type
  TCubicSeconds = TCubicSecondQty;

var
  s3: TCubicSecondUnit;

const
   ds3: TCubicSecondQty = (FValue: 1E-03);
   cs3: TCubicSecondQty = (FValue: 1E-06);
   ms3: TCubicSecondQty = (FValue: 1E-09);
  mis3: TCubicSecondQty = (FValue: 1E-18);
   ns3: TCubicSecondQty = (FValue: 1E-27);
   ps3: TCubicSecondQty = (FValue: 1E-36);

const
  rsCubicSecondSymbol     = '%ss3';
  rsCubicSecondName       = 'cubic %ssecond';
  rsCubicSecondPluralName = 'cubic %sseconds';

const
  cCubicSecondPrefixes  : TPrefixes  = (pNone);
  cCubicSecondExponents : TExponents = (3);

{ Quantity of TSquareVolts }

type
  TSquareVolts = TSquareVoltQty;

var
  V2: TSquareVoltUnit;

const
  kV2: TSquareVoltQty = (FValue: 1E+06);
  mV2: TSquareVoltQty = (FValue: 1E-06);

const
  rsSquareVoltSymbol     = '%sV2';
  rsSquareVoltName       = 'square %svolt';
  rsSquareVoltPluralName = 'square %svolts';

const
  cSquareVoltPrefixes  : TPrefixes  = (pNone);
  cSquareVoltExponents : TExponents = (2);

{ Quantity of TKilogramsPerSquareMeter }

type
  TKilogramsPerSquareMeter = TKilogramPerSquareMeterQty;

const
  rsKilogramPerSquareMeterSymbol     = '%sg/%sm2';
  rsKilogramPerSquareMeterName       = '%sgram per square %smeter';
  rsKilogramPerSquareMeterPluralName = '%sgrams per square %smeter';

const
  cKilogramPerSquareMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerSquareMeterExponents : TExponents = (1, -2);

{ Quantity of TSquareMeters }

type
  TSquareMeters = TSquareMeterQty;

var
  m2: TSquareMeterUnit;

const
   km2: TSquareMeterQty = (FValue: 1E+06);
   dm2: TSquareMeterQty = (FValue: 1E-02);
   cm2: TSquareMeterQty = (FValue: 1E-04);
   mm2: TSquareMeterQty = (FValue: 1E-06);
  mim2: TSquareMeterQty = (FValue: 1E-12);
   nm2: TSquareMeterQty = (FValue: 1E-18);
   pm2: TSquareMeterQty = (FValue: 1E-24);

const
  rsSquareMeterSymbol     = '%sm2';
  rsSquareMeterName       = 'square %smeter';
  rsSquareMeterPluralName = 'square %smeters';

const
  cSquareMeterPrefixes  : TPrefixes  = (pNone);
  cSquareMeterExponents : TExponents = (2);

{ Quantity of TSquareMetersPerSecond }

type
  TSquareMetersPerSecond = TSquareMeterPerSecondQty;

const
  rsSquareMeterPerSecondSymbol     = '%sm2/%ss';
  rsSquareMeterPerSecondName       = 'square %smeter per %ssecond';
  rsSquareMeterPerSecondPluralName = 'square %smeters per %ssecond';

const
  cSquareMeterPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterPerSecondExponents : TExponents = (2, -1);

{ Quantity of TJoulesPerRadian }

type
  TJoulesPerRadian = TJoulePerRadianQty;

const
  rsJoulePerRadianSymbol     = '%sJ/rad';
  rsJoulePerRadianName       = '%sjoule per radian';
  rsJoulePerRadianPluralName = '%sjoules per radian';

const
  cJoulePerRadianPrefixes  : TPrefixes  = (pNone);
  cJoulePerRadianExponents : TExponents = (1);

{ Quantity of TRadians }

type
  TRadians = TRadianQty;

var
  rad: TRadianUnit;

const
  rsRadianSymbol     = 'rad';
  rsRadianName       = 'radian';
  rsRadianPluralName = 'radians';

const
  cRadianPrefixes  : TPrefixes  = ();
  cRadianExponents : TExponents = ();

{ Quantity of TCoulombsPerKilogram }

type
  TCoulombsPerKilogram = TCoulombPerKilogramQty;

const
  rsCoulombPerKilogramSymbol     = '%sC/%sg';
  rsCoulombPerKilogramName       = '%scoulomb per %sgram';
  rsCoulombPerKilogramPluralName = '%scoulombs per %sgram';

const
  cCoulombPerKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cCoulombPerKilogramExponents : TExponents = (1, -1);

{ Quantity of TMeterSteradians }

type
  TMeterSteradians = TMeterSteradianQty;

const
  rsMeterSteradianSymbol     = '%sm·sr';
  rsMeterSteradianName       = '%smeter steradian';
  rsMeterSteradianPluralName = '%smeter steradians';

const
  cMeterSteradianPrefixes  : TPrefixes  = (pNone);
  cMeterSteradianExponents : TExponents = (1);

{ Quantity of TAmperes }

type
  TAmperes = TAmpereQty;

var
  A: TAmpereUnit;

const
     kA: TAmpereQty = (FValue: 1E+03);
     hA: TAmpereQty = (FValue: 1E+02);
    daA: TAmpereQty = (FValue: 1E+01);
     dA: TAmpereQty = (FValue: 1E-01);
     cA: TAmpereQty = (FValue: 1E-02);
     mA: TAmpereQty = (FValue: 1E-03);
    miA: TAmpereQty = (FValue: 1E-06);
     nA: TAmpereQty = (FValue: 1E-09);
  picoA: TAmpereQty = (FValue: 1E-12);

const
  rsAmpereSymbol     = '%sA';
  rsAmpereName       = '%sampere';
  rsAmperePluralName = '%samperes';

const
  cAmperePrefixes  : TPrefixes  = (pNone);
  cAmpereExponents : TExponents = (1);

{ Quantity of TSiemens }

type
  TSiemens = TSiemensQty;

var
  siemens: TSiemensUnit;

const
  millisiemens: TSiemensQty = (FValue: 1E-03);
  microsiemens: TSiemensQty = (FValue: 1E-06);
   nanosiemens: TSiemensQty = (FValue: 1E-09);

const
  rsSiemensSymbol     = '%sS';
  rsSiemensName       = '%ssiemens';
  rsSiemensPluralName = '%ssiemens';

const
  cSiemensPrefixes  : TPrefixes  = (pNone);
  cSiemensExponents : TExponents = (1);

{ Quantity of TCoulombs }

type
  TCoulombs = TCoulombQty;

var
  C: TCoulombUnit;

const
   kC: TCoulombQty = (FValue: 1E+03);
   hC: TCoulombQty = (FValue: 1E+02);
  daC: TCoulombQty = (FValue: 1E+01);
   dC: TCoulombQty = (FValue: 1E-01);
   cC: TCoulombQty = (FValue: 1E-02);
   mC: TCoulombQty = (FValue: 1E-03);
  miC: TCoulombQty = (FValue: 1E-06);
   nC: TCoulombQty = (FValue: 1E-09);
   pC: TCoulombQty = (FValue: 1E-12);

const
  rsCoulombSymbol     = '%sC';
  rsCoulombName       = '%scoulomb';
  rsCoulombPluralName = '%scoulombs';

const
  cCoulombPrefixes  : TPrefixes  = (pNone);
  cCoulombExponents : TExponents = (1);

{ Quantity of TQuarticMeters }

type
  TQuarticMeters = TQuarticMeterQty;

var
  m4: TQuarticMeterUnit;

const
   km4: TQuarticMeterQty = (FValue: 1E+12);
   dm4: TQuarticMeterQty = (FValue: 1E-04);
   cm4: TQuarticMeterQty = (FValue: 1E-08);
   mm4: TQuarticMeterQty = (FValue: 1E-12);
  mim4: TQuarticMeterQty = (FValue: 1E-24);
   nm4: TQuarticMeterQty = (FValue: 1E-36);
   pm4: TQuarticMeterQty = (FValue: 1E-48);

const
  rsQuarticMeterSymbol     = '%sm4';
  rsQuarticMeterName       = 'quartic %smeter';
  rsQuarticMeterPluralName = 'quartic %smeters';

const
  cQuarticMeterPrefixes  : TPrefixes  = (pNone);
  cQuarticMeterExponents : TExponents = (4);

{ Quantity of TPascals }

type
  TPascals = TPascalQty;

var
  Pa: TPascalUnit;

const
  TPa: TPascalQty = (FValue: 1E+12);
  GPa: TPascalQty = (FValue: 1E+09);
  MPa: TPascalQty = (FValue: 1E+06);
  kPa: TPascalQty = (FValue: 1E+03);

const
  rsPascalSymbol     = '%sPa';
  rsPascalName       = '%spascal';
  rsPascalPluralName = '%spascals';

const
  cPascalPrefixes  : TPrefixes  = (pNone);
  cPascalExponents : TExponents = (1);

{ Quantity of TKilogramsPerQuarticMeter }

type
  TKilogramsPerQuarticMeter = TKilogramPerQuarticMeterQty;

const
  rsKilogramPerQuarticMeterSymbol     = '%sg/%sm4';
  rsKilogramPerQuarticMeterName       = '%sgram per quartic %smeter';
  rsKilogramPerQuarticMeterPluralName = '%sgrams per quartic %smeter';

const
  cKilogramPerQuarticMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerQuarticMeterExponents : TExponents = (1, -4);

{ Quantity of TReciprocalMoles }

type
  TReciprocalMoles = TReciprocalMoleQty;

const
  rsReciprocalMoleSymbol     = '1/%smol';
  rsReciprocalMoleName       = 'reciprocal %smole';
  rsReciprocalMolePluralName = 'reciprocal %smoles';

const
  cReciprocalMolePrefixes  : TPrefixes  = (pNone);
  cReciprocalMoleExponents : TExponents = (-1);

{ Quantity of TNewtonsPerSquareCoulomb }

type
  TNewtonsPerSquareCoulomb = TNewtonPerSquareCoulombQty;

const
  rsNewtonPerSquareCoulombSymbol     = '%sN/%sC2';
  rsNewtonPerSquareCoulombName       = '%snewton per square %scoulomb';
  rsNewtonPerSquareCoulombPluralName = '%snewtons per square %scoulomb';

const
  cNewtonPerSquareCoulombPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerSquareCoulombExponents : TExponents = (1, -2);

{ Quantity of TNewtonRadians }

type
  TNewtonRadians = TNewtonRadianQty;

const
  rsNewtonRadianSymbol     = '%sN·%srad';
  rsNewtonRadianName       = '%snewton %sradian';
  rsNewtonRadianPluralName = '%snewton %sradians';

const
  cNewtonRadianPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonRadianExponents : TExponents = (1, 1);

{ Quantity of TNewtonsPerSquareKilogram }

type
  TNewtonsPerSquareKilogram = TNewtonPerSquareKilogramQty;

const
  rsNewtonPerSquareKilogramSymbol     = '%sN/%sg2';
  rsNewtonPerSquareKilogramName       = '%snewton per square %sgram';
  rsNewtonPerSquareKilogramPluralName = '%snewtons per square %sgram';

const
  cNewtonPerSquareKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cNewtonPerSquareKilogramExponents : TExponents = (1, -2);

{ Quantity of THenries }

type
  THenries = THenryQty;

var
  H: THenryUnit;

const
   mH: THenryQty = (FValue: 1E-03);
  miH: THenryQty = (FValue: 1E-06);
   nH: THenryQty = (FValue: 1E-09);

const
  rsHenrySymbol     = '%sH';
  rsHenryName       = '%shenry';
  rsHenryPluralName = '%shenries';

const
  cHenryPrefixes  : TPrefixes  = (pNone);
  cHenryExponents : TExponents = (1);

{ Quantity of TWattsPerQuarticKelvin }

type
  TWattsPerQuarticKelvin = TWattPerQuarticKelvinQty;

const
  rsWattPerQuarticKelvinSymbol     = '%sW/%sK4';
  rsWattPerQuarticKelvinName       = '%swatt per quartic %skelvin';
  rsWattPerQuarticKelvinPluralName = '%swatts per quartic %skelvin';

const
  cWattPerQuarticKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerQuarticKelvinExponents : TExponents = (1, -4);

{ Quantity of TWebers }

type
  TWebers = TWeberQty;

var
  Wb: TWeberUnit;

const
  rsWeberSymbol     = '%sWb';
  rsWeberName       = '%sweber';
  rsWeberPluralName = '%swebers';

const
  cWeberPrefixes  : TPrefixes  = (pNone);
  cWeberExponents : TExponents = (1);

{ Quantity of TVoltsPerMeter }

type
  TVoltsPerMeter = TVoltPerMeterQty;

const
  rsVoltPerMeterSymbol     = '%sV/%sm';
  rsVoltPerMeterName       = '%svolt per %smeter';
  rsVoltPerMeterPluralName = '%svolts per %smeter';

const
  cVoltPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cVoltPerMeterExponents : TExponents = (1, -1);

{ Quantity of TSquareKilogramSquareMetersPerSquareSecond }

type
  TSquareKilogramSquareMetersPerSquareSecond = TSquareKilogramSquareMeterPerSquareSecondQty;

const
  rsSquareKilogramSquareMeterPerSquareSecondSymbol     = '%sg2·%sm2/%ss2';
  rsSquareKilogramSquareMeterPerSquareSecondName       = 'square%sgram square%smeter per square%ssecond';
  rsSquareKilogramSquareMeterPerSquareSecondPluralName = 'square%sgram square%smeters per square%ssecond';

const
  cSquareKilogramSquareMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cSquareKilogramSquareMeterPerSquareSecondExponents : TExponents = (2, 2, -2);

{ Quantity of TCubicMetersPerKilogram }

type
  TCubicMetersPerKilogram = TCubicMeterPerKilogramQty;

const
  rsCubicMeterPerKilogramSymbol     = '%sm3/%sg';
  rsCubicMeterPerKilogramName       = 'cubic %smeter per %sgram';
  rsCubicMeterPerKilogramPluralName = 'cubic %smeters per %sgram';

const
  cCubicMeterPerKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cCubicMeterPerKilogramExponents : TExponents = (3, -1);

{ Quantity of TSquareMeterKelvins }

type
  TSquareMeterKelvins = TSquareMeterKelvinQty;

const
  rsSquareMeterKelvinSymbol     = '%sm2·%sK';
  rsSquareMeterKelvinName       = 'square %smeter %skelvin';
  rsSquareMeterKelvinPluralName = 'square %smeter %skelvins';

const
  cSquareMeterKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterKelvinExponents : TExponents = (2, 1);

{ Quantity of TWattsPerCubicMeter }

type
  TWattsPerCubicMeter = TWattPerCubicMeterQty;

const
  rsWattPerCubicMeterSymbol     = '%sW/%sm3';
  rsWattPerCubicMeterName       = '%swatt per cubic %smeter';
  rsWattPerCubicMeterPluralName = '%swatts per cubic %smeter';

const
  cWattPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerCubicMeterExponents : TExponents = (1, -3);

{ Quantity of TCoulombsPerSquareMeter }

type
  TCoulombsPerSquareMeter = TCoulombPerSquareMeterQty;

const
  rsCoulombPerSquareMeterSymbol     = '%sC/%sm2';
  rsCoulombPerSquareMeterName       = '%scoulomb per square %smeter';
  rsCoulombPerSquareMeterPluralName = '%scoulombs per square %smeter';

const
  cCoulombPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerSquareMeterExponents : TExponents = (1, -2);

{ Quantity of TVolts }

type
  TVolts = TVoltQty;

var
  V: TVoltUnit;

const
  kV: TVoltQty = (FValue: 1E+03);
  mV: TVoltQty = (FValue: 1E-03);

const
  rsVoltSymbol     = '%sV';
  rsVoltName       = '%svolt';
  rsVoltPluralName = '%svolts';

const
  cVoltPrefixes  : TPrefixes  = (pNone);
  cVoltExponents : TExponents = (1);

{ Quantity of TOhmMeters }

type
  TOhmMeters = TOhmMeterQty;

const
  rsOhmMeterSymbol     = '%sΩ·%sm';
  rsOhmMeterName       = '%sohm %smeter';
  rsOhmMeterPluralName = '%sohm %smeters';

const
  cOhmMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cOhmMeterExponents : TExponents = (1, 1);

{ Quantity of TCubicMetersPerSecond }

type
  TCubicMetersPerSecond = TCubicMeterPerSecondQty;

const
  rsCubicMeterPerSecondSymbol     = '%sm3/%ss';
  rsCubicMeterPerSecondName       = 'cubic %smeter per %ssecond';
  rsCubicMeterPerSecondPluralName = 'cubic %smeters per %ssecond';

const
  cCubicMeterPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cCubicMeterPerSecondExponents : TExponents = (3, -1);

{ Quantity of TJoules }

type
  TJoules = TJouleQty;

var
  J: TJouleUnit;

const
  TJ: TJouleQty = (FValue: 1E+12);
  GJ: TJouleQty = (FValue: 1E+09);
  MJ: TJouleQty = (FValue: 1E+06);
  kJ: TJouleQty = (FValue: 1E+03);

const
  rsJouleSymbol     = '%sJ';
  rsJouleName       = '%sjoule';
  rsJoulePluralName = '%sjoules';

const
  cJoulePrefixes  : TPrefixes  = (pNone);
  cJouleExponents : TExponents = (1);

{ Quantity of TCubicKelvins }

type
  TCubicKelvins = TCubicKelvinQty;

var
  K3: TCubicKelvinUnit;

const
  rsCubicKelvinSymbol     = '%sK3';
  rsCubicKelvinName       = 'cubic %skelvin';
  rsCubicKelvinPluralName = 'cubic %skelvins';

const
  cCubicKelvinPrefixes  : TPrefixes  = (pNone);
  cCubicKelvinExponents : TExponents = (3);

{ Quantity of TReciprocalQuarticMeters }

type
  TReciprocalQuarticMeters = TReciprocalQuarticMeterQty;

const
  rsReciprocalQuarticMeterSymbol     = '1/%sm4';
  rsReciprocalQuarticMeterName       = 'reciprocal quartic %smeter';
  rsReciprocalQuarticMeterPluralName = 'reciprocal quartic %smeters';

const
  cReciprocalQuarticMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalQuarticMeterExponents : TExponents = (-4);

{ Quantity of TCoulombMeters }

type
  TCoulombMeters = TCoulombMeterQty;

const
  rsCoulombMeterSymbol     = '%sC·%sm';
  rsCoulombMeterName       = '%scoulomb %smeter';
  rsCoulombMeterPluralName = '%scoulomb %smeters';

const
  cCoulombMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombMeterExponents : TExponents = (1, 1);

{ Quantity of TLuxSeconds }

type
  TLuxSeconds = TLuxSecondQty;

const
  rsLuxSecondSymbol     = '%slx·%ss';
  rsLuxSecondName       = '%slux %ssecond';
  rsLuxSecondPluralName = '%slux %sseconds';

const
  cLuxSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cLuxSecondExponents : TExponents = (1, 1);

{ Quantity of TTeslas }

type
  TTeslas = TTeslaQty;

var
  T: TTeslaUnit;

const
   mT: TTeslaQty = (FValue: 1E-03);
  miT: TTeslaQty = (FValue: 1E-06);
   nT: TTeslaQty = (FValue: 1E-09);

const
  rsTeslaSymbol     = '%sT';
  rsTeslaName       = '%stesla';
  rsTeslaPluralName = '%steslas';

const
  cTeslaPrefixes  : TPrefixes  = (pNone);
  cTeslaExponents : TExponents = (1);

{ Quantity of TSteradiansPerSquareSecond }

type
  TSteradiansPerSquareSecond = TSteradianPerSquareSecondQty;

const
  rsSteradianPerSquareSecondSymbol     = 'sr/%ss2';
  rsSteradianPerSquareSecondName       = 'steradian per square %ssecond';
  rsSteradianPerSquareSecondPluralName = 'steradians per square %ssecond';

const
  cSteradianPerSquareSecondPrefixes  : TPrefixes  = (pNone);
  cSteradianPerSquareSecondExponents : TExponents = (-2);

{ Quantity of TLumensPerWatt }

type
  TLumensPerWatt = TLumenPerWattQty;

const
  rsLumenPerWattSymbol     = '%slm/%sW';
  rsLumenPerWattName       = '%slumen per %swatt';
  rsLumenPerWattPluralName = '%slumens per %swatt';

const
  cLumenPerWattPrefixes  : TPrefixes  = (pNone, pNone);
  cLumenPerWattExponents : TExponents = (1, -1);

{ Quantity of TTeslaMeters }

type
  TTeslaMeters = TTeslaMeterQty;

const
  rsTeslaMeterSymbol     = '%sT·%sm';
  rsTeslaMeterName       = '%stesla %smeter';
  rsTeslaMeterPluralName = '%stesla %smeters';

const
  cTeslaMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cTeslaMeterExponents : TExponents = (1, 1);

{ Quantity of TNewtonsPerCubicMeter }

type
  TNewtonsPerCubicMeter = TNewtonPerCubicMeterQty;

const
  rsNewtonPerCubicMeterSymbol     = '%sN/%sm3';
  rsNewtonPerCubicMeterName       = '%snewton per cubic %smeter';
  rsNewtonPerCubicMeterPluralName = '%snewtons per cubic %smeter';

const
  cNewtonPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerCubicMeterExponents : TExponents = (1, -3);

{ Quantity of TSquareMetersPerSquareCoulomb }

type
  TSquareMetersPerSquareCoulomb = TSquareMeterPerSquareCoulombQty;

const
  rsSquareMeterPerSquareCoulombSymbol     = '%sm2/%sC2';
  rsSquareMeterPerSquareCoulombName       = 'square %smeter per square %scoulomb';
  rsSquareMeterPerSquareCoulombPluralName = 'square %smeters per square %scoulomb';

const
  cSquareMeterPerSquareCoulombPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterPerSquareCoulombExponents : TExponents = (2, -2);

{ Quantity of TSquareSeconds }

type
  TSquareSeconds = TSquareSecondQty;

var
  s2: TSquareSecondUnit;

const
   ds2: TSquareSecondQty = (FValue: 1E-02);
   cs2: TSquareSecondQty = (FValue: 1E-04);
   ms2: TSquareSecondQty = (FValue: 1E-06);
  mis2: TSquareSecondQty = (FValue: 1E-12);
   ns2: TSquareSecondQty = (FValue: 1E-18);
   ps2: TSquareSecondQty = (FValue: 1E-24);

const
  rsSquareSecondSymbol     = '%ss2';
  rsSquareSecondName       = 'square %ssecond';
  rsSquareSecondPluralName = 'square %sseconds';

const
  cSquareSecondPrefixes  : TPrefixes  = (pNone);
  cSquareSecondExponents : TExponents = (2);

{ Quantity of TSteradians }

type
  TSteradians = TSteradianQty;

var
  sr: TSteradianUnit;

const
  rsSteradianSymbol     = 'sr';
  rsSteradianName       = 'steradian';
  rsSteradianPluralName = 'steradians';

const
  cSteradianPrefixes  : TPrefixes  = ();
  cSteradianExponents : TExponents = ();

{ Quantity of TSquareCoulombs }

type
  TSquareCoulombs = TSquareCoulombQty;

var
  C2: TSquareCoulombUnit;

const
   kC2: TSquareCoulombQty = (FValue: 1E+06);
   hC2: TSquareCoulombQty = (FValue: 1E+04);
  daC2: TSquareCoulombQty = (FValue: 1E+02);
   dC2: TSquareCoulombQty = (FValue: 1E-02);
   cC2: TSquareCoulombQty = (FValue: 1E-04);
   mC2: TSquareCoulombQty = (FValue: 1E-06);
  miC2: TSquareCoulombQty = (FValue: 1E-12);
   nC2: TSquareCoulombQty = (FValue: 1E-18);
   pC2: TSquareCoulombQty = (FValue: 1E-24);

const
  rsSquareCoulombSymbol     = '%sC2';
  rsSquareCoulombName       = 'square %scoulomb';
  rsSquareCoulombPluralName = 'square %scoulombs';

const
  cSquareCoulombPrefixes  : TPrefixes  = (pNone);
  cSquareCoulombExponents : TExponents = (2);

{ Quantity of TSquareSecondsPerSquareMeter }

type
  TSquareSecondsPerSquareMeter = TSquareSecondPerSquareMeterQty;

const
  rsSquareSecondPerSquareMeterSymbol     = '%ss2/%sm2';
  rsSquareSecondPerSquareMeterName       = 'square %ssecond per square %smeter';
  rsSquareSecondPerSquareMeterPluralName = 'square %sseconds per square %smeter';

const
  cSquareSecondPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareSecondPerSquareMeterExponents : TExponents = (2, -2);

{ Quantity of TSquareHertz }

type
  TSquareHertz = TSquareHertzQty;

var
  Hz2: TSquareHertzUnit;

const
  THz2: TSquareHertzQty = (FValue: 1E+24);
  GHz2: TSquareHertzQty = (FValue: 1E+18);
  MHz2: TSquareHertzQty = (FValue: 1E+12);
  kHz2: TSquareHertzQty = (FValue: 1E+06);

const
  rsSquareHertzSymbol     = '%sHz2';
  rsSquareHertzName       = 'square %shertz';
  rsSquareHertzPluralName = 'square %shertz';

const
  cSquareHertzPrefixes  : TPrefixes  = (pNone);
  cSquareHertzExponents : TExponents = (2);

{ Quantity of TTeslasPerAmpere }

type
  TTeslasPerAmpere = TTeslaPerAmpereQty;

const
  rsTeslaPerAmpereSymbol     = '%sT/%sA';
  rsTeslaPerAmpereName       = '%stesla per %sampere';
  rsTeslaPerAmperePluralName = '%steslas per %sampere';

const
  cTeslaPerAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cTeslaPerAmpereExponents : TExponents = (1, -1);

{ Quantity of TWattsPerSquareMeterPerKelvin }

type
  TWattsPerSquareMeterPerKelvin = TWattPerSquareMeterPerKelvinQty;

const
  rsWattPerSquareMeterPerKelvinSymbol     = '%sW/%sm2/%sK';
  rsWattPerSquareMeterPerKelvinName       = '%swatt per square %smeter per %skelvin';
  rsWattPerSquareMeterPerKelvinPluralName = '%swatts per square %smeter per %skelvin';

const
  cWattPerSquareMeterPerKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerSquareMeterPerKelvinExponents : TExponents = (1, -2, -1);

{ Quantity of TWattsPerSquareMeter }

type
  TWattsPerSquareMeter = TWattPerSquareMeterQty;

const
  rsWattPerSquareMeterSymbol     = '%sW/%sm2';
  rsWattPerSquareMeterName       = '%swatt per square %smeter';
  rsWattPerSquareMeterPluralName = '%swatts per square %smeter';

const
  cWattPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerSquareMeterExponents : TExponents = (1, -2);

{ Quantity of TFaradsPerMeter }

type
  TFaradsPerMeter = TFaradPerMeterQty;

const
  rsFaradPerMeterSymbol     = '%sF/%sm';
  rsFaradPerMeterName       = '%sfarad per %smeter';
  rsFaradPerMeterPluralName = '%sfarads per %smeter';

const
  cFaradPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cFaradPerMeterExponents : TExponents = (1, -1);

{ Quantity of TKilogramKelvins }

type
  TKilogramKelvins = TKilogramKelvinQty;

const
  rsKilogramKelvinSymbol     = '%sg·%sK';
  rsKilogramKelvinName       = '%sgram %skelvin';
  rsKilogramKelvinPluralName = '%sgram %skelvins';

const
  cKilogramKelvinPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramKelvinExponents : TExponents = (1, 1);

{ Quantity of TMoleKelvins }

type
  TMoleKelvins = TMoleKelvinQty;

const
  rsMoleKelvinSymbol     = '%smol·%sK';
  rsMoleKelvinName       = '%smole %skelvin';
  rsMoleKelvinPluralName = '%smole %skelvins';

const
  cMoleKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cMoleKelvinExponents : TExponents = (1, 1);

{ Quantity of TKelvins }

type
  TKelvins = TKelvinQty;

var
  K: TKelvinUnit;

const
  rsKelvinSymbol     = '%sK';
  rsKelvinName       = '%skelvin';
  rsKelvinPluralName = '%skelvins';

const
  cKelvinPrefixes  : TPrefixes  = (pNone);
  cKelvinExponents : TExponents = (1);

{ Quantity of TRadiansPerMeter }

type
  TRadiansPerMeter = TRadianPerMeterQty;

const
  rsRadianPerMeterSymbol     = 'rad/%sm';
  rsRadianPerMeterName       = 'radian per %smeter';
  rsRadianPerMeterPluralName = 'radians per %smeter';

const
  cRadianPerMeterPrefixes  : TPrefixes  = (pNone);
  cRadianPerMeterExponents : TExponents = (-1);

{ Quantity of TSquareJoules }

type
  TSquareJoules = TSquareJouleQty;

var
  J2: TSquareJouleUnit;

const
  TJ2: TSquareJouleQty = (FValue: 1E+24);
  GJ2: TSquareJouleQty = (FValue: 1E+18);
  MJ2: TSquareJouleQty = (FValue: 1E+12);
  kJ2: TSquareJouleQty = (FValue: 1E+06);

const
  rsSquareJouleSymbol     = '%sJ2';
  rsSquareJouleName       = 'square %sjoule';
  rsSquareJoulePluralName = 'square %sjoules';

const
  cSquareJoulePrefixes  : TPrefixes  = (pNone);
  cSquareJouleExponents : TExponents = (2);

{ Quantity of TReciprocalCubicMeters }

type
  TReciprocalCubicMeters = TReciprocalCubicMeterQty;

const
  rsReciprocalCubicMeterSymbol     = '1/%sm3';
  rsReciprocalCubicMeterName       = 'reciprocal cubic %smeter';
  rsReciprocalCubicMeterPluralName = 'reciprocal cubic %smeters';

const
  cReciprocalCubicMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalCubicMeterExponents : TExponents = (-3);

{ Quantity of TSquareMeterSteradianHertz }

type
  TSquareMeterSteradianHertz = TSquareMeterSteradianHertzQty;

const
  rsSquareMeterSteradianHertzSymbol     = '%sm2·sr·%shertz';
  rsSquareMeterSteradianHertzName       = 'square %smeter steradian %shertz';
  rsSquareMeterSteradianHertzPluralName = 'square %smeter steradian %shertz';

const
  cSquareMeterSteradianHertzPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterSteradianHertzExponents : TExponents = (2, 1);

{ Quantity of TVoltMeters }

type
  TVoltMeters = TVoltMeterQty;

const
  rsVoltMeterSymbol     = '%sV·%sm';
  rsVoltMeterName       = '%svolt %smeter';
  rsVoltMeterPluralName = '%svolt %smeters';

const
  cVoltMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cVoltMeterExponents : TExponents = (1, 1);

{ Quantity of TWattsPerCubicMeterPerSteradian }

type
  TWattsPerCubicMeterPerSteradian = TWattPerCubicMeterPerSteradianQty;

const
  rsWattPerCubicMeterPerSteradianSymbol     = '%sW/%sm3/sr';
  rsWattPerCubicMeterPerSteradianName       = '%swatt per cubic %smeter per steradian';
  rsWattPerCubicMeterPerSteradianPluralName = '%swatts per cubic %smeter per steradian';

const
  cWattPerCubicMeterPerSteradianPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerCubicMeterPerSteradianExponents : TExponents = (1, -3);

{ Quantity of TCoulombsPerMeter }

type
  TCoulombsPerMeter = TCoulombPerMeterQty;

const
  rsCoulombPerMeterSymbol     = '%sC/%sm';
  rsCoulombPerMeterName       = '%scoulomb per %smeter';
  rsCoulombPerMeterPluralName = '%scoulombs per %smeter';

const
  cCoulombPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerMeterExponents : TExponents = (1, -1);

{ Quantity of TLumens }

type
  TLumens = TLumenQty;

var
  lm: TLumenUnit;

const
  rsLumenSymbol     = '%slm';
  rsLumenName       = '%slumen';
  rsLumenPluralName = '%slumens';

const
  cLumenPrefixes  : TPrefixes  = (pNone);
  cLumenExponents : TExponents = (1);

{ Quantity of TSteradianHertz }

type
  TSteradianHertz = TSteradianHertzQty;

const
  rsSteradianHertzSymbol     = 'sr·%sHz';
  rsSteradianHertzName       = 'steradian %shertz';
  rsSteradianHertzPluralName = 'steradian %shertz';

const
  cSteradianHertzPrefixes  : TPrefixes  = (pNone);
  cSteradianHertzExponents : TExponents = (1);

{ Quantity of TJoulesPerMolePerKelvin }

type
  TJoulesPerMolePerKelvin = TJoulePerMolePerKelvinQty;

const
  rsJoulePerMolePerKelvinSymbol     = '%sJ/%smol/%sK';
  rsJoulePerMolePerKelvinName       = '%sjoule per %smole per %skelvin';
  rsJoulePerMolePerKelvinPluralName = '%sjoules per %smole per %skelvin';

const
  cJoulePerMolePerKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cJoulePerMolePerKelvinExponents : TExponents = (1, -1, -1);

{ Quantity of TKilogramMeters }

type
  TKilogramMeters = TKilogramMeterQty;

const
  rsKilogramMeterSymbol     = '%sg·%sm';
  rsKilogramMeterName       = '%sgram %smeter';
  rsKilogramMeterPluralName = '%sgram %smeters';

const
  cKilogramMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramMeterExponents : TExponents = (1, 1);

{ Quantity of TQuarticSeconds }

type
  TQuarticSeconds = TQuarticSecondQty;

var
  s4: TQuarticSecondUnit;

const
   ds4: TQuarticSecondQty = (FValue: 1E-04);
   cs4: TQuarticSecondQty = (FValue: 1E-08);
   ms4: TQuarticSecondQty = (FValue: 1E-12);
  mis4: TQuarticSecondQty = (FValue: 1E-24);
   ns4: TQuarticSecondQty = (FValue: 1E-36);
   ps4: TQuarticSecondQty = (FValue: 1E-48);

const
  rsQuarticSecondSymbol     = '%ss4';
  rsQuarticSecondName       = 'quartic %ssecond';
  rsQuarticSecondPluralName = 'quartic %sseconds';

const
  cQuarticSecondPrefixes  : TPrefixes  = (pNone);
  cQuarticSecondExponents : TExponents = (4);

{ Quantity of TWattsPerSquareMeterPerQuarticKelvin }

type
  TWattsPerSquareMeterPerQuarticKelvin = TWattPerSquareMeterPerQuarticKelvinQty;

const
  rsWattPerSquareMeterPerQuarticKelvinSymbol     = '%sW/%sm2/%sK4';
  rsWattPerSquareMeterPerQuarticKelvinName       = '%swatt per square %smeter per quartic %skelvin';
  rsWattPerSquareMeterPerQuarticKelvinPluralName = '%swatts per square %smeter per quartic %skelvin';

const
  cWattPerSquareMeterPerQuarticKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerSquareMeterPerQuarticKelvinExponents : TExponents = (1, -2, -4);

{ Quantity of TMetersPerSecond }

type
  TMetersPerSecond = TMeterPerSecondQty;

const
  rsMeterPerSecondSymbol     = '%sm/%ss';
  rsMeterPerSecondName       = '%smeter per %ssecond';
  rsMeterPerSecondPluralName = '%smeters per %ssecond';

const
  cMeterPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerSecondExponents : TExponents = (1, -1);

{ Quantity of TCoulombsPerCubicMeter }

type
  TCoulombsPerCubicMeter = TCoulombPerCubicMeterQty;

const
  rsCoulombPerCubicMeterSymbol     = '%sC/%sm3';
  rsCoulombPerCubicMeterName       = '%scoulomb per cubic %smeter';
  rsCoulombPerCubicMeterPluralName = '%scoulombs per cubic %smeter';

const
  cCoulombPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerCubicMeterExponents : TExponents = (1, -3);

{ Quantity of TSquareKelvins }

type
  TSquareKelvins = TSquareKelvinQty;

var
  K2: TSquareKelvinUnit;

const
  rsSquareKelvinSymbol     = '%sK2';
  rsSquareKelvinName       = 'square %skelvin';
  rsSquareKelvinPluralName = 'square %skelvins';

const
  cSquareKelvinPrefixes  : TPrefixes  = (pNone);
  cSquareKelvinExponents : TExponents = (2);

{ Quantity of TMeterKelvinsPerWatt }

type
  TMeterKelvinsPerWatt = TMeterKelvinPerWattQty;

const
  rsMeterKelvinPerWattSymbol     = '%sK·%sm/%sW';
  rsMeterKelvinPerWattName       = '%skelvin %smeter per %swatt';
  rsMeterKelvinPerWattPluralName = '%skelvin %smeters per %swatt';

const
  cMeterKelvinPerWattPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cMeterKelvinPerWattExponents : TExponents = (1, 1, -1);

{ Quantity of TReciprocalSquareRootMeters }

type
  TReciprocalSquareRootMeters = TReciprocalSquareRootMeterQty;

const
  rsReciprocalSquareRootMeterSymbol     = '1/√%sm';
  rsReciprocalSquareRootMeterName       = 'reciprocal square root %smeter';
  rsReciprocalSquareRootMeterPluralName = 'reciprocal square root %smeters';

const
  cReciprocalSquareRootMeterPrefixes  : TPrefixes  = (pNone);
  cReciprocalSquareRootMeterExponents : TExponents = (-1);

{ Quantity of TQuarticKelvins }

type
  TQuarticKelvins = TQuarticKelvinQty;

var
  K4: TQuarticKelvinUnit;

const
  rsQuarticKelvinSymbol     = '%sK4';
  rsQuarticKelvinName       = 'quartic %skelvin';
  rsQuarticKelvinPluralName = 'quartic %skelvins';

const
  cQuarticKelvinPrefixes  : TPrefixes  = (pNone);
  cQuarticKelvinExponents : TExponents = (4);

{ Quantity of TPoiseuilles }

type
  TPoiseuilles = TPoiseuilleQty;

var
  Pl: TPoiseuilleUnit;

const
   cPl: TPoiseuilleQty = (FValue: 1E-02);
   mPl: TPoiseuilleQty = (FValue: 1E-03);
  miPl: TPoiseuilleQty = (FValue: 1E-06);

const
  rsPoiseuilleSymbol     = '%sPl';
  rsPoiseuilleName       = '%spoiseuille';
  rsPoiseuillePluralName = '%spoiseuilles';

const
  cPoiseuillePrefixes  : TPrefixes  = (pNone);
  cPoiseuilleExponents : TExponents = (1);

{ Quantity of TWattsPerSquareMeterPerSteradianPerHertz }

type
  TWattsPerSquareMeterPerSteradianPerHertz = TWattPerSquareMeterPerSteradianPerHertzQty;

const
  rsWattPerSquareMeterPerSteradianPerHertzSymbol     = '%sW/%sm2/sr/%sHz';
  rsWattPerSquareMeterPerSteradianPerHertzName       = '%swatt per square %smeter per steradian per %shertz';
  rsWattPerSquareMeterPerSteradianPerHertzPluralName = '%swatts per square %smeter per steradian per %shertz';

const
  cWattPerSquareMeterPerSteradianPerHertzPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerSquareMeterPerSteradianPerHertzExponents : TExponents = (1, -2, -1);

{ Quantity of TNewtonSquareMeters }

type
  TNewtonSquareMeters = TNewtonSquareMeterQty;

const
  rsNewtonSquareMeterSymbol     = '%sN·%sm2';
  rsNewtonSquareMeterName       = '%snewton square %smeter';
  rsNewtonSquareMeterPluralName = '%snewton square %smeters';

const
  cNewtonSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonSquareMeterExponents : TExponents = (1, 2);

{ Quantity of TSexticSeconds }

type
  TSexticSeconds = TSexticSecondQty;

var
  s6: TSexticSecondUnit;

const
   ds6: TSexticSecondQty = (FValue: 1E-06);
   cs6: TSexticSecondQty = (FValue: 1E-12);
   ms6: TSexticSecondQty = (FValue: 1E-18);
  mis6: TSexticSecondQty = (FValue: 1E-36);
   ns6: TSexticSecondQty = (FValue: 1E-54);
   ps6: TSexticSecondQty = (FValue: 1E-72);

const
  rsSexticSecondSymbol     = '%ss6';
  rsSexticSecondName       = 'sextic %ssecond';
  rsSexticSecondPluralName = 'sextic %sseconds';

const
  cSexticSecondPrefixes  : TPrefixes  = (pNone);
  cSexticSecondExponents : TExponents = (6);

{ Quantity of THenriesPerMeter }

type
  THenriesPerMeter = THenryPerMeterQty;

const
  rsHenryPerMeterSymbol     = '%sH/%sm';
  rsHenryPerMeterName       = '%shenry per %smeter';
  rsHenryPerMeterPluralName = '%shenries per %smeter';

const
  cHenryPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cHenryPerMeterExponents : TExponents = (1, -1);

{ Quantity of TMeterKelvins }

type
  TMeterKelvins = TMeterKelvinQty;

const
  rsMeterKelvinSymbol     = '%sm·%sK';
  rsMeterKelvinName       = '%smeter %skelvin';
  rsMeterKelvinPluralName = '%smeter %skelvins';

const
  cMeterKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterKelvinExponents : TExponents = (1, 1);

{ Quantity of TOhms }

type
  TOhms = TOhmQty;

var
  ohm: TOhmUnit;

const
     Gohm: TOhmQty = (FValue: 1E+09);
  megaohm: TOhmQty = (FValue: 1E+06);
     kohm: TOhmQty = (FValue: 1E+03);
     mohm: TOhmQty = (FValue: 1E-03);
    miohm: TOhmQty = (FValue: 1E-06);
     nohm: TOhmQty = (FValue: 1E-09);

const
  rsOhmSymbol     = '%sΩ';
  rsOhmName       = '%sohm';
  rsOhmPluralName = '%sohms';

const
  cOhmPrefixes  : TPrefixes  = (pNone);
  cOhmExponents : TExponents = (1);

{ Quantity of TKilogramSquareMeters }

type
  TKilogramSquareMeters = TKilogramSquareMeterQty;

const
  rsKilogramSquareMeterSymbol     = '%sg·%sm2';
  rsKilogramSquareMeterName       = '%sgram square %smeter';
  rsKilogramSquareMeterPluralName = '%sgram square %smeters';

const
  cKilogramSquareMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramSquareMeterExponents : TExponents = (1, 2);

{ Quantity of TMeters }

type
  TMeters = TMeterQty;

var
  m: TMeterUnit;

const
   km: TMeterQty = (FValue: 1E+03);
   dm: TMeterQty = (FValue: 1E-01);
   cm: TMeterQty = (FValue: 1E-02);
   mm: TMeterQty = (FValue: 1E-03);
  mim: TMeterQty = (FValue: 1E-06);
   nm: TMeterQty = (FValue: 1E-09);
   pm: TMeterQty = (FValue: 1E-12);

const
  rsMeterSymbol     = '%sm';
  rsMeterName       = '%smeter';
  rsMeterPluralName = '%smeters';

const
  cMeterPrefixes  : TPrefixes  = (pNone);
  cMeterExponents : TExponents = (1);

{ Quantity of TQuinticSeconds }

type
  TQuinticSeconds = TQuinticSecondQty;

var
  s5: TQuinticSecondUnit;

const
   ds5: TQuinticSecondQty = (FValue: 1E-05);
   cs5: TQuinticSecondQty = (FValue: 1E-10);
   ms5: TQuinticSecondQty = (FValue: 1E-15);
  mis5: TQuinticSecondQty = (FValue: 1E-30);
   ns5: TQuinticSecondQty = (FValue: 1E-45);
   ps5: TQuinticSecondQty = (FValue: 1E-60);

const
  rsQuinticSecondSymbol     = '%ss5';
  rsQuinticSecondName       = 'quintic %ssecond';
  rsQuinticSecondPluralName = 'quintic %sseconds';

const
  cQuinticSecondPrefixes  : TPrefixes  = (pNone);
  cQuinticSecondExponents : TExponents = (5);

{ Quantity of TKilogramsPerMeter }

type
  TKilogramsPerMeter = TKilogramPerMeterQty;

const
  rsKilogramPerMeterSymbol     = '%sg/%sm';
  rsKilogramPerMeterName       = '%sgram per %smeter';
  rsKilogramPerMeterPluralName = '%sgrams per %smeter';

const
  cKilogramPerMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerMeterExponents : TExponents = (1, -1);

{ Quantity of TSquareNewtons }

type
  TSquareNewtons = TSquareNewtonQty;

var
  N2: TSquareNewtonUnit;

const
   GN2: TSquareNewtonQty = (FValue: 1E+18);
   MN2: TSquareNewtonQty = (FValue: 1E+12);
   kN2: TSquareNewtonQty = (FValue: 1E+06);
   hN2: TSquareNewtonQty = (FValue: 1E+04);
  daN2: TSquareNewtonQty = (FValue: 1E+02);

const
  rsSquareNewtonSymbol     = '%sN2';
  rsSquareNewtonName       = 'square %snewton';
  rsSquareNewtonPluralName = 'square %snewtons';

const
  cSquareNewtonPrefixes  : TPrefixes  = (pNone);
  cSquareNewtonExponents : TExponents = (2);

{ Quantity of TCubicMeterSteradians }

type
  TCubicMeterSteradians = TCubicMeterSteradianQty;

const
  rsCubicMeterSteradianSymbol     = '%sm3·sr';
  rsCubicMeterSteradianName       = 'cubic %smeter steradian';
  rsCubicMeterSteradianPluralName = 'cubic %smeter steradians';

const
  cCubicMeterSteradianPrefixes  : TPrefixes  = (pNone);
  cCubicMeterSteradianExponents : TExponents = (3);

{ Quantity of TMetersPerSquareSecond }

type
  TMetersPerSquareSecond = TMeterPerSquareSecondQty;

const
  rsMeterPerSquareSecondSymbol     = '%sm/%ss2';
  rsMeterPerSquareSecondName       = '%smeter per %ssecond squared';
  rsMeterPerSquareSecondPluralName = '%smeters per %ssecond squared';

const
  cMeterPerSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerSquareSecondExponents : TExponents = (1, -2);

{ Quantity of TKilogramsPerCubicMeter }

type
  TKilogramsPerCubicMeter = TKilogramPerCubicMeterQty;

const
  rsKilogramPerCubicMeterSymbol     = '%sg/%sm3';
  rsKilogramPerCubicMeterName       = '%sgram per cubic %smeter';
  rsKilogramPerCubicMeterPluralName = '%sgrams per cubic %smeter';

const
  cKilogramPerCubicMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerCubicMeterExponents : TExponents = (1, -3);

{ Quantity of TKilogramsPerQuarticMeterPerSecond }

type
  TKilogramsPerQuarticMeterPerSecond = TKilogramPerQuarticMeterPerSecondQty;

const
  rsKilogramPerQuarticMeterPerSecondSymbol     = '%sg/%sm4/%ss';
  rsKilogramPerQuarticMeterPerSecondName       = '%sgram per quartic %smeter per %ssecond';
  rsKilogramPerQuarticMeterPerSecondPluralName = '%sgrams per quartic %smeter per %ssecond';

const
  cKilogramPerQuarticMeterPerSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerQuarticMeterPerSecondExponents : TExponents = (1, -4, -1);

{ Quantity of TWattsPerSquareMeterPerSteradian }

type
  TWattsPerSquareMeterPerSteradian = TWattPerSquareMeterPerSteradianQty;

const
  rsWattPerSquareMeterPerSteradianSymbol     = '%sW/%sm2/sr';
  rsWattPerSquareMeterPerSteradianName       = '%swatt per square %smeter per steradian';
  rsWattPerSquareMeterPerSteradianPluralName = '%swatts per square %smeter per steradian';

const
  cWattPerSquareMeterPerSteradianPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerSquareMeterPerSteradianExponents : TExponents = (1, -2);

{ Quantity of TMetersPerWatt }

type
  TMetersPerWatt = TMeterPerWattQty;

const
  rsMeterPerWattSymbol     = '%sm/%sW';
  rsMeterPerWattName       = '%smeter per %swatt';
  rsMeterPerWattPluralName = '%smeters per %swatts';

const
  cMeterPerWattPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerWattExponents : TExponents = (1, -1);

{ Quantity of TSquareRootMeters }

type
  TSquareRootMeters = TSquareRootMeterQty;

const
  rsSquareRootMeterSymbol     = '√%sm';
  rsSquareRootMeterName       = 'square root %smeter';
  rsSquareRootMeterPluralName = 'square root %smeters';

const
  cSquareRootMeterPrefixes  : TPrefixes  = (pNone);
  cSquareRootMeterExponents : TExponents = (1);

{ Quantity of TSquareMeterSteradians }

type
  TSquareMeterSteradians = TSquareMeterSteradianQty;

const
  rsSquareMeterSteradianSymbol     = '%sm2·sr';
  rsSquareMeterSteradianName       = 'square %smeter steradian';
  rsSquareMeterSteradianPluralName = 'square %smeter steradians';

const
  cSquareMeterSteradianPrefixes  : TPrefixes  = (pNone);
  cSquareMeterSteradianExponents : TExponents = (2);

{ Quantity of TNewtonCubicMeters }

type
  TNewtonCubicMeters = TNewtonCubicMeterQty;

const
  rsNewtonCubicMeterSymbol     = '%sN·%sm3';
  rsNewtonCubicMeterName       = '%snewton cubic %smeter';
  rsNewtonCubicMeterPluralName = '%snewton cubic %smeters';

const
  cNewtonCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonCubicMeterExponents : TExponents = (1, 3);

{ Quantity of TAmperesPerSquareMeter }

type
  TAmperesPerSquareMeter = TAmperePerSquareMeterQty;

const
  rsAmperePerSquareMeterSymbol     = '%sA/%sm2';
  rsAmperePerSquareMeterName       = '%sampere per square %smeter';
  rsAmperePerSquareMeterPluralName = '%samperes per square %smeter';

const
  cAmperePerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cAmperePerSquareMeterExponents : TExponents = (1, -2);

{ Quantity of THertz }

type
  THertz = THertzQty;

var
  Hz: THertzUnit;

const
  THz: THertzQty = (FValue: 1E+12);
  GHz: THertzQty = (FValue: 1E+09);
  MHz: THertzQty = (FValue: 1E+06);
  kHz: THertzQty = (FValue: 1E+03);

const
  rsHertzSymbol     = '%sHz';
  rsHertzName       = '%shertz';
  rsHertzPluralName = '%shertz';

const
  cHertzPrefixes  : TPrefixes  = (pNone);
  cHertzExponents : TExponents = (1);

{ Quantity of TMetersPerQuarticSecond }

type
  TMetersPerQuarticSecond = TMeterPerQuarticSecondQty;

const
  rsMeterPerQuarticSecondSymbol     = '%sm/%ss4';
  rsMeterPerQuarticSecondName       = '%smeter per quartic %ssecond';
  rsMeterPerQuarticSecondPluralName = '%smeters per quartic %ssecond';

const
  cMeterPerQuarticSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerQuarticSecondExponents : TExponents = (1, -4);

{ Quantity of TWattsPerMeterPerKelvin }

type
  TWattsPerMeterPerKelvin = TWattPerMeterPerKelvinQty;

const
  rsWattPerMeterPerKelvinSymbol     = '%sW/%sm/%sK';
  rsWattPerMeterPerKelvinName       = '%swatt per %smeter per %skelvin';
  rsWattPerMeterPerKelvinPluralName = '%swatts per %smeter per %skelvin';

const
  cWattPerMeterPerKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerMeterPerKelvinExponents : TExponents = (1, -1, -1);

{ Quantity of TKelvinsPerMeter }

type
  TKelvinsPerMeter = TKelvinPerMeterQty;

const
  rsKelvinPerMeterSymbol     = '%sK/%sm';
  rsKelvinPerMeterName       = '%skelvin per %smeter';
  rsKelvinPerMeterPluralName = '%skelvins per %smeter';

const
  cKelvinPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cKelvinPerMeterExponents : TExponents = (1, -1);

{ Quantity of TMetersPerCubicSecond }

type
  TMetersPerCubicSecond = TMeterPerCubicSecondQty;

const
  rsMeterPerCubicSecondSymbol     = '%sm/%ss3';
  rsMeterPerCubicSecondName       = '%smeter per cubic %ssecond';
  rsMeterPerCubicSecondPluralName = '%smeters per cubic %ssecond';

const
  cMeterPerCubicSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerCubicSecondExponents : TExponents = (1, -3);

{ Quantity of TSquareJouleSquareSeconds }

type
  TSquareJouleSquareSeconds = TSquareJouleSquareSecondQty;

const
  rsSquareJouleSquareSecondSymbol     = '%sJ2·%ss2';
  rsSquareJouleSquareSecondName       = 'square %sjoule square %ssecond';
  rsSquareJouleSquareSecondPluralName = 'square %sjoule square %sseconds';

const
  cSquareJouleSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareJouleSquareSecondExponents : TExponents = (2, 2);

{ Quantity of TSquareKilogramsPerSquareMeter }

type
  TSquareKilogramsPerSquareMeter = TSquareKilogramPerSquareMeterQty;

const
  rsSquareKilogramPerSquareMeterSymbol     = '%sg2/%sm2';
  rsSquareKilogramPerSquareMeterName       = 'square %sgram per square %smeter';
  rsSquareKilogramPerSquareMeterPluralName = 'square %sgrams per square %smeter';

const
  cSquareKilogramPerSquareMeterPrefixes  : TPrefixes  = (pKilo, pNone);
  cSquareKilogramPerSquareMeterExponents : TExponents = (2, -2);

{ Quantity of TMetersPerAmpere }

type
  TMetersPerAmpere = TMeterPerAmpereQty;

const
  rsMeterPerAmpereSymbol     = '%sm/%sA';
  rsMeterPerAmpereName       = '%smeter per %sampere';
  rsMeterPerAmperePluralName = '%smeters per %sampere';

const
  cMeterPerAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerAmpereExponents : TExponents = (1, -1);

{ Quantity of TKatals }

type
  TKatals = TKatalQty;

var
  kat: TKatalUnit;

const
  rsKatalSymbol     = '%skat';
  rsKatalName       = '%skatal';
  rsKatalPluralName = '%skatals';

const
  cKatalPrefixes  : TPrefixes  = (pNone);
  cKatalExponents : TExponents = (1);

{ Quantity of TSquareMeterQuarticKelvins }

type
  TSquareMeterQuarticKelvins = TSquareMeterQuarticKelvinQty;

const
  rsSquareMeterQuarticKelvinSymbol     = '%sm2·%sK4';
  rsSquareMeterQuarticKelvinName       = 'square %smeter quartic %skelvin';
  rsSquareMeterQuarticKelvinPluralName = 'square %smeter quartic %skelvins';

const
  cSquareMeterQuarticKelvinPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareMeterQuarticKelvinExponents : TExponents = (2, 4);

{ Quantity of TMolesPerCubicMeter }

type
  TMolesPerCubicMeter = TMolePerCubicMeterQty;

const
  rsMolePerCubicMeterSymbol     = '%smol/%sm3';
  rsMolePerCubicMeterName       = '%smole per cubic %smeter';
  rsMolePerCubicMeterPluralName = '%smoles per cubic %smeter';

const
  cMolePerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cMolePerCubicMeterExponents : TExponents = (1, -3);

{ Quantity of TSquareKilograms }

type
  TSquareKilograms = TSquareKilogramQty;

var
  kg2: TSquareKilogramUnit;

   hg2: TSquareKilogramQty = (FValue: 1E-02);
  dag2: TSquareKilogramQty = (FValue: 1E-04);
    g2: TSquareKilogramQty = (FValue: 1E-06);
   dg2: TSquareKilogramQty = (FValue: 1E-08);
   cg2: TSquareKilogramQty = (FValue: 1E-10);
   mg2: TSquareKilogramQty = (FValue: 1E-12);
  mig2: TSquareKilogramQty = (FValue: 1E-18);
   ng2: TSquareKilogramQty = (FValue: 1E-24);
   pg2: TSquareKilogramQty = (FValue: 1E-30);

const
  rsSquareKilogramSymbol     = '%sg2';
  rsSquareKilogramName       = 'square %sgram';
  rsSquareKilogramPluralName = 'square %sgrams';

const
  cSquareKilogramPrefixes  : TPrefixes  = (pKilo);
  cSquareKilogramExponents : TExponents = (2);

{ Quantity of TCubicMeters }

type
  TCubicMeters = TCubicMeterQty;

var
  m3: TCubicMeterUnit;

const
   km3: TCubicMeterQty = (FValue: 1E+09);
   dm3: TCubicMeterQty = (FValue: 1E-03);
   cm3: TCubicMeterQty = (FValue: 1E-06);
   mm3: TCubicMeterQty = (FValue: 1E-09);
  mim3: TCubicMeterQty = (FValue: 1E-18);
   nm3: TCubicMeterQty = (FValue: 1E-27);
   pm3: TCubicMeterQty = (FValue: 1E-36);

const
  rsCubicMeterSymbol     = '%sm3';
  rsCubicMeterName       = 'cubic %smeter';
  rsCubicMeterPluralName = 'cubic %smeters';

const
  cCubicMeterPrefixes  : TPrefixes  = (pNone);
  cCubicMeterExponents : TExponents = (3);

{ Quantity of TSquareAmperes }

type
  TSquareAmperes = TSquareAmpereQty;

var
  A2: TSquareAmpereUnit;

const
     kA2: TSquareAmpereQty = (FValue: 1E+06);
     hA2: TSquareAmpereQty = (FValue: 1E+04);
    daA2: TSquareAmpereQty = (FValue: 1E+02);
     dA2: TSquareAmpereQty = (FValue: 1E-02);
     cA2: TSquareAmpereQty = (FValue: 1E-04);
     mA2: TSquareAmpereQty = (FValue: 1E-06);
    miA2: TSquareAmpereQty = (FValue: 1E-12);
     nA2: TSquareAmpereQty = (FValue: 1E-18);
  picoA2: TSquareAmpereQty = (FValue: 1E-24);

const
  rsSquareAmpereSymbol     = '%sA2';
  rsSquareAmpereName       = 'square %sampere';
  rsSquareAmperePluralName = 'square %samperes';

const
  cSquareAmperePrefixes  : TPrefixes  = (pNone);
  cSquareAmpereExponents : TExponents = (2);

{ Quantity of TSeconds }

type
  TSeconds = TSecondQty;

var
  s: TSecondUnit;

const
   ds: TSecondQty = (FValue: 1E-01);
   cs: TSecondQty = (FValue: 1E-02);
   ms: TSecondQty = (FValue: 1E-03);
  mis: TSecondQty = (FValue: 1E-06);
   ns: TSecondQty = (FValue: 1E-09);
   ps: TSecondQty = (FValue: 1E-12);

const
  rsSecondSymbol     = '%ss';
  rsSecondName       = '%ssecond';
  rsSecondPluralName = '%sseconds';

const
  cSecondPrefixes  : TPrefixes  = (pNone);
  cSecondExponents : TExponents = (1);

{ Quantity of TReciprocalKelvins }

type
  TReciprocalKelvins = TReciprocalKelvinQty;

const
  rsReciprocalKelvinSymbol     = '1/%sK';
  rsReciprocalKelvinName       = 'reciprocal %skelvin';
  rsReciprocalKelvinPluralName = 'reciprocal %skelvin';

const
  cReciprocalKelvinPrefixes  : TPrefixes  = (pNone);
  cReciprocalKelvinExponents : TExponents = (-1);

{ Quantity of TReciprocalHenries }

type
  TReciprocalHenries = TReciprocalHenryQty;

const
  rsReciprocalHenrySymbol     = '1/%sH';
  rsReciprocalHenryName       = 'reciprocal %shenry';
  rsReciprocalHenryPluralName = 'reciprocal %shenries';

const
  cReciprocalHenryPrefixes  : TPrefixes  = (pNone);
  cReciprocalHenryExponents : TExponents = (-1);

{ Quantity of TQuinticMeters }

type
  TQuinticMeters = TQuinticMeterQty;

var
  m5: TQuinticMeterUnit;

const
   km5: TQuinticMeterQty = (FValue: 1E+15);
   dm5: TQuinticMeterQty = (FValue: 1E-05);
   cm5: TQuinticMeterQty = (FValue: 1E-10);
   mm5: TQuinticMeterQty = (FValue: 1E-15);
  mim5: TQuinticMeterQty = (FValue: 1E-30);
   nm5: TQuinticMeterQty = (FValue: 1E-45);
   pm5: TQuinticMeterQty = (FValue: 1E-60);

const
  rsQuinticMeterSymbol     = '%sm5';
  rsQuinticMeterName       = 'quintic %smeter';
  rsQuinticMeterPluralName = 'quintic %smeters';

const
  cQuinticMeterPrefixes  : TPrefixes  = (pNone);
  cQuinticMeterExponents : TExponents = (5);

{ Quantity of TMetersPerQuinticSecond }

type
  TMetersPerQuinticSecond = TMeterPerQuinticSecondQty;

const
  rsMeterPerQuinticSecondSymbol     = '%sm/%ss5';
  rsMeterPerQuinticSecondName       = '%smeter per quintic %ssecond';
  rsMeterPerQuinticSecondPluralName = '%smeters per quintic %ssecond';

const
  cMeterPerQuinticSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerQuinticSecondExponents : TExponents = (1, -5);

{ Quantity of TMetersPerSexticSecond }

type
  TMetersPerSexticSecond = TMeterPerSexticSecondQty;

const
  rsMeterPerSexticSecondSymbol     = '%sm/%ss6';
  rsMeterPerSexticSecondName       = '%smeter per sextic %ssecond';
  rsMeterPerSexticSecondPluralName = '%smeters per sextic %ssecond';

const
  cMeterPerSexticSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerSexticSecondExponents : TExponents = (1, -6);

{ Quantity of TLux }

type
  TLux = TLuxQty;

var
  lx: TLuxUnit;

const
  rsLuxSymbol     = '%slx';
  rsLuxName       = '%slux';
  rsLuxPluralName = '%slux';

const
  cLuxPrefixes  : TPrefixes  = (pNone);
  cLuxExponents : TExponents = (1);

{ Quantity of TWattsPerMeterPerSteradian }

type
  TWattsPerMeterPerSteradian = TWattPerMeterPerSteradianQty;

const
  rsWattPerMeterPerSteradianSymbol     = '%sW/sr/%sm';
  rsWattPerMeterPerSteradianName       = '%swatt per steradian per %smeter';
  rsWattPerMeterPerSteradianPluralName = '%swatts per steradian per %smeter';

const
  cWattPerMeterPerSteradianPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerMeterPerSteradianExponents : TExponents = (1, -1);

{ Quantity of TNewtonSquareMetersPerSquareCoulomb }

type
  TNewtonSquareMetersPerSquareCoulomb = TNewtonSquareMeterPerSquareCoulombQty;

const
  rsNewtonSquareMeterPerSquareCoulombSymbol     = '%sN·%sm2/%sC2';
  rsNewtonSquareMeterPerSquareCoulombName       = '%snewton square %smeter per square %scoulomb';
  rsNewtonSquareMeterPerSquareCoulombPluralName = '%snewton square %smeters per square %scoulomb';

const
  cNewtonSquareMeterPerSquareCoulombPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cNewtonSquareMeterPerSquareCoulombExponents : TExponents = (1, 2, -2);

{ Quantity of TMeterSeconds }

type
  TMeterSeconds = TMeterSecondQty;

const
  rsMeterSecondSymbol     = '%sm·%ss';
  rsMeterSecondName       = '%smeter %ssecond';
  rsMeterSecondPluralName = '%smeter %sseconds';

const
  cMeterSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterSecondExponents : TExponents = (1, 1);

{ Quantity of TLumenSecondsPerCubicMeter }

type
  TLumenSecondsPerCubicMeter = TLumenSecondPerCubicMeterQty;

const
  rsLumenSecondPerCubicMeterSymbol     = '%slm·%ss/%sm3';
  rsLumenSecondPerCubicMeterName       = '%slumen %ssecond per cubic meter';
  rsLumenSecondPerCubicMeterPluralName = '%slumen %sseconds per cubic meter';

const
  cLumenSecondPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cLumenSecondPerCubicMeterExponents : TExponents = (1, 1, -3);

{ Quantity of TKatalsPerCubicMeter }

type
  TKatalsPerCubicMeter = TKatalPerCubicMeterQty;

const
  rsKatalPerCubicMeterSymbol     = '%skat/%sm3';
  rsKatalPerCubicMeterName       = '%skatal per cubic %smeter';
  rsKatalPerCubicMeterPluralName = '%skatals per cubic %smeter';

const
  cKatalPerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cKatalPerCubicMeterExponents : TExponents = (1, -3);

{ Quantity of TSexticMeters }

type
  TSexticMeters = TSexticMeterQty;

var
  m6: TSexticMeterUnit;

const
   km6: TSexticMeterQty = (FValue: 1E+18);
   dm6: TSexticMeterQty = (FValue: 1E-06);
   cm6: TSexticMeterQty = (FValue: 1E-12);
   mm6: TSexticMeterQty = (FValue: 1E-18);
  mim6: TSexticMeterQty = (FValue: 1E-36);
   nm6: TSexticMeterQty = (FValue: 1E-54);
   pm6: TSexticMeterQty = (FValue: 1E-72);

const
  rsSexticMeterSymbol     = '%sm6';
  rsSexticMeterName       = 'sextic %smeter';
  rsSexticMeterPluralName = 'sextic %smeters';

const
  cSexticMeterPrefixes  : TPrefixes  = (pNone);
  cSexticMeterExponents : TExponents = (6);

{ Quantity of TKelvinsPerWatt }

type
  TKelvinsPerWatt = TKelvinPerWattQty;

const
  rsKelvinPerWattSymbol     = '%sK/%sW';
  rsKelvinPerWattName       = '%skelvin per %swatt';
  rsKelvinPerWattPluralName = '%skelvins per %swatt';

const
  cKelvinPerWattPrefixes  : TPrefixes  = (pNone, pNone);
  cKelvinPerWattExponents : TExponents = (1, -1);

{ Quantity of TSecondsPerMeter }

type
  TSecondsPerMeter = TSecondPerMeterQty;

const
  rsSecondPerMeterSymbol     = '%ss/%sm';
  rsSecondPerMeterName       = '%ssecond per %smeter';
  rsSecondPerMeterPluralName = '%sseconds per %smeter';

const
  cSecondPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cSecondPerMeterExponents : TExponents = (1, -1);

{ Quantity of TCandelasPerSquareMeter }

type
  TCandelasPerSquareMeter = TCandelaPerSquareMeterQty;

const
  rsCandelaPerSquareMeterSymbol     = '%scd/%sm2';
  rsCandelaPerSquareMeterName       = '%scandela per square %smeter';
  rsCandelaPerSquareMeterPluralName = '%scandelas per square %smeter';

const
  cCandelaPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cCandelaPerSquareMeterExponents : TExponents = (1, -2);

{ Quantity of TCoulombsPerMole }

type
  TCoulombsPerMole = TCoulombPerMoleQty;

const
  rsCoulombPerMoleSymbol     = '%sC/%smol';
  rsCoulombPerMoleName       = '%scoulomb per %smole';
  rsCoulombPerMolePluralName = '%scoulombs per %smole';

const
  cCoulombPerMolePrefixes  : TPrefixes  = (pNone, pNone);
  cCoulombPerMoleExponents : TExponents = (1, -1);

{ Quantity of TDays }

type
  TDays = TSecondQty;

const
  day: TSecondQty = (FValue: 86400);

const
  rsDaySymbol     = 'd';
  rsDayName       = 'day';
  rsDayPluralName = 'days';

const
  cDayPrefixes  : TPrefixes  = ();
  cDayExponents : TExponents = ();
  cDayFactor                 = 86400;

{ Quantity of THours }

type
  THours = TSecondQty;

const
  hr: TSecondQty = (FValue: 3600);

const
  rsHourSymbol     = 'h';
  rsHourName       = 'hour';
  rsHourPluralName = 'hours';

const
  cHourPrefixes  : TPrefixes  = ();
  cHourExponents : TExponents = ();
  cHourFactor                 = 3600;

{ Quantity of TMinutes }

type
  TMinutes = TSecondQty;

const
  minute: TSecondQty = (FValue: 60);

const
  rsMinuteSymbol     = 'min';
  rsMinuteName       = 'minute';
  rsMinutePluralName = 'minutes';

const
  cMinutePrefixes  : TPrefixes  = ();
  cMinuteExponents : TExponents = ();
  cMinuteFactor                 = 60;

{ Quantity of TSquareDays }

type
  TSquareDays = TSquareSecondQty;

const
  day2: TSquareSecondQty = (FValue: 7464960000);

const
  rsSquareDaySymbol     = 'd2';
  rsSquareDayName       = 'square day';
  rsSquareDayPluralName = 'square days';

const
  cSquareDayPrefixes  : TPrefixes  = ();
  cSquareDayExponents : TExponents = ();
  cSquareDayFactor                 = 7464960000;

{ Quantity of TSquareHours }

type
  TSquareHours = TSquareSecondQty;

const
  hr2: TSquareSecondQty = (FValue: 12960000);

const
  rsSquareHourSymbol     = 'h2';
  rsSquareHourName       = 'square hour';
  rsSquareHourPluralName = 'square hours';

const
  cSquareHourPrefixes  : TPrefixes  = ();
  cSquareHourExponents : TExponents = ();
  cSquareHourFactor                 = 12960000;

{ Quantity of TSquareMinutes }

type
  TSquareMinutes = TSquareSecondQty;

const
  minute2: TSquareSecondQty = (FValue: 3600);

const
  rsSquareMinuteSymbol     = 'min2';
  rsSquareMinuteName       = 'square minute';
  rsSquareMinutePluralName = 'square minutes';

const
  cSquareMinutePrefixes  : TPrefixes  = ();
  cSquareMinuteExponents : TExponents = ();
  cSquareMinuteFactor                 = 3600;

{ Quantity of TAstronomical }

type
  TAstronomical = TMeterQty;

const
  au: TMeterQty = (FValue: 149597870691);

const
  rsAstronomicalSymbol     = 'au';
  rsAstronomicalName       = 'astronomical unit';
  rsAstronomicalPluralName = 'astronomical units';

const
  cAstronomicalPrefixes  : TPrefixes  = ();
  cAstronomicalExponents : TExponents = ();
  cAstronomicalFactor                 = 149597870691;

{ Quantity of TInches }

type
  TInches = TMeterQty;

const
  inch: TMeterQty = (FValue: 0.0254);

const
  rsInchSymbol     = 'in';
  rsInchName       = 'inch';
  rsInchPluralName = 'inches';

const
  cInchPrefixes  : TPrefixes  = ();
  cInchExponents : TExponents = ();
  cInchFactor                 = 0.0254;

{ Quantity of TFeet }

type
  TFeet = TMeterQty;

const
  ft: TMeterQty = (FValue: 0.3048);

const
  rsFootSymbol     = 'ft';
  rsFootName       = 'foot';
  rsFootPluralName = 'feet';

const
  cFootPrefixes  : TPrefixes  = ();
  cFootExponents : TExponents = ();
  cFootFactor                 = 0.3048;

{ Quantity of TYards }

type
  TYards = TMeterQty;

const
  yd: TMeterQty = (FValue: 0.9144);

const
  rsYardSymbol     = 'yd';
  rsYardName       = 'yard';
  rsYardPluralName = 'yards';

const
  cYardPrefixes  : TPrefixes  = ();
  cYardExponents : TExponents = ();
  cYardFactor                 = 0.9144;

{ Quantity of TMiles }

type
  TMiles = TMeterQty;

const
  mi: TMeterQty = (FValue: 1609.344);

const
  rsMileSymbol     = 'mi';
  rsMileName       = 'mile';
  rsMilePluralName = 'miles';

const
  cMilePrefixes  : TPrefixes  = ();
  cMileExponents : TExponents = ();
  cMileFactor                 = 1609.344;

{ Quantity of TNauticalMiles }

type
  TNauticalMiles = TMeterQty;

const
  nmi: TMeterQty = (FValue: 1852);

const
  rsNauticalMileSymbol     = 'nmi';
  rsNauticalMileName       = 'nautical mile';
  rsNauticalMilePluralName = 'nautical miles';

const
  cNauticalMilePrefixes  : TPrefixes  = ();
  cNauticalMileExponents : TExponents = ();
  cNauticalMileFactor                 = 1852;

{ Quantity of TAngstroms }

type
  TAngstroms = TMeterQty;

const
  angstrom: TMeterQty = (FValue: 1E-10);

const
  rsAngstromSymbol     = '%sÅ';
  rsAngstromName       = '%sangstrom';
  rsAngstromPluralName = '%sangstroms';

const
  cAngstromPrefixes  : TPrefixes  = (pNone);
  cAngstromExponents : TExponents = (1);
  cAngstromFactor                 = 1E-10;

{ Quantity of TSquareInches }

type
  TSquareInches = TSquareMeterQty;

const
  inch2: TSquareMeterQty = (FValue: 0.00064516);

const
  rsSquareInchSymbol     = 'in2';
  rsSquareInchName       = 'square inch';
  rsSquareInchPluralName = 'square inches';

const
  cSquareInchPrefixes  : TPrefixes  = ();
  cSquareInchExponents : TExponents = ();
  cSquareInchFactor                 = 0.00064516;

{ Quantity of TSquareFeet }

type
  TSquareFeet = TSquareMeterQty;

const
  ft2: TSquareMeterQty = (FValue: 0.09290304);

const
  rsSquareFootSymbol     = 'ft2';
  rsSquareFootName       = 'square foot';
  rsSquareFootPluralName = 'square feet';

const
  cSquareFootPrefixes  : TPrefixes  = ();
  cSquareFootExponents : TExponents = ();
  cSquareFootFactor                 = 0.09290304;

{ Quantity of TSquareYards }

type
  TSquareYards = TSquareMeterQty;

const
  yd2: TSquareMeterQty = (FValue: 0.83612736);

const
  rsSquareYardSymbol     = 'yd2';
  rsSquareYardName       = 'square yard';
  rsSquareYardPluralName = 'square yards';

const
  cSquareYardPrefixes  : TPrefixes  = ();
  cSquareYardExponents : TExponents = ();
  cSquareYardFactor                 = 0.83612736;

{ Quantity of TSquareMiles }

type
  TSquareMiles = TSquareMeterQty;

const
  mi2: TSquareMeterQty = (FValue: 2589988.110336);

const
  rsSquareMileSymbol     = 'mi2';
  rsSquareMileName       = 'square mile';
  rsSquareMilePluralName = 'square miles';

const
  cSquareMilePrefixes  : TPrefixes  = ();
  cSquareMileExponents : TExponents = ();
  cSquareMileFactor                 = 2589988.110336;

{ Quantity of TCubicInches }

type
  TCubicInches = TCubicMeterQty;

const
  inch3: TCubicMeterQty = (FValue: 0.000016387064);

const
  rsCubicInchSymbol     = 'in3';
  rsCubicInchName       = 'cubic inch';
  rsCubicInchPluralName = 'cubic inches';

const
  cCubicInchPrefixes  : TPrefixes  = ();
  cCubicInchExponents : TExponents = ();
  cCubicInchFactor                 = 0.000016387064;

{ Quantity of TCubicFeet }

type
  TCubicFeet = TCubicMeterQty;

const
  ft3: TCubicMeterQty = (FValue: 0.028316846592);

const
  rsCubicFootSymbol     = 'ft3';
  rsCubicFootName       = 'cubic foot';
  rsCubicFootPluralName = 'cubic feet';

const
  cCubicFootPrefixes  : TPrefixes  = ();
  cCubicFootExponents : TExponents = ();
  cCubicFootFactor                 = 0.028316846592;

{ Quantity of TCubicYards }

type
  TCubicYards = TCubicMeterQty;

const
  yd3: TCubicMeterQty = (FValue: 0.764554857984);

const
  rsCubicYardSymbol     = 'yd3';
  rsCubicYardName       = 'cubic yard';
  rsCubicYardPluralName = 'cubic yards';

const
  cCubicYardPrefixes  : TPrefixes  = ();
  cCubicYardExponents : TExponents = ();
  cCubicYardFactor                 = 0.764554857984;

{ Quantity of TLitres }

type
  TLitres = TCubicMeterQty;

const
  L: TCubicMeterQty = (FValue: 1E-03);

const
  dL: TCubicMeterQty = (FValue: 1E-03 * 1E-01);
  cL: TCubicMeterQty = (FValue: 1E-03 * 1E-02);
  mL: TCubicMeterQty = (FValue: 1E-03 * 1E-03);

const
  rsLitreSymbol     = '%sL';
  rsLitreName       = '%slitre';
  rsLitrePluralName = '%slitres';

const
  cLitrePrefixes  : TPrefixes  = (pNone);
  cLitreExponents : TExponents = (1);
  cLitreFactor                 = 1E-03;

{ Quantity of TGallons }

type
  TGallons = TCubicMeterQty;

const
  gal: TCubicMeterQty = (FValue: 0.0037854119678);

const
  rsGallonSymbol     = 'gal';
  rsGallonName       = 'gallon';
  rsGallonPluralName = 'gallons';

const
  cGallonPrefixes  : TPrefixes  = ();
  cGallonExponents : TExponents = ();
  cGallonFactor                 = 0.0037854119678;

{ Quantity of TTonnes }

type
  TTonnes = TKilogramQty;

const
  tonne: TKilogramQty = (FValue: 1E+03);

const
  gigatonne: TKilogramQty = (FValue: 1E+03 * 1E+09);
  megatonne: TKilogramQty = (FValue: 1E+03 * 1E+06);
  kilotonne: TKilogramQty = (FValue: 1E+03 * 1E+03);

const
  rsTonneSymbol     = '%st';
  rsTonneName       = '%stonne';
  rsTonnePluralName = '%stonnes';

const
  cTonnePrefixes  : TPrefixes  = (pNone);
  cTonneExponents : TExponents = (1);
  cTonneFactor                 = 1E+03;

{ Quantity of TPounds }

type
  TPounds = TKilogramQty;

const
  lb: TKilogramQty = (FValue: 0.45359237);

const
  rsPoundSymbol     = 'lb';
  rsPoundName       = 'pound';
  rsPoundPluralName = 'pounds';

const
  cPoundPrefixes  : TPrefixes  = ();
  cPoundExponents : TExponents = ();
  cPoundFactor                 = 0.45359237;

{ Quantity of TOunces }

type
  TOunces = TKilogramQty;

const
  oz: TKilogramQty = (FValue: 0.028349523125);

const
  rsOunceSymbol     = 'oz';
  rsOunceName       = 'ounce';
  rsOuncePluralName = 'ounces';

const
  cOuncePrefixes  : TPrefixes  = ();
  cOunceExponents : TExponents = ();
  cOunceFactor                 = 0.028349523125;

{ Quantity of TStones }

type
  TStones = TKilogramQty;

const
  st: TKilogramQty = (FValue: 6.35029318);

const
  rsStoneSymbol     = 'st';
  rsStoneName       = 'stone';
  rsStonePluralName = 'stones';

const
  cStonePrefixes  : TPrefixes  = ();
  cStoneExponents : TExponents = ();
  cStoneFactor                 = 6.35029318;

{ Quantity of TTons }

type
  TTons = TKilogramQty;

const
  ton: TKilogramQty = (FValue: 907.18474);

const
  rsTonSymbol     = 'ton';
  rsTonName       = 'ton';
  rsTonPluralName = 'tons';

const
  cTonPrefixes  : TPrefixes  = ();
  cTonExponents : TExponents = ();
  cTonFactor                 = 907.18474;

{ Quantity of TElectronvoltsPerSquareSpeedOfLight }

type
  TElectronvoltsPerSquareSpeedOfLight = TKilogramQty;

const
  rsElectronvoltPerSquareSpeedOfLightSymbol     = '%seV/c2';
  rsElectronvoltPerSquareSpeedOfLightName       = '%selectronvolt per squared speed of light';
  rsElectronvoltPerSquareSpeedOfLightPluralName = '%selectronvolts per squared speed of light';

const
  cElectronvoltPerSquareSpeedOfLightPrefixes  : TPrefixes  = (pNone);
  cElectronvoltPerSquareSpeedOfLightExponents : TExponents = (1);
  cElectronvoltPerSquareSpeedOfLightFactor                 = 1.7826619216279E-36;

{ Quantity of TDegreesCelsius }

type
  TDegreesCelsius = TKelvinQty;

var
  degC: TDegreeCelsiusUnit;

const
  rsDegreeCelsiusSymbol     = 'ºC';
  rsDegreeCelsiusName       = 'degree Celsius';
  rsDegreeCelsiusPluralName = 'degrees Celsius';

const
  cDegreeCelsiusPrefixes  : TPrefixes  = ();
  cDegreeCelsiusExponents : TExponents = ();

{ Quantity of TDegreesFahrenheit }

type
  TDegreesFahrenheit = TKelvinQty;

var
  degF: TDegreeFahrenheitUnit;

const
  rsDegreeFahrenheitSymbol     = 'ºF';
  rsDegreeFahrenheitName       = 'degree Fahrenheit';
  rsDegreeFahrenheitPluralName = 'degrees Fahrenheit';

const
  cDegreeFahrenheitPrefixes  : TPrefixes  = ();
  cDegreeFahrenheitExponents : TExponents = ();

{ Quantity of TDegrees }

type
  TDegrees = TRadianQty;

const
  deg: TRadianQty = (FValue: Pi/180);

const
  rsDegreeSymbol     = 'deg';
  rsDegreeName       = 'degree';
  rsDegreePluralName = 'degrees';

const
  cDegreePrefixes  : TPrefixes  = ();
  cDegreeExponents : TExponents = ();
  cDegreeFactor                 = Pi/180;

{ Quantity of TSquareDegrees }

type
  TSquareDegrees = TSteradianQty;

const
  deg2: TSteradianQty = (FValue: Pi*Pi/32400);

const
  rsSquareDegreeSymbol     = 'deg2';
  rsSquareDegreeName       = 'square degree';
  rsSquareDegreePluralName = 'square degrees';

const
  cSquareDegreePrefixes  : TPrefixes  = ();
  cSquareDegreeExponents : TExponents = ();
  cSquareDegreeFactor                 = Pi*Pi/32400;

{ Quantity of TReciprocalSeconds }

type
  TReciprocalSeconds = THertzQty;

const
  rsReciprocalSecondSymbol     = '1/%ss';
  rsReciprocalSecondName       = 'reciprocal %ssecond';
  rsReciprocalSecondPluralName = 'reciprocal %sseconds';

const
  cReciprocalSecondPrefixes  : TPrefixes  = (pNone);
  cReciprocalSecondExponents : TExponents = (-1);

{ Quantity of TRadiansPerSecond }

type
  TRadiansPerSecond = THertzQty;

const
  rsRadianPerSecondSymbol     = 'rad/%ss';
  rsRadianPerSecondName       = 'radian per %ssecond';
  rsRadianPerSecondPluralName = 'radians per %ssecond';

const
  cRadianPerSecondPrefixes  : TPrefixes  = (pNone);
  cRadianPerSecondExponents : TExponents = (-1);

{ Quantity of TReciprocalSquareSeconds }

type
  TReciprocalSquareSeconds = TSquareHertzQty;

const
  rsReciprocalSquareSecondSymbol     = '1/%ss2';
  rsReciprocalSquareSecondName       = 'reciprocal square %ssecond';
  rsReciprocalSquareSecondPluralName = 'reciprocal square %sseconds';

const
  cReciprocalSquareSecondPrefixes  : TPrefixes  = (pNone);
  cReciprocalSquareSecondExponents : TExponents = (-2);

{ Quantity of TRadiansPerSquareSecond }

type
  TRadiansPerSquareSecond = TSquareHertzQty;

const
  rsRadianPerSquareSecondSymbol     = 'rad/%ss2';
  rsRadianPerSquareSecondName       = 'radian per square %ssecond';
  rsRadianPerSquareSecondPluralName = 'radians per square %ssecond';

const
  cRadianPerSquareSecondPrefixes  : TPrefixes  = (pNone);
  cRadianPerSquareSecondExponents : TExponents = (-2);

{ Quantity of TMetersPerHour }

type
  TMetersPerHour = TMeterPerSecondQty;

const
  rsMeterPerHourSymbol     = '%sm/h';
  rsMeterPerHourName       = '%smeter per hour';
  rsMeterPerHourPluralName = '%smeters per hour';

const
  cMeterPerHourPrefixes  : TPrefixes  = (pNone);
  cMeterPerHourExponents : TExponents = (1);
  cMeterPerHourFactor                 = 1/3600;

{ Quantity of TMilesPerHour }

type
  TMilesPerHour = TMeterPerSecondQty;

const
  rsMilePerHourSymbol     = 'mi/h';
  rsMilePerHourName       = 'mile per hour';
  rsMilePerHourPluralName = 'miles per hour';

const
  cMilePerHourPrefixes  : TPrefixes  = ();
  cMilePerHourExponents : TExponents = ();
  cMilePerHourFactor                 = 0.44704;

{ Quantity of TNauticalMilesPerHour }

type
  TNauticalMilesPerHour = TMeterPerSecondQty;

const
  rsNauticalMilePerHourSymbol     = 'nmi/h';
  rsNauticalMilePerHourName       = 'nautical mile per hour';
  rsNauticalMilePerHourPluralName = 'nautical miles per hour';

const
  cNauticalMilePerHourPrefixes  : TPrefixes  = ();
  cNauticalMilePerHourExponents : TExponents = ();
  cNauticalMilePerHourFactor                 = 463/900;

{ Quantity of TMetersPerSecondPerSecond }

type
  TMetersPerSecondPerSecond = TMeterPerSquareSecondQty;

const
  rsMeterPerSecondPerSecondSymbol     = '%sm/%ss/%ss';
  rsMeterPerSecondPerSecondName       = '%smeter per %ssecond per %ssecond';
  rsMeterPerSecondPerSecondPluralName = '%smeters per %ssecond per %ssecond';

const
  cMeterPerSecondPerSecondPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cMeterPerSecondPerSecondExponents : TExponents = (1, -1, -1);

{ Quantity of TMetersPerHourPerSecond }

type
  TMetersPerHourPerSecond = TMeterPerSquareSecondQty;

const
  rsMeterPerHourPerSecondSymbol     = '%sm/h/%ss';
  rsMeterPerHourPerSecondName       = '%smeter per hour per %ssecond';
  rsMeterPerHourPerSecondPluralName = '%smeters per hour per %ssecond';

const
  cMeterPerHourPerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMeterPerHourPerSecondExponents : TExponents = (1, -1);
  cMeterPerHourPerSecondFactor                 = 1/3600;

{ Quantity of TJoulesPerKilogram }

type
  TJoulesPerKilogram = TSquareMeterPerSquareSecondQty;

const
  rsJoulePerKilogramSymbol     = '%sJ/%sg';
  rsJoulePerKilogramName       = '%sjoule per %sgram';
  rsJoulePerKilogramPluralName = '%sjoules per %sgram';

const
  cJoulePerKilogramPrefixes  : TPrefixes  = (pNone, pKilo);
  cJoulePerKilogramExponents : TExponents = (1, -1);

{ Quantity of TGrays }

type
  TGrays = TSquareMeterPerSquareSecondQty;

var
  Gy: TSquareMeterPerSquareSecondUnit;

const
   kGy: TSquareMeterPerSquareSecondQty = (FValue: 1E+03);
   mGy: TSquareMeterPerSquareSecondQty = (FValue: 1E-03);
  miGy: TSquareMeterPerSquareSecondQty = (FValue: 1E-06);
   nGy: TSquareMeterPerSquareSecondQty = (FValue: 1E-09);

const
  rsGraySymbol     = '%sGy';
  rsGrayName       = '%sgray';
  rsGrayPluralName = '%sgrays';

const
  cGrayPrefixes  : TPrefixes  = (pNone);
  cGrayExponents : TExponents = (1);

{ Quantity of TSieverts }

type
  TSieverts = TSquareMeterPerSquareSecondQty;

var
  Sv: TSquareMeterPerSquareSecondUnit;

const
   kSv: TSquareMeterPerSquareSecondQty = (FValue: 1E+03);
   mSv: TSquareMeterPerSquareSecondQty = (FValue: 1E-03);
  miSv: TSquareMeterPerSquareSecondQty = (FValue: 1E-06);
   nSv: TSquareMeterPerSquareSecondQty = (FValue: 1E-09);

const
  rsSievertSymbol     = '%sSv';
  rsSievertName       = '%ssievert';
  rsSievertPluralName = '%ssieverts';

const
  cSievertPrefixes  : TPrefixes  = (pNone);
  cSievertExponents : TExponents = (1);

{ Quantity of TJoulesPerSquareMeterPerHertz }

type
  TJoulesPerSquareMeterPerHertz = TKilogramPerSecondQty;

const
  rsJoulePerSquareMeterPerHertzSymbol     = '%sJ/%sm2/%sHz';
  rsJoulePerSquareMeterPerHertzName       = '%sjoule per square %smeter per %shertz';
  rsJoulePerSquareMeterPerHertzPluralName = '%sjoules per square %smeter per %shertz';

const
  cJoulePerSquareMeterPerHertzPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cJoulePerSquareMeterPerHertzExponents : TExponents = (1, -2, -1);

{ Quantity of TNewtonSeconds }

type
  TNewtonSeconds = TKilogramMeterPerSecondQty;

const
  rsNewtonSecondSymbol     = '%sN·%ss';
  rsNewtonSecondName       = '%snewton %ssecond';
  rsNewtonSecondPluralName = '%snewton %sseconds';

const
  cNewtonSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonSecondExponents : TExponents = (1, 1);

{ Quantity of TDioptres }

type
  TDioptres = TReciprocalMeterQty;

const
  rsDioptreSymbol     = 'dpt';
  rsDioptreName       = '%sdioptre';
  rsDioptrePluralName = '%sdioptres';

const
  cDioptrePrefixes  : TPrefixes  = ();
  cDioptreExponents : TExponents = ();

{ Quantity of TNewtonMeterSeconds }

type
  TNewtonMeterSeconds = TKilogramSquareMeterPerSecondQty;

const
  rsNewtonMeterSecondSymbol     = '%sN·%sm·%ss';
  rsNewtonMeterSecondName       = '%snewton %smeter %ssecond';
  rsNewtonMeterSecondPluralName = '%snewton %smeter %sseconds';

const
  cNewtonMeterSecondPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cNewtonMeterSecondExponents : TExponents = (1, 1, 1);

{ Quantity of TPoundsPerCubicInch }

type
  TPoundsPerCubicInch = TKilogramPerCubicMeterQty;

const
  rsPoundPerCubicInchSymbol     = 'lb/in3';
  rsPoundPerCubicInchName       = 'pound per cubic inch';
  rsPoundPerCubicInchPluralName = 'pounds per cubic inch';

const
  cPoundPerCubicInchPrefixes  : TPrefixes  = ();
  cPoundPerCubicInchExponents : TExponents = ();
  cPoundPerCubicInchFactor                 = 27679.9047102031;

{ Quantity of TPoundsForce }

type
  TPoundsForce = TNewtonQty;

const
  lbf: TNewtonQty = (FValue: 4.4482216152605);

const
  rsPoundForceSymbol     = 'lbf';
  rsPoundForceName       = 'pound-force';
  rsPoundForcePluralName = 'pounds-force';

const
  cPoundForcePrefixes  : TPrefixes  = ();
  cPoundForceExponents : TExponents = ();
  cPoundForceFactor                 = 4.4482216152605;

{ Quantity of TKilogramMetersPerSquareSecond }

type
  TKilogramMetersPerSquareSecond = TNewtonQty;

const
  rsKilogramMeterPerSquareSecondSymbol     = '%sg·%sm/%ss2';
  rsKilogramMeterPerSquareSecondName       = '%sgram %smeter per square %ssecond';
  rsKilogramMeterPerSquareSecondPluralName = '%sgram %smeters per square %ssecond';

const
  cKilogramMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramMeterPerSquareSecondExponents : TExponents = (1, 1, -2);

{ Quantity of TSquareKilogramSquareMetersPerQuarticSecond }

type
  TSquareKilogramSquareMetersPerQuarticSecond = TSquareNewtonQty;

const
  rsSquareKilogramSquareMeterPerQuarticSecondSymbol     = '%sg2·%sm2/%ss4';
  rsSquareKilogramSquareMeterPerQuarticSecondName       = 'square %sgram square %smeter per quartic %ssecond';
  rsSquareKilogramSquareMeterPerQuarticSecondPluralName = 'square %sgram square %smeters per quartic %ssecond';

const
  cSquareKilogramSquareMeterPerQuarticSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cSquareKilogramSquareMeterPerQuarticSecondExponents : TExponents = (2, 2, -4);

{ Quantity of TNewtonsPerSquareMeter }

type
  TNewtonsPerSquareMeter = TPascalQty;

const
  rsNewtonPerSquareMeterSymbol     = '%sN/%sm2';
  rsNewtonPerSquareMeterName       = '%snewton per square %smeter';
  rsNewtonPerSquareMeterPluralName = '%snewtons per square %smeter';

const
  cNewtonPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerSquareMeterExponents : TExponents = (1, -2);

{ Quantity of TBars }

type
  TBars = TPascalQty;

const
  bar: TPascalQty = (FValue: 1E+05);

const
  kbar: TPascalQty = (FValue: 1E+05 * 1E+03);
  mbar: TPascalQty = (FValue: 1E+05 * 1E-03);

const
  rsBarSymbol     = '%sbar';
  rsBarName       = '%sbar';
  rsBarPluralName = '%sbars';

const
  cBarPrefixes  : TPrefixes  = (pNone);
  cBarExponents : TExponents = (1);
  cBarFactor                 = 1E+05;

{ Quantity of TPoundsPerSquareInch }

type
  TPoundsPerSquareInch = TPascalQty;

const
  psi: TPascalQty = (FValue: 6894.75729316836);

const
  kpsi: TPascalQty = (FValue: 6894.75729316836 * 1E+03);

const
  rsPoundPerSquareInchSymbol     = '%spsi';
  rsPoundPerSquareInchName       = '%spound per square inch';
  rsPoundPerSquareInchPluralName = '%spounds per square inch';

const
  cPoundPerSquareInchPrefixes  : TPrefixes  = (pNone);
  cPoundPerSquareInchExponents : TExponents = (1);
  cPoundPerSquareInchFactor                 = 6894.75729316836;

{ Quantity of TJoulesPerCubicMeter }

type
  TJoulesPerCubicMeter = TPascalQty;

const
  rsJoulePerCubicMeterSymbol     = '%sJ/%sm3';
  rsJoulePerCubicMeterName       = '%sjoule per cubic %smeter';
  rsJoulePerCubicMeterPluralName = '%sjoules per cubic %smeter';

const
  cJoulePerCubicMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerCubicMeterExponents : TExponents = (1, -3);

{ Quantity of TKilogramsPerMeterPerSquareSecond }

type
  TKilogramsPerMeterPerSquareSecond = TPascalQty;

const
  rsKilogramPerMeterPerSquareSecondSymbol     = '%sg/%sm/%ss2';
  rsKilogramPerMeterPerSquareSecondName       = '%sgram per %smeter per square %ssecond';
  rsKilogramPerMeterPerSquareSecondPluralName = '%sgrams per %smeter per square %ssecond';

const
  cKilogramPerMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerMeterPerSquareSecondExponents : TExponents = (1, -1, -2);

{ Quantity of TWattHours }

type
  TWattHours = TJouleQty;

const
  rsWattHourSymbol     = '%sW·h';
  rsWattHourName       = '%swatt hour';
  rsWattHourPluralName = '%swatt hours';

const
  cWattHourPrefixes  : TPrefixes  = (pNone);
  cWattHourExponents : TExponents = (1);
  cWattHourFactor                 = 3600;

{ Quantity of TWattSeconds }

type
  TWattSeconds = TJouleQty;

const
  rsWattSecondSymbol     = '%sW·%ss';
  rsWattSecondName       = '%swatt %ssecond';
  rsWattSecondPluralName = '%swatt %sseconds';

const
  cWattSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cWattSecondExponents : TExponents = (1, 1);

{ Quantity of TWattsPerHertz }

type
  TWattsPerHertz = TJouleQty;

const
  rsWattPerHertzSymbol     = '%sW/%shz';
  rsWattPerHertzName       = '%swatt per %shertz';
  rsWattPerHertzPluralName = '%swatts per %shertz';

const
  cWattPerHertzPrefixes  : TPrefixes  = (pNone, pNone);
  cWattPerHertzExponents : TExponents = (1, -1);

{ Quantity of TElectronvolts }

type
  TElectronvolts = TJouleQty;

const
  eV: TJouleQty = (FValue: 1.602176634E-019);

const
  TeV: TJouleQty = (FValue: 1.602176634E-019 * 1E+12);
  GeV: TJouleQty = (FValue: 1.602176634E-019 * 1E+09);
  MeV: TJouleQty = (FValue: 1.602176634E-019 * 1E+06);
  keV: TJouleQty = (FValue: 1.602176634E-019 * 1E+03);

const
  rsElectronvoltSymbol     = '%seV';
  rsElectronvoltName       = '%selectronvolt';
  rsElectronvoltPluralName = '%selectronvolts';

const
  cElectronvoltPrefixes  : TPrefixes  = (pNone);
  cElectronvoltExponents : TExponents = (1);
  cElectronvoltFactor                 = 1.602176634E-019;

{ Quantity of TNewtonMeters }

type
  TNewtonMeters = TJouleQty;

const
  rsNewtonMeterSymbol     = '%sN·%sm';
  rsNewtonMeterName       = '%snewton %smeter';
  rsNewtonMeterPluralName = '%snewton %smeters';

const
  cNewtonMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonMeterExponents : TExponents = (1, 1);

{ Quantity of TPoundForceInches }

type
  TPoundForceInches = TJouleQty;

const
  rsPoundForceInchSymbol     = 'lbf·in';
  rsPoundForceInchName       = 'pound-force inch';
  rsPoundForceInchPluralName = 'pound-force inches';

const
  cPoundForceInchPrefixes  : TPrefixes  = ();
  cPoundForceInchExponents : TExponents = ();
  cPoundForceInchFactor                 = 0.112984829027617;

{ Quantity of TRydbergs }

type
  TRydbergs = TJouleQty;

const
  Ry: TJouleQty = (FValue: 2.1798723611035E-18);

const
  rsRydbergSymbol     = '%sRy';
  rsRydbergName       = '%srydberg';
  rsRydbergPluralName = '%srydbergs';

const
  cRydbergPrefixes  : TPrefixes  = (pNone);
  cRydbergExponents : TExponents = (1);
  cRydbergFactor                 = 2.1798723611035E-18;

{ Quantity of TCalories }

type
  TCalories = TJouleQty;

const
  cal: TJouleQty = (FValue: 4.184);

const
  Mcal: TJouleQty = (FValue: 4.184 * 1E+06);
  kcal: TJouleQty = (FValue: 4.184 * 1E+03);

const
  rsCalorieSymbol     = '%scal';
  rsCalorieName       = '%scalorie';
  rsCaloriePluralName = '%scalories';

const
  cCaloriePrefixes  : TPrefixes  = (pNone);
  cCalorieExponents : TExponents = (1);
  cCalorieFactor                 = 4.184;

{ Quantity of TKilogramSquareMetersPerSquareSecond }

type
  TKilogramSquareMetersPerSquareSecond = TJouleQty;

const
  rsKilogramSquareMeterPerSquareSecondSymbol     = '%sg·%sm2/%ss2';
  rsKilogramSquareMeterPerSquareSecondName       = '%sgram square %smeter per square %ssecond';
  rsKilogramSquareMeterPerSquareSecondPluralName = '%sgram square %smeters per square %ssecond';

const
  cKilogramSquareMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramSquareMeterPerSquareSecondExponents : TExponents = (1, 2, -2);

{ Quantity of TJoulesPerDegree }

type
  TJoulesPerDegree = TJoulePerRadianQty;

const
  rsJoulePerDegreeSymbol     = '%sJ/deg';
  rsJoulePerDegreeName       = '%sjoule per degree';
  rsJoulePerDegreePluralName = '%sjoules per degree';

const
  cJoulePerDegreePrefixes  : TPrefixes  = (pNone);
  cJoulePerDegreeExponents : TExponents = (1);
  cJoulePerDegreeFactor                 = 180/Pi;

{ Quantity of TNewtonMetersPerRadian }

type
  TNewtonMetersPerRadian = TJoulePerRadianQty;

const
  rsNewtonMeterPerRadianSymbol     = '%sN·%sm/rad';
  rsNewtonMeterPerRadianName       = '%snewton %smeter per radian';
  rsNewtonMeterPerRadianPluralName = '%snewton %smeters per radian';

const
  cNewtonMeterPerRadianPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonMeterPerRadianExponents : TExponents = (1, 1);

{ Quantity of TNewtonMetersPerDegree }

type
  TNewtonMetersPerDegree = TJoulePerRadianQty;

const
  rsNewtonMeterPerDegreeSymbol     = '%sN·%sm/deg';
  rsNewtonMeterPerDegreeName       = '%snewton %smeter per degree';
  rsNewtonMeterPerDegreePluralName = '%snewton %smeters per degree';

const
  cNewtonMeterPerDegreePrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonMeterPerDegreeExponents : TExponents = (1, 1);
  cNewtonMeterPerDegreeFactor                 = 180/Pi;

{ Quantity of TKilogramSquareMetersPerSquareSecondPerRadian }

type
  TKilogramSquareMetersPerSquareSecondPerRadian = TJoulePerRadianQty;

const
  rsKilogramSquareMeterPerSquareSecondPerRadianSymbol     = '%sg·%sm2/%ss2/rad';
  rsKilogramSquareMeterPerSquareSecondPerRadianName       = '%sgram square %smeter per square %ssecond per radian';
  rsKilogramSquareMeterPerSquareSecondPerRadianPluralName = '%sgram square %smeters per square %ssecond per radian';

const
  cKilogramSquareMeterPerSquareSecondPerRadianPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramSquareMeterPerSquareSecondPerRadianExponents : TExponents = (1, 2, -2);

{ Quantity of TKilogramSquareMetersPerCubicSecond }

type
  TKilogramSquareMetersPerCubicSecond = TWattQty;

const
  rsKilogramSquareMeterPerCubicSecondSymbol     = '%sg·%sm2/%ss3';
  rsKilogramSquareMeterPerCubicSecondName       = '%sgram square %smeter per cubic %ssecond';
  rsKilogramSquareMeterPerCubicSecondPluralName = '%sgram square %smeters per cubic %ssecond';

const
  cKilogramSquareMeterPerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramSquareMeterPerCubicSecondExponents : TExponents = (1, 2, -3);

{ Quantity of TAmpereHours }

type
  TAmpereHours = TCoulombQty;

const
  rsAmpereHourSymbol     = '%sA·h';
  rsAmpereHourName       = '%sampere hour';
  rsAmpereHourPluralName = '%sampere hours';

const
  cAmpereHourPrefixes  : TPrefixes  = (pNone);
  cAmpereHourExponents : TExponents = (1);
  cAmpereHourFactor                 = 3600;

{ Quantity of TAmpereSeconds }

type
  TAmpereSeconds = TCoulombQty;

const
  rsAmpereSecondSymbol     = '%sA·%ss';
  rsAmpereSecondName       = '%sampere %ssecond';
  rsAmpereSecondPluralName = '%sampere %sseconds';

const
  cAmpereSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cAmpereSecondExponents : TExponents = (1, 1);

{ Quantity of TSquareAmpereSquareSeconds }

type
  TSquareAmpereSquareSeconds = TSquareCoulombQty;

const
  rsSquareAmpereSquareSecondSymbol     = '%sA2·%ss2';
  rsSquareAmpereSquareSecondName       = 'square %sampere square %ssecond';
  rsSquareAmpereSquareSecondPluralName = 'square %sampere square %sseconds';

const
  cSquareAmpereSquareSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cSquareAmpereSquareSecondExponents : TExponents = (2, 2);

{ Quantity of TKilogramSquareMetersPerAmperePerCubicSecond }

type
  TKilogramSquareMetersPerAmperePerCubicSecond = TVoltQty;

const
  rsKilogramSquareMeterPerAmperePerCubicSecondSymbol     = '%sg·%sm2/%sA/%ss3';
  rsKilogramSquareMeterPerAmperePerCubicSecondName       = '%sgram square %smeter per %sampere per cubic %ssecond';
  rsKilogramSquareMeterPerAmperePerCubicSecondPluralName = '%sgram square %smeters per %sampere per cubic %ssecond';

const
  cKilogramSquareMeterPerAmperePerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerAmperePerCubicSecondExponents : TExponents = (1, 2, -1, -3);

{ Quantity of TSquareKilogramQuarticMetersPerSquareAmperePerSexticSecond }

type
  TSquareKilogramQuarticMetersPerSquareAmperePerSexticSecond = TSquareVoltQty;

const
  rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondSymbol     = '%sg2·%sm3/%sA2/%ss6';
  rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondName       = 'square %sgram quartic %smeter per square %sampere per sextic %ssecond';
  rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondPluralName = 'square %sgram quartic %smeters per square %sampere per sextic %ssecond';

const
  cSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondExponents : TExponents = (2, 3, -2, -6);

{ Quantity of TSquareAmpereQuarticSecondsPerKilogramPerSquareMeter }

type
  TSquareAmpereQuarticSecondsPerKilogramPerSquareMeter = TFaradQty;

const
  rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterSymbol     = '%sA2·%ss4/%sg/%sm2';
  rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterName       = 'square %sampere quartic %ssecond per %sgram per square %smeter';
  rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterPluralName = 'square %sampere quartic %sseconds per %sgram per square %smeter';

const
  cSquareAmpereQuarticSecondPerKilogramPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone, pKilo, pNone);
  cSquareAmpereQuarticSecondPerKilogramPerSquareMeterExponents : TExponents = (2, 4, -1, -2);

{ Quantity of TKilogramSquareMetersPerSquareAmperePerCubicSecond }

type
  TKilogramSquareMetersPerSquareAmperePerCubicSecond = TOhmQty;

const
  rsKilogramSquareMeterPerSquareAmperePerCubicSecondSymbol     = '%sg·%sm2/%sA/%ss3';
  rsKilogramSquareMeterPerSquareAmperePerCubicSecondName       = '%sgram square %smeter per square %sampere per cubic %ssecond';
  rsKilogramSquareMeterPerSquareAmperePerCubicSecondPluralName = '%sgram square %smeters per square %sampere per cubic %ssecond';

const
  cKilogramSquareMeterPerSquareAmperePerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerSquareAmperePerCubicSecondExponents : TExponents = (1, 2, -1, -3);

{ Quantity of TSquareAmpereCubicSecondsPerKilogramPerSquareMeter }

type
  TSquareAmpereCubicSecondsPerKilogramPerSquareMeter = TSiemensQty;

const
  rsSquareAmpereCubicSecondPerKilogramPerSquareMeterSymbol     = '%sA2·%ss3/%sg/%sm2';
  rsSquareAmpereCubicSecondPerKilogramPerSquareMeterName       = 'square %sampere cubic %ssecond per %sgram per square %smeter';
  rsSquareAmpereCubicSecondPerKilogramPerSquareMeterPluralName = 'square %sampere cubic %sseconds per %sgram per square %smeter';

const
  cSquareAmpereCubicSecondPerKilogramPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone, pKilo, pNone);
  cSquareAmpereCubicSecondPerKilogramPerSquareMeterExponents : TExponents = (2, 3, -1, -2);

{ Quantity of TWebersPerSquareMeter }

type
  TWebersPerSquareMeter = TTeslaQty;

const
  rsWeberPerSquareMeterSymbol     = '%sWb/%m2';
  rsWeberPerSquareMeterName       = '%sweber per square %smeter';
  rsWeberPerSquareMeterPluralName = '%swebers per square %smeter';

const
  cWeberPerSquareMeterPrefixes  : TPrefixes  = (pNone);
  cWeberPerSquareMeterExponents : TExponents = (1);

{ Quantity of TKilogramsPerAmperePerSquareSecond }

type
  TKilogramsPerAmperePerSquareSecond = TTeslaQty;

const
  rsKilogramPerAmperePerSquareSecondSymbol     = '%sg/%sA/%ss2';
  rsKilogramPerAmperePerSquareSecondName       = '%sgram per %sampere per square %ssecond';
  rsKilogramPerAmperePerSquareSecondPluralName = '%sgrams per %sampere per square %ssecond';

const
  cKilogramPerAmperePerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerAmperePerSquareSecondExponents : TExponents = (1, -1, -2);

{ Quantity of TKilogramSquareMetersPerAmperePerSquareSecond }

type
  TKilogramSquareMetersPerAmperePerSquareSecond = TWeberQty;

const
  rsKilogramSquareMeterPerAmperePerSquareSecondSymbol     = '%sg·%sm2/%sA/%ss2';
  rsKilogramSquareMeterPerAmperePerSquareSecondName       = '%sgram square %smeter per %sampere per square %ssecond';
  rsKilogramSquareMeterPerAmperePerSquareSecondPluralName = '%sgram square %smeters per %sampere per square %ssecond';

const
  cKilogramSquareMeterPerAmperePerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerAmperePerSquareSecondExponents : TExponents = (1, 2, -1, -2);

{ Quantity of TKilogramSquareMetersPerSquareAmperePerSquareSecond }

type
  TKilogramSquareMetersPerSquareAmperePerSquareSecond = THenryQty;

const
  rsKilogramSquareMeterPerSquareAmperePerSquareSecondSymbol     = '%sg·%sm2/%sA2/%ss2';
  rsKilogramSquareMeterPerSquareAmperePerSquareSecondName       = '%sgram square %smeter per square %sampere per square %ssecond';
  rsKilogramSquareMeterPerSquareAmperePerSquareSecondPluralName = '%sgram square %smeters per square %sampere per square %ssecond';

const
  cKilogramSquareMeterPerSquareAmperePerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerSquareAmperePerSquareSecondExponents : TExponents = (1, 2, -2, -2);

{ Quantity of TCandelaSteradians }

type
  TCandelaSteradians = TLumenQty;

const
  rsCandelaSteradianSymbol     = '%scd·%ssr';
  rsCandelaSteradianName       = '%scandela %ssteradian';
  rsCandelaSteradianPluralName = '%scandela %ssteradians';

const
  cCandelaSteradianPrefixes  : TPrefixes  = (pNone, pNone);
  cCandelaSteradianExponents : TExponents = (1, 1);

{ Quantity of TCandelaSteradiansPerSquareMeter }

type
  TCandelaSteradiansPerSquareMeter = TLuxQty;

const
  rsCandelaSteradianPerSquareMeterSymbol     = '%scd·%ssr/%sm2';
  rsCandelaSteradianPerSquareMeterName       = '%scandela %ssteradian per square %smeter';
  rsCandelaSteradianPerSquareMeterPluralName = '%scandela %ssteradians per square %smeter';

const
  cCandelaSteradianPerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cCandelaSteradianPerSquareMeterExponents : TExponents = (1, 1, -2);

{ Quantity of TBequerels }

type
  TBequerels = THertzQty;

var
  Bq: THertzUnit;

const
   kBq: THertzQty = (FValue: 1E+03);
   mBq: THertzQty = (FValue: 1E-03);
  miBq: THertzQty = (FValue: 1E-06);
   nBq: THertzQty = (FValue: 1E-09);
   pBq: THertzQty = (FValue: 1E-12);

const
  rsBequerelSymbol     = '%sBq';
  rsBequerelName       = '%sbequerel';
  rsBequerelPluralName = '%sbequerels';

const
  cBequerelPrefixes  : TPrefixes  = (pNone);
  cBequerelExponents : TExponents = (1);

{ Quantity of TMolesPerSecond }

type
  TMolesPerSecond = TKatalQty;

const
  rsMolePerSecondSymbol     = '%smol/%ss';
  rsMolePerSecondName       = '%smole per %ssecond';
  rsMolePerSecondPluralName = '%smoles per %ssecond';

const
  cMolePerSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cMolePerSecondExponents : TExponents = (1, -1);

{ Quantity of TPascalsPerMeter }

type
  TPascalsPerMeter = TNewtonPerCubicMeterQty;

const
  rsPascalPerMeterSymbol     = '%sPa/%sm';
  rsPascalPerMeterName       = '%spascal per %smeter';
  rsPascalPerMeterPluralName = '%spascals per %smeter';

const
  cPascalPerMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cPascalPerMeterExponents : TExponents = (1, -1);

{ Quantity of TKilogramsPerSquareMeterPerSquareSecond }

type
  TKilogramsPerSquareMeterPerSquareSecond = TNewtonPerCubicMeterQty;

const
  rsKilogramPerSquareMeterPerSquareSecondSymbol     = '%sg/%sm2/%ss2';
  rsKilogramPerSquareMeterPerSquareSecondName       = '%sgram per square %smeter per square %ssecond';
  rsKilogramPerSquareMeterPerSquareSecondPluralName = '%sgrams per square %smeter per square %ssecond';

const
  cKilogramPerSquareMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerSquareMeterPerSquareSecondExponents : TExponents = (1, -2, -2);

{ Quantity of TJoulesPerSquareMeter }

type
  TJoulesPerSquareMeter = TNewtonPerMeterQty;

const
  rsJoulePerSquareMeterSymbol     = '%sJ/%sm2';
  rsJoulePerSquareMeterName       = '%sjoule per square %smeter';
  rsJoulePerSquareMeterPluralName = '%sjoules per square %smeter';

const
  cJoulePerSquareMeterPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerSquareMeterExponents : TExponents = (1, -2);

{ Quantity of TWattsPerSquareMeterPerHertz }

type
  TWattsPerSquareMeterPerHertz = TNewtonPerMeterQty;

const
  rsWattPerSquareMeterPerHertzSymbol     = '%sW/%sm2/%sHz';
  rsWattPerSquareMeterPerHertzName       = '%swatt per square %smeter per %shertz';
  rsWattPerSquareMeterPerHertzPluralName = '%swatts per square %smeter per %shertz';

const
  cWattPerSquareMeterPerHertzPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cWattPerSquareMeterPerHertzExponents : TExponents = (1, -2, -1);

{ Quantity of TPoundsForcePerInch }

type
  TPoundsForcePerInch = TNewtonPerMeterQty;

const
  rsPoundForcePerInchSymbol     = 'lbf/in';
  rsPoundForcePerInchName       = 'pound-force per inch';
  rsPoundForcePerInchPluralName = 'pounds-force per inch';

const
  cPoundForcePerInchPrefixes  : TPrefixes  = ();
  cPoundForcePerInchExponents : TExponents = ();
  cPoundForcePerInchFactor                 = 175.126835246476;

{ Quantity of TKilogramsPerSquareSecond }

type
  TKilogramsPerSquareSecond = TNewtonPerMeterQty;

const
  rsKilogramPerSquareSecondSymbol     = '%sg/%ss2';
  rsKilogramPerSquareSecondName       = '%sgram per square %ssecond';
  rsKilogramPerSquareSecondPluralName = '%sgrams per square %ssecond';

const
  cKilogramPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerSquareSecondExponents : TExponents = (1, -2);

{ Quantity of TPascalSeconds }

type
  TPascalSeconds = TPoiseuilleQty;

const
  rsPascalSecondSymbol     = '%sPa·%ss';
  rsPascalSecondName       = '%spascal %ssecond';
  rsPascalSecondPluralName = '%spascal %sseconds';

const
  cPascalSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cPascalSecondExponents : TExponents = (1, 1);

{ Quantity of TKilogramsPerMeterPerSecond }

type
  TKilogramsPerMeterPerSecond = TPoiseuilleQty;

const
  rsKilogramPerMeterPerSecondSymbol     = '%sg/%sm/%ss';
  rsKilogramPerMeterPerSecondName       = '%sgram per %smeter per %ssecond';
  rsKilogramPerMeterPerSecondPluralName = '%sgrams per %smeter per %ssecond';

const
  cKilogramPerMeterPerSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerMeterPerSecondExponents : TExponents = (1, -1, -1);

{ Quantity of TKilogramCubicMetersPerSquareSecond }

type
  TKilogramCubicMetersPerSquareSecond = TNewtonSquareMeterQty;

const
  rsKilogramCubicMeterPerSquareSecondSymbol     = '%sg·%sm3/%ss2';
  rsKilogramCubicMeterPerSquareSecondName       = '%sgram cubic %smeter per square %ssecond';
  rsKilogramCubicMeterPerSquareSecondPluralName = '%sgram cubic %smeters per square %ssecond';

const
  cKilogramCubicMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramCubicMeterPerSquareSecondExponents : TExponents = (1, 3, -2);

{ Quantity of TKilogramQuarticMetersPerSquareSecond }

type
  TKilogramQuarticMetersPerSquareSecond = TNewtonCubicMeterQty;

const
  rsKilogramQuarticMeterPerSquareSecondSymbol     = '%sg·%sm4/%ss2';
  rsKilogramQuarticMeterPerSquareSecondName       = '%sgram quartic %smeter per square %ssecond';
  rsKilogramQuarticMeterPerSquareSecondPluralName = '%sgram quartic %smeters per square %ssecond';

const
  cKilogramQuarticMeterPerSquareSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramQuarticMeterPerSquareSecondExponents : TExponents = (1, 4, -2);

{ Quantity of TMetersPerKilogramPerSquareSecond }

type
  TMetersPerKilogramPerSquareSecond = TNewtonPerSquareKilogramQty;

const
  rsMeterPerKilogramPerSquareSecondSymbol     = '%sm/%sg/%ss2';
  rsMeterPerKilogramPerSquareSecondName       = '%smeter per %sgram per square %ssecond';
  rsMeterPerKilogramPerSquareSecondPluralName = '%smeters per %sgram per square %ssecond';

const
  cMeterPerKilogramPerSquareSecondPrefixes  : TPrefixes  = (pNone, pKilo, pNone);
  cMeterPerKilogramPerSquareSecondExponents : TExponents = (1, -1, -2);

{ Quantity of TCubicMetersPerKilogramPerSquareSecond }

type
  TCubicMetersPerKilogramPerSquareSecond = TNewtonSquareMeterPerSquareKilogramQty;

const
  rsCubicMeterPerKilogramPerSquareSecondSymbol     = '%sm3/%sg/%ss2';
  rsCubicMeterPerKilogramPerSquareSecondName       = 'cubic %smeter per %sgram per square %ssecond';
  rsCubicMeterPerKilogramPerSquareSecondPluralName = 'cubic %smeters per %sgram per square %ssecond';

const
  cCubicMeterPerKilogramPerSquareSecondPrefixes  : TPrefixes  = (pNone, pKilo, pNone);
  cCubicMeterPerKilogramPerSquareSecondExponents : TExponents = (3, -1, -2);

{ Quantity of TKilogramSquareMetersPerSquareSecondPerKelvin }

type
  TKilogramSquareMetersPerSquareSecondPerKelvin = TJoulePerKelvinQty;

const
  rsKilogramSquareMeterPerSquareSecondPerKelvinSymbol     = '%sg·%sm2/%ss2/%sK';
  rsKilogramSquareMeterPerSquareSecondPerKelvinName       = '%sgram square %smeter per square %ssecond per %skelvin';
  rsKilogramSquareMeterPerSquareSecondPerKelvinPluralName = '%sgram square %smeters per square %ssecond per %skelvin';

const
  cKilogramSquareMeterPerSquareSecondPerKelvinPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerSquareSecondPerKelvinExponents : TExponents = (1, 2, -2, -1);

{ Quantity of TSquareMetersPerSquareSecondPerKelvin }

type
  TSquareMetersPerSquareSecondPerKelvin = TJoulePerKilogramPerKelvinQty;

const
  rsSquareMeterPerSquareSecondPerKelvinSymbol     = '%sm2/%ss2/%sK';
  rsSquareMeterPerSquareSecondPerKelvinName       = 'square %smeter per square %ssecond per %skelvin';
  rsSquareMeterPerSquareSecondPerKelvinPluralName = 'square %smeters per square %ssecond per %skelvin';

const
  cSquareMeterPerSquareSecondPerKelvinPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cSquareMeterPerSquareSecondPerKelvinExponents : TExponents = (2, -2, -1);

{ Quantity of TKilogramMetersPerCubicSecond }

type
  TKilogramMetersPerCubicSecond = TWattPerMeterQty;

const
  rsKilogramMeterPerCubicSecondSymbol     = '%sg·%sm/%ss3';
  rsKilogramMeterPerCubicSecondName       = '%sgram %smeter per cubic %ssecond';
  rsKilogramMeterPerCubicSecondPluralName = '%sgram %smeters per cubic %ssecond';

const
  cKilogramMeterPerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramMeterPerCubicSecondExponents : TExponents = (1, 1, -3);

{ Quantity of TKilogramsPerCubicSecond }

type
  TKilogramsPerCubicSecond = TWattPerSquareMeterQty;

const
  rsKilogramPerCubicSecondSymbol     = '%sg/%ss3';
  rsKilogramPerCubicSecondName       = '%sgram per cubic %ssecond';
  rsKilogramPerCubicSecondPluralName = '%sgrams per cubic %ssecond';

const
  cKilogramPerCubicSecondPrefixes  : TPrefixes  = (pKilo, pNone);
  cKilogramPerCubicSecondExponents : TExponents = (1, -3);

{ Quantity of TKilogramSquareMetersPerCubicSecondPerKelvin }

type
  TKilogramSquareMetersPerCubicSecondPerKelvin = TWattPerKelvinQty;

const
  rsKilogramSquareMeterPerCubicSecondPerKelvinSymbol     = '%sg·%sm2/%ss3/%sK';
  rsKilogramSquareMeterPerCubicSecondPerKelvinName       = '%sgram square %smeter per cubic %ssecond per %skelvin';
  rsKilogramSquareMeterPerCubicSecondPerKelvinPluralName = '%sgram square %smeters per cubic %ssecond per %skelvin';

const
  cKilogramSquareMeterPerCubicSecondPerKelvinPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramSquareMeterPerCubicSecondPerKelvinExponents : TExponents = (1, 2, -3, -1);

{ Quantity of TKilogramMetersPerCubicSecondPerKelvin }

type
  TKilogramMetersPerCubicSecondPerKelvin = TWattPerMeterPerKelvinQty;

const
  rsKilogramMeterPerCubicSecondPerKelvinSymbol     = '%sg·%sm/%ss3/%sK';
  rsKilogramMeterPerCubicSecondPerKelvinName       = '%sgram %smeter per cubic %ssecond per %skelvin';
  rsKilogramMeterPerCubicSecondPerKelvinPluralName = '%sgram %smeters per cubic %ssecond per %skelvin';

const
  cKilogramMeterPerCubicSecondPerKelvinPrefixes  : TPrefixes  = (pKilo, pNone, pNone, pNone);
  cKilogramMeterPerCubicSecondPerKelvinExponents : TExponents = (1, 1, -3, -1);

{ Quantity of TKilogramsPerCubicSecondPerKelvin }

type
  TKilogramsPerCubicSecondPerKelvin = TWattPerSquareMeterPerKelvinQty;

const
  rsKilogramPerCubicSecondPerKelvinSymbol     = '%sg/%ss3/%sK';
  rsKilogramPerCubicSecondPerKelvinName       = '%sgram per cubic %ssecond per %skelvin';
  rsKilogramPerCubicSecondPerKelvinPluralName = '%sgrams per cubic %ssecond per %skelvin';

const
  cKilogramPerCubicSecondPerKelvinPrefixes  : TPrefixes  = (pKilo, pNone, pNone);
  cKilogramPerCubicSecondPerKelvinExponents : TExponents = (1, -3, -1);

{ Quantity of TNewtonsPerCoulomb }

type
  TNewtonsPerCoulomb = TVoltPerMeterQty;

const
  rsNewtonPerCoulombSymbol     = '%sN/%sC';
  rsNewtonPerCoulombName       = '%snewton per %scoulomb';
  rsNewtonPerCoulombPluralName = '%snewtons per %scoulomb';

const
  cNewtonPerCoulombPrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerCoulombExponents : TExponents = (1, -1);

{ Quantity of TNewtonSquareMetersPerCoulomb }

type
  TNewtonSquareMetersPerCoulomb = TVoltMeterQty;

const
  rsNewtonSquareMeterPerCoulombSymbol     = '%sN·%sm2/%sC';
  rsNewtonSquareMeterPerCoulombName       = '%snewton square %smeter per %scoulomb';
  rsNewtonSquareMeterPerCoulombPluralName = '%snewton square %smeters per %scoulomb';

const
  cNewtonSquareMeterPerCoulombPrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cNewtonSquareMeterPerCoulombExponents : TExponents = (1, 2, -1);

{ Quantity of TNewtonsPerAmpere }

type
  TNewtonsPerAmpere = TTeslaMeterQty;

const
  rsNewtonPerAmpereSymbol     = '%sN/%sA';
  rsNewtonPerAmpereName       = '%snewton per %sampere';
  rsNewtonPerAmperePluralName = '%snewtons per %sampere';

const
  cNewtonPerAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerAmpereExponents : TExponents = (1, -1);

{ Quantity of TTeslaMetersPerAmpere }

type
  TTeslaMetersPerAmpere = THenryPerMeterQty;

const
  rsTeslaMeterPerAmpereSymbol     = '%sT·%sm/%sA';
  rsTeslaMeterPerAmpereName       = '%stesla %smeter per %sampere';
  rsTeslaMeterPerAmperePluralName = '%stesla %smeters per %sampere';

const
  cTeslaMeterPerAmperePrefixes  : TPrefixes  = (pNone, pNone, pNone);
  cTeslaMeterPerAmpereExponents : TExponents = (1, 1, -1);

{ Quantity of TNewtonsPerSquareAmpere }

type
  TNewtonsPerSquareAmpere = THenryPerMeterQty;

const
  rsNewtonPerSquareAmpereSymbol     = '%sN/%sA2';
  rsNewtonPerSquareAmpereName       = '%snewton per square %sampere';
  rsNewtonPerSquareAmperePluralName = '%snewtons per square %sampere';

const
  cNewtonPerSquareAmperePrefixes  : TPrefixes  = (pNone, pNone);
  cNewtonPerSquareAmpereExponents : TExponents = (1, -2);

{ Quantity of TJouleSeconds }

type
  TJouleSeconds = TKilogramSquareMeterPerSecondQty;

const
  rsJouleSecondSymbol     = '%sJ·%ss';
  rsJouleSecondName       = '%sjoule %ssecond';
  rsJouleSecondPluralName = '%sjoule %sseconds';

const
  cJouleSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cJouleSecondExponents : TExponents = (1, 1);

{ Quantity of TJoulePerHertzs }

type
  TJoulePerHertzs = TKilogramSquareMeterPerSecondQty;

const
  rsJoulePerHertzSymbol     = '%sJ/%sHz';
  rsJoulePerHertzName       = '%sjoule per %shertz';
  rsJoulePerHertzPluralName = '%sjoules per %shertz';

const
  cJoulePerHertzPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerHertzExponents : TExponents = (1, -1);

{ Quantity of TElectronvoltSeconds }

type
  TElectronvoltSeconds = TKilogramSquareMeterPerSecondQty;

const
  rsElectronvoltSecondSymbol     = '%seV·%ss';
  rsElectronvoltSecondName       = '%selectronvolt %ssecond';
  rsElectronvoltSecondPluralName = '%selectronvolt %sseconds';

const
  cElectronvoltSecondPrefixes  : TPrefixes  = (pNone, pNone);
  cElectronvoltSecondExponents : TExponents = (1, 1);
  cElectronvoltSecondFactor                 = 1.60217742320523E-019;

{ Quantity of TElectronvoltMetersPerSpeedOfLight }

type
  TElectronvoltMetersPerSpeedOfLight = TKilogramSquareMeterPerSecondQty;

const
  rsElectronvoltMeterPerSpeedOfLightSymbol     = '%seV·%sm/c';
  rsElectronvoltMeterPerSpeedOfLightName       = '%selectronvolt %smeter per speed of light';
  rsElectronvoltMeterPerSpeedOfLightPluralName = '%selectronvolt %smeters per speed of light';

const
  cElectronvoltMeterPerSpeedOfLightPrefixes  : TPrefixes  = (pNone, pNone);
  cElectronvoltMeterPerSpeedOfLightExponents : TExponents = (1, 1);
  cElectronvoltMeterPerSpeedOfLightFactor                 = 1.7826619216279E-36;

{ Quantity of TJoulesPerTesla }

type
  TJoulesPerTesla = TSquareMeterAmpereQty;

const
  rsJoulePerTeslaSymbol     = '%sJ/%sT';
  rsJoulePerTeslaName       = '%sjoule per %stesla';
  rsJoulePerTeslaPluralName = '%sjoules per %stesla';

const
  cJoulePerTeslaPrefixes  : TPrefixes  = (pNone, pNone);
  cJoulePerTeslaExponents : TExponents = (1, -1);

{ Helpers }

type
  TSecondHelper = type helper for TSecondQty
    function ToMinute: TMinuteQty;
    function ToHour: THourQty;
    function ToDay: TDayQty;
  end;

  TSquareSecondHelper = type helper for TSquareSecondQty
    function ToSquareMinute: TSquareMinuteQty;
    function ToSquareHour: TSquareHourQty;
    function ToSquareDay: TSquareDayQty;
  end;

  TMeterHelper = type helper for TMeterQty
    function ToAngstrom: TAngstromQty;
    function ToNauticalMile: TNauticalMileQty;
    function ToMile: TMileQty;
    function ToYard: TYardQty;
    function ToFoot: TFootQty;
    function ToInch: TInchQty;
    function ToAstronomical: TAstronomicalQty;
  end;

  TSquareMeterHelper = type helper for TSquareMeterQty
    function ToSquareMile: TSquareMileQty;
    function ToSquareYard: TSquareYardQty;
    function ToSquareFoot: TSquareFootQty;
    function ToSquareInch: TSquareInchQty;
  end;

  TCubicMeterHelper = type helper for TCubicMeterQty
    function ToGallon: TGallonQty;
    function ToLitre: TLitreQty;
    function ToCubicYard: TCubicYardQty;
    function ToCubicFoot: TCubicFootQty;
    function ToCubicInch: TCubicInchQty;
  end;

  TKilogramHelper = type helper for TKilogramQty
    function ToElectronvoltPerSquareSpeedOfLight: TElectronvoltPerSquareSpeedOfLightQty;
    function ToTon: TTonQty;
    function ToStone: TStoneQty;
    function ToOunce: TOunceQty;
    function ToPound: TPoundQty;
    function ToTonne: TTonneQty;
  end;

  TDegreeCelsiusHelper = type helper for TDegreeCelsiusQty
    function ToKelvin: TKelvinQty;
  end;

  TKelvinHelper = type helper for TKelvinQty
    function ToDegreeFahrenheit: TDegreeFahrenheitQty;
    function ToDegreeCelsius: TDegreeCelsiusQty;
  end;

  TDegreeFahrenheitHelper = type helper for TDegreeFahrenheitQty
    function ToKelvin: TKelvinQty;
  end;

  TRadianHelper = type helper for TRadianQty
    function ToDegree: TDegreeQty;
  end;

  TSteradianHelper = type helper for TSteradianQty
    function ToSquareDegree: TSquareDegreeQty;
  end;

  THertzHelper = type helper for THertzQty
    function ToBequerel: TBequerelQty;
    function ToRadianPerSecond: TRadianPerSecondQty;
    function ToReciprocalSecond: TReciprocalSecondQty;
  end;

  TReciprocalSecondHelper = type helper for TReciprocalSecondQty
    function ToHertz: THertzQty;
  end;

  TRadianPerSecondHelper = type helper for TRadianPerSecondQty
    function ToHertz: THertzQty;
  end;

  TSquareHertzHelper = type helper for TSquareHertzQty
    function ToSteradianPerSquareSecond: TSteradianPerSquareSecondQty;
    function ToRadianPerSquareSecond: TRadianPerSquareSecondQty;
    function ToReciprocalSquareSecond: TReciprocalSquareSecondQty;
  end;

  TReciprocalSquareSecondHelper = type helper for TReciprocalSquareSecondQty
    function ToSquareHertz: TSquareHertzQty;
  end;

  TRadianPerSquareSecondHelper = type helper for TRadianPerSquareSecondQty
    function ToSquareHertz: TSquareHertzQty;
  end;

  TSteradianPerSquareSecondHelper = type helper for TSteradianPerSquareSecondQty
    function ToSquareHertz: TSquareHertzQty;
  end;

  TMeterPerSecondHelper = type helper for TMeterPerSecondQty
    function ToNauticalMilePerHour: TNauticalMilePerHourQty;
    function ToMilePerHour: TMilePerHourQty;
    function ToMeterPerHour: TMeterPerHourQty;
  end;

  TMeterPerSquareSecondHelper = type helper for TMeterPerSquareSecondQty
    function ToMeterPerHourPerSecond: TMeterPerHourPerSecondQty;
    function ToMeterPerSecondPerSecond: TMeterPerSecondPerSecondQty;
  end;

  TMeterPerSecondPerSecondHelper = type helper for TMeterPerSecondPerSecondQty
    function ToMeterPerSquareSecond: TMeterPerSquareSecondQty;
  end;

  TSquareMeterPerSquareSecondHelper = type helper for TSquareMeterPerSquareSecondQty
    function ToSievert: TSievertQty;
    function ToGray: TGrayQty;
    function ToJoulePerKilogram: TJoulePerKilogramQty;
  end;

  TJoulePerKilogramHelper = type helper for TJoulePerKilogramQty
    function ToSquareMeterPerSquareSecond: TSquareMeterPerSquareSecondQty;
  end;

  TGrayHelper = type helper for TGrayQty
    function ToSquareMeterPerSquareSecond: TSquareMeterPerSquareSecondQty;
  end;

  TSievertHelper = type helper for TSievertQty
    function ToSquareMeterPerSquareSecond: TSquareMeterPerSquareSecondQty;
  end;

  TKilogramPerSecondHelper = type helper for TKilogramPerSecondQty
    function ToJoulePerSquareMeterPerHertz: TJoulePerSquareMeterPerHertzQty;
  end;

  TJoulePerSquareMeterPerHertzHelper = type helper for TJoulePerSquareMeterPerHertzQty
    function ToKilogramPerSecond: TKilogramPerSecondQty;
  end;

  TKilogramMeterPerSecondHelper = type helper for TKilogramMeterPerSecondQty
    function ToNewtonSecond: TNewtonSecondQty;
  end;

  TNewtonSecondHelper = type helper for TNewtonSecondQty
    function ToKilogramMeterPerSecond: TKilogramMeterPerSecondQty;
  end;

  TReciprocalMeterHelper = type helper for TReciprocalMeterQty
    function ToDioptre: TDioptreQty;
  end;

  TDioptreHelper = type helper for TDioptreQty
    function ToReciprocalMeter: TReciprocalMeterQty;
  end;

  TKilogramSquareMeterPerSecondHelper = type helper for TKilogramSquareMeterPerSecondQty
    function ToElectronvoltMeterPerSpeedOfLight: TElectronvoltMeterPerSpeedOfLightQty;
    function ToElectronvoltSecond: TElectronvoltSecondQty;
    function ToJoulePerHertz: TJoulePerHertzQty;
    function ToJouleSecond: TJouleSecondQty;
    function ToNewtonMeterSecond: TNewtonMeterSecondQty;
  end;

  TNewtonMeterSecondHelper = type helper for TNewtonMeterSecondQty
    function ToKilogramSquareMeterPerSecond: TKilogramSquareMeterPerSecondQty;
  end;

  TKilogramPerCubicMeterHelper = type helper for TKilogramPerCubicMeterQty
    function ToPoundPerCubicInch: TPoundPerCubicInchQty;
  end;

  TNewtonHelper = type helper for TNewtonQty
    function ToKilogramMeterPerSquareSecond: TKilogramMeterPerSquareSecondQty;
    function ToPoundForce: TPoundForceQty;
  end;

  TKilogramMeterPerSquareSecondHelper = type helper for TKilogramMeterPerSquareSecondQty
    function ToNewton: TNewtonQty;
  end;

  TSquareNewtonHelper = type helper for TSquareNewtonQty
    function ToSquareKilogramSquareMeterPerQuarticSecond: TSquareKilogramSquareMeterPerQuarticSecondQty;
  end;

  TSquareKilogramSquareMeterPerQuarticSecondHelper = type helper for TSquareKilogramSquareMeterPerQuarticSecondQty
    function ToSquareNewton: TSquareNewtonQty;
  end;

  TPascalHelper = type helper for TPascalQty
    function ToKilogramPerMeterPerSquareSecond: TKilogramPerMeterPerSquareSecondQty;
    function ToJoulePerCubicMeter: TJoulePerCubicMeterQty;
    function ToPoundPerSquareInch: TPoundPerSquareInchQty;
    function ToBar: TBarQty;
    function ToNewtonPerSquareMeter: TNewtonPerSquareMeterQty;
  end;

  TNewtonPerSquareMeterHelper = type helper for TNewtonPerSquareMeterQty
    function ToPascal: TPascalQty;
  end;

  TJoulePerCubicMeterHelper = type helper for TJoulePerCubicMeterQty
    function ToPascal: TPascalQty;
  end;

  TKilogramPerMeterPerSquareSecondHelper = type helper for TKilogramPerMeterPerSquareSecondQty
    function ToPascal: TPascalQty;
  end;

  TJouleHelper = type helper for TJouleQty
    function ToKilogramSquareMeterPerSquareSecond: TKilogramSquareMeterPerSquareSecondQty;
    function ToCalorie: TCalorieQty;
    function ToRydberg: TRydbergQty;
    function ToPoundForceInch: TPoundForceInchQty;
    function ToNewtonMeter: TNewtonMeterQty;
    function ToElectronvolt: TElectronvoltQty;
    function ToWattPerHertz: TWattPerHertzQty;
    function ToWattSecond: TWattSecondQty;
    function ToWattHour: TWattHourQty;
  end;

  TWattSecondHelper = type helper for TWattSecondQty
    function ToJoule: TJouleQty;
  end;

  TWattPerHertzHelper = type helper for TWattPerHertzQty
    function ToJoule: TJouleQty;
  end;

  TNewtonMeterHelper = type helper for TNewtonMeterQty
    function ToJoule: TJouleQty;
  end;

  TKilogramSquareMeterPerSquareSecondHelper = type helper for TKilogramSquareMeterPerSquareSecondQty
    function ToJoule: TJouleQty;
  end;

  TJoulePerRadianHelper = type helper for TJoulePerRadianQty
    function ToKilogramSquareMeterPerSquareSecondPerRadian: TKilogramSquareMeterPerSquareSecondPerRadianQty;
    function ToNewtonMeterPerDegree: TNewtonMeterPerDegreeQty;
    function ToNewtonMeterPerRadian: TNewtonMeterPerRadianQty;
    function ToJoulePerDegree: TJoulePerDegreeQty;
  end;

  TNewtonMeterPerRadianHelper = type helper for TNewtonMeterPerRadianQty
    function ToJoulePerRadian: TJoulePerRadianQty;
  end;

  TKilogramSquareMeterPerSquareSecondPerRadianHelper = type helper for TKilogramSquareMeterPerSquareSecondPerRadianQty
    function ToJoulePerRadian: TJoulePerRadianQty;
  end;

  TWattHelper = type helper for TWattQty
    function ToKilogramSquareMeterPerCubicSecond: TKilogramSquareMeterPerCubicSecondQty;
  end;

  TKilogramSquareMeterPerCubicSecondHelper = type helper for TKilogramSquareMeterPerCubicSecondQty
    function ToWatt: TWattQty;
  end;

  TCoulombHelper = type helper for TCoulombQty
    function ToAmpereSecond: TAmpereSecondQty;
    function ToAmpereHour: TAmpereHourQty;
  end;

  TAmpereSecondHelper = type helper for TAmpereSecondQty
    function ToCoulomb: TCoulombQty;
  end;

  TSquareCoulombHelper = type helper for TSquareCoulombQty
    function ToSquareAmpereSquareSecond: TSquareAmpereSquareSecondQty;
  end;

  TSquareAmpereSquareSecondHelper = type helper for TSquareAmpereSquareSecondQty
    function ToSquareCoulomb: TSquareCoulombQty;
  end;

  TVoltHelper = type helper for TVoltQty
    function ToKilogramSquareMeterPerAmperePerCubicSecond: TKilogramSquareMeterPerAmperePerCubicSecondQty;
  end;

  TKilogramSquareMeterPerAmperePerCubicSecondHelper = type helper for TKilogramSquareMeterPerAmperePerCubicSecondQty
    function ToVolt: TVoltQty;
  end;

  TSquareVoltHelper = type helper for TSquareVoltQty
    function ToSquareKilogramQuarticMeterPerSquareAmperePerSexticSecond: TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondQty;
  end;

  TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondHelper = type helper for TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondQty
    function ToSquareVolt: TSquareVoltQty;
  end;

  TFaradHelper = type helper for TFaradQty
    function ToSquareAmpereQuarticSecondPerKilogramPerSquareMeter: TSquareAmpereQuarticSecondPerKilogramPerSquareMeterQty;
  end;

  TSquareAmpereQuarticSecondPerKilogramPerSquareMeterHelper = type helper for TSquareAmpereQuarticSecondPerKilogramPerSquareMeterQty
    function ToFarad: TFaradQty;
  end;

  TOhmHelper = type helper for TOhmQty
    function ToKilogramSquareMeterPerSquareAmperePerCubicSecond: TKilogramSquareMeterPerSquareAmperePerCubicSecondQty;
  end;

  TKilogramSquareMeterPerSquareAmperePerCubicSecondHelper = type helper for TKilogramSquareMeterPerSquareAmperePerCubicSecondQty
    function ToOhm: TOhmQty;
  end;

  TSiemensHelper = type helper for TSiemensQty
    function ToSquareAmpereCubicSecondPerKilogramPerSquareMeter: TSquareAmpereCubicSecondPerKilogramPerSquareMeterQty;
  end;

  TSquareAmpereCubicSecondPerKilogramPerSquareMeterHelper = type helper for TSquareAmpereCubicSecondPerKilogramPerSquareMeterQty
    function ToSiemens: TSiemensQty;
  end;

  TTeslaHelper = type helper for TTeslaQty
    function ToKilogramPerAmperePerSquareSecond: TKilogramPerAmperePerSquareSecondQty;
    function ToWeberPerSquareMeter: TWeberPerSquareMeterQty;
  end;

  TWeberPerSquareMeterHelper = type helper for TWeberPerSquareMeterQty
    function ToTesla: TTeslaQty;
  end;

  TKilogramPerAmperePerSquareSecondHelper = type helper for TKilogramPerAmperePerSquareSecondQty
    function ToTesla: TTeslaQty;
  end;

  TWeberHelper = type helper for TWeberQty
    function ToKilogramSquareMeterPerAmperePerSquareSecond: TKilogramSquareMeterPerAmperePerSquareSecondQty;
  end;

  TKilogramSquareMeterPerAmperePerSquareSecondHelper = type helper for TKilogramSquareMeterPerAmperePerSquareSecondQty
    function ToWeber: TWeberQty;
  end;

  THenryHelper = type helper for THenryQty
    function ToKilogramSquareMeterPerSquareAmperePerSquareSecond: TKilogramSquareMeterPerSquareAmperePerSquareSecondQty;
  end;

  TKilogramSquareMeterPerSquareAmperePerSquareSecondHelper = type helper for TKilogramSquareMeterPerSquareAmperePerSquareSecondQty
    function ToHenry: THenryQty;
  end;

  TLumenHelper = type helper for TLumenQty
    function ToCandelaSteradian: TCandelaSteradianQty;
  end;

  TCandelaSteradianHelper = type helper for TCandelaSteradianQty
    function ToLumen: TLumenQty;
  end;

  TLuxHelper = type helper for TLuxQty
    function ToCandelaSteradianPerSquareMeter: TCandelaSteradianPerSquareMeterQty;
  end;

  TCandelaSteradianPerSquareMeterHelper = type helper for TCandelaSteradianPerSquareMeterQty
    function ToLux: TLuxQty;
  end;

  TBequerelHelper = type helper for TBequerelQty
    function ToHertz: THertzQty;
  end;

  TKatalHelper = type helper for TKatalQty
    function ToMolePerSecond: TMolePerSecondQty;
  end;

  TMolePerSecondHelper = type helper for TMolePerSecondQty
    function ToKatal: TKatalQty;
  end;

  TNewtonPerCubicMeterHelper = type helper for TNewtonPerCubicMeterQty
    function ToKilogramPerSquareMeterPerSquareSecond: TKilogramPerSquareMeterPerSquareSecondQty;
    function ToPascalPerMeter: TPascalPerMeterQty;
  end;

  TPascalPerMeterHelper = type helper for TPascalPerMeterQty
    function ToNewtonPerCubicMeter: TNewtonPerCubicMeterQty;
  end;

  TKilogramPerSquareMeterPerSquareSecondHelper = type helper for TKilogramPerSquareMeterPerSquareSecondQty
    function ToNewtonPerCubicMeter: TNewtonPerCubicMeterQty;
  end;

  TNewtonPerMeterHelper = type helper for TNewtonPerMeterQty
    function ToKilogramPerSquareSecond: TKilogramPerSquareSecondQty;
    function ToPoundForcePerInch: TPoundForcePerInchQty;
    function ToWattPerSquareMeterPerHertz: TWattPerSquareMeterPerHertzQty;
    function ToJoulePerSquareMeter: TJoulePerSquareMeterQty;
  end;

  TJoulePerSquareMeterHelper = type helper for TJoulePerSquareMeterQty
    function ToNewtonPerMeter: TNewtonPerMeterQty;
  end;

  TWattPerSquareMeterPerHertzHelper = type helper for TWattPerSquareMeterPerHertzQty
    function ToNewtonPerMeter: TNewtonPerMeterQty;
  end;

  TKilogramPerSquareSecondHelper = type helper for TKilogramPerSquareSecondQty
    function ToNewtonPerMeter: TNewtonPerMeterQty;
  end;

  TPoiseuilleHelper = type helper for TPoiseuilleQty
    function ToKilogramPerMeterPerSecond: TKilogramPerMeterPerSecondQty;
    function ToPascalSecond: TPascalSecondQty;
  end;

  TPascalSecondHelper = type helper for TPascalSecondQty
    function ToPoiseuille: TPoiseuilleQty;
  end;

  TKilogramPerMeterPerSecondHelper = type helper for TKilogramPerMeterPerSecondQty
    function ToPoiseuille: TPoiseuilleQty;
  end;

  TNewtonSquareMeterHelper = type helper for TNewtonSquareMeterQty
    function ToKilogramCubicMeterPerSquareSecond: TKilogramCubicMeterPerSquareSecondQty;
  end;

  TKilogramCubicMeterPerSquareSecondHelper = type helper for TKilogramCubicMeterPerSquareSecondQty
    function ToNewtonSquareMeter: TNewtonSquareMeterQty;
  end;

  TNewtonCubicMeterHelper = type helper for TNewtonCubicMeterQty
    function ToKilogramQuarticMeterPerSquareSecond: TKilogramQuarticMeterPerSquareSecondQty;
  end;

  TKilogramQuarticMeterPerSquareSecondHelper = type helper for TKilogramQuarticMeterPerSquareSecondQty
    function ToNewtonCubicMeter: TNewtonCubicMeterQty;
  end;

  TNewtonPerSquareKilogramHelper = type helper for TNewtonPerSquareKilogramQty
    function ToMeterPerKilogramPerSquareSecond: TMeterPerKilogramPerSquareSecondQty;
  end;

  TMeterPerKilogramPerSquareSecondHelper = type helper for TMeterPerKilogramPerSquareSecondQty
    function ToNewtonPerSquareKilogram: TNewtonPerSquareKilogramQty;
  end;

  TNewtonSquareMeterPerSquareKilogramHelper = type helper for TNewtonSquareMeterPerSquareKilogramQty
    function ToCubicMeterPerKilogramPerSquareSecond: TCubicMeterPerKilogramPerSquareSecondQty;
  end;

  TCubicMeterPerKilogramPerSquareSecondHelper = type helper for TCubicMeterPerKilogramPerSquareSecondQty
    function ToNewtonSquareMeterPerSquareKilogram: TNewtonSquareMeterPerSquareKilogramQty;
  end;

  TJoulePerKelvinHelper = type helper for TJoulePerKelvinQty
    function ToKilogramSquareMeterPerSquareSecondPerKelvin: TKilogramSquareMeterPerSquareSecondPerKelvinQty;
  end;

  TKilogramSquareMeterPerSquareSecondPerKelvinHelper = type helper for TKilogramSquareMeterPerSquareSecondPerKelvinQty
    function ToJoulePerKelvin: TJoulePerKelvinQty;
  end;

  TJoulePerKilogramPerKelvinHelper = type helper for TJoulePerKilogramPerKelvinQty
    function ToSquareMeterPerSquareSecondPerKelvin: TSquareMeterPerSquareSecondPerKelvinQty;
  end;

  TSquareMeterPerSquareSecondPerKelvinHelper = type helper for TSquareMeterPerSquareSecondPerKelvinQty
    function ToJoulePerKilogramPerKelvin: TJoulePerKilogramPerKelvinQty;
  end;

  TWattPerMeterHelper = type helper for TWattPerMeterQty
    function ToKilogramMeterPerCubicSecond: TKilogramMeterPerCubicSecondQty;
  end;

  TKilogramMeterPerCubicSecondHelper = type helper for TKilogramMeterPerCubicSecondQty
    function ToWattPerMeter: TWattPerMeterQty;
  end;

  TWattPerSquareMeterHelper = type helper for TWattPerSquareMeterQty
    function ToKilogramPerCubicSecond: TKilogramPerCubicSecondQty;
  end;

  TKilogramPerCubicSecondHelper = type helper for TKilogramPerCubicSecondQty
    function ToWattPerSquareMeter: TWattPerSquareMeterQty;
  end;

  TWattPerKelvinHelper = type helper for TWattPerKelvinQty
    function ToKilogramSquareMeterPerCubicSecondPerKelvin: TKilogramSquareMeterPerCubicSecondPerKelvinQty;
  end;

  TKilogramSquareMeterPerCubicSecondPerKelvinHelper = type helper for TKilogramSquareMeterPerCubicSecondPerKelvinQty
    function ToWattPerKelvin: TWattPerKelvinQty;
  end;

  TWattPerMeterPerKelvinHelper = type helper for TWattPerMeterPerKelvinQty
    function ToKilogramMeterPerCubicSecondPerKelvin: TKilogramMeterPerCubicSecondPerKelvinQty;
  end;

  TKilogramMeterPerCubicSecondPerKelvinHelper = type helper for TKilogramMeterPerCubicSecondPerKelvinQty
    function ToWattPerMeterPerKelvin: TWattPerMeterPerKelvinQty;
  end;

  TWattPerSquareMeterPerKelvinHelper = type helper for TWattPerSquareMeterPerKelvinQty
    function ToKilogramPerCubicSecondPerKelvin: TKilogramPerCubicSecondPerKelvinQty;
  end;

  TKilogramPerCubicSecondPerKelvinHelper = type helper for TKilogramPerCubicSecondPerKelvinQty
    function ToWattPerSquareMeterPerKelvin: TWattPerSquareMeterPerKelvinQty;
  end;

  TVoltPerMeterHelper = type helper for TVoltPerMeterQty
    function ToNewtonPerCoulomb: TNewtonPerCoulombQty;
  end;

  TNewtonPerCoulombHelper = type helper for TNewtonPerCoulombQty
    function ToVoltPerMeter: TVoltPerMeterQty;
  end;

  TVoltMeterHelper = type helper for TVoltMeterQty
    function ToNewtonSquareMeterPerCoulomb: TNewtonSquareMeterPerCoulombQty;
  end;

  TNewtonSquareMeterPerCoulombHelper = type helper for TNewtonSquareMeterPerCoulombQty
    function ToVoltMeter: TVoltMeterQty;
  end;

  TTeslaMeterHelper = type helper for TTeslaMeterQty
    function ToNewtonPerAmpere: TNewtonPerAmpereQty;
  end;

  TNewtonPerAmpereHelper = type helper for TNewtonPerAmpereQty
    function ToTeslaMeter: TTeslaMeterQty;
  end;

  THenryPerMeterHelper = type helper for THenryPerMeterQty
    function ToNewtonPerSquareAmpere: TNewtonPerSquareAmpereQty;
    function ToTeslaMeterPerAmpere: TTeslaMeterPerAmpereQty;
  end;

  TTeslaMeterPerAmpereHelper = type helper for TTeslaMeterPerAmpereQty
    function ToHenryPerMeter: THenryPerMeterQty;
  end;

  TNewtonPerSquareAmpereHelper = type helper for TNewtonPerSquareAmpereQty
    function ToHenryPerMeter: THenryPerMeterQty;
  end;

  TJouleSecondHelper = type helper for TJouleSecondQty
    function ToKilogramSquareMeterPerSecond: TKilogramSquareMeterPerSecondQty;
  end;

  TJoulePerHertzHelper = type helper for TJoulePerHertzQty
    function ToKilogramSquareMeterPerSecond: TKilogramSquareMeterPerSecondQty;
  end;

  TSquareMeterAmpereHelper = type helper for TSquareMeterAmpereQty
    function ToJoulePerTesla: TJoulePerTeslaQty;
  end;

  TJoulePerTeslaHelper = type helper for TJoulePerTeslaQty
    function ToSquareMeterAmpere: TSquareMeterAmpereQty;
  end;

{ Power functions }

function SquarePower(AQuantity: TSecondQty): TSquareSecondQty;
function SquareRoot(AQuantity: TSquareSecondQty): TSecondQty;
function CubicPower(AQuantity: TSecondQty): TCubicSecondQty;
function CubicRoot(AQuantity: TCubicSecondQty): TSecondQty;
function QuarticPower(AQuantity: TSecondQty): TQuarticSecondQty;
function QuarticRoot(AQuantity: TQuarticSecondQty): TSecondQty;
function QuinticPower(AQuantity: TSecondQty): TQuinticSecondQty;
function QuinticRoot(AQuantity: TQuinticSecondQty): TSecondQty;
function SexticPower(AQuantity: TSecondQty): TSexticSecondQty;
function SexticRoot(AQuantity: TSexticSecondQty): TSecondQty;
function SquarePower(AQuantity: TSquareRootMeterQty): TMeterQty;
function SquareRoot(AQuantity: TMeterQty): TSquareRootMeterQty;
function SquarePower(AQuantity: TMeterQty): TSquareMeterQty;
function SquareRoot(AQuantity: TSquareMeterQty): TMeterQty;
function CubicPower(AQuantity: TMeterQty): TCubicMeterQty;
function CubicRoot(AQuantity: TCubicMeterQty): TMeterQty;
function SquarePower(AQuantity: TSquareMeterQty): TQuarticMeterQty;
function SquareRoot(AQuantity: TQuarticMeterQty): TSquareMeterQty;
function QuarticPower(AQuantity: TMeterQty): TQuarticMeterQty;
function QuarticRoot(AQuantity: TQuarticMeterQty): TMeterQty;
function QuinticPower(AQuantity: TMeterQty): TQuinticMeterQty;
function QuinticRoot(AQuantity: TQuinticMeterQty): TMeterQty;
function SquarePower(AQuantity: TCubicMeterQty): TSexticMeterQty;
function SquareRoot(AQuantity: TSexticMeterQty): TCubicMeterQty;
function CubicPower(AQuantity: TSquareMeterQty): TSexticMeterQty;
function CubicRoot(AQuantity: TSexticMeterQty): TSquareMeterQty;
function SexticPower(AQuantity: TMeterQty): TSexticMeterQty;
function SexticRoot(AQuantity: TSexticMeterQty): TMeterQty;
function SquarePower(AQuantity: TAmpereQty): TSquareAmpereQty;
function SquareRoot(AQuantity: TSquareAmpereQty): TAmpereQty;
function SquarePower(AQuantity: TKelvinQty): TSquareKelvinQty;
function SquareRoot(AQuantity: TSquareKelvinQty): TKelvinQty;
function CubicPower(AQuantity: TKelvinQty): TCubicKelvinQty;
function CubicRoot(AQuantity: TCubicKelvinQty): TKelvinQty;
function SquarePower(AQuantity: TSquareKelvinQty): TQuarticKelvinQty;
function SquareRoot(AQuantity: TQuarticKelvinQty): TSquareKelvinQty;
function QuarticPower(AQuantity: TKelvinQty): TQuarticKelvinQty;
function QuarticRoot(AQuantity: TQuarticKelvinQty): TKelvinQty;
function SquarePower(AQuantity: TRadianQty): TSteradianQty;
function SquareRoot(AQuantity: TSteradianQty): TRadianQty;
function SquarePower(AQuantity: THertzQty): TSquareHertzQty;
function SquareRoot(AQuantity: TSquareHertzQty): THertzQty;
function SquarePower(AQuantity: TMeterPerSecondQty): TSquareMeterPerSquareSecondQty;
function SquareRoot(AQuantity: TSquareMeterPerSquareSecondQty): TMeterPerSecondQty;
function SquarePower(AQuantity: TKilogramMeterPerSecondQty): TSquareKilogramSquareMeterPerSquareSecondQty;
function SquareRoot(AQuantity: TSquareKilogramSquareMeterPerSquareSecondQty): TKilogramMeterPerSecondQty;
function SquarePower(AQuantity: TReciprocalSquareRootMeterQty): TReciprocalMeterQty;
function SquareRoot(AQuantity: TReciprocalMeterQty): TReciprocalSquareRootMeterQty;
function CubicPower(AQuantity: TReciprocalSquareRootMeterQty): TReciprocalSquareRootCubicMeterQty;
function CubicRoot(AQuantity: TReciprocalSquareRootCubicMeterQty): TReciprocalSquareRootMeterQty;
function SquarePower(AQuantity: TReciprocalMeterQty): TReciprocalSquareMeterQty;
function SquareRoot(AQuantity: TReciprocalSquareMeterQty): TReciprocalMeterQty;
function QuarticPower(AQuantity: TReciprocalSquareRootMeterQty): TReciprocalSquareMeterQty;
function QuarticRoot(AQuantity: TReciprocalSquareMeterQty): TReciprocalSquareRootMeterQty;
function CubicPower(AQuantity: TReciprocalMeterQty): TReciprocalCubicMeterQty;
function CubicRoot(AQuantity: TReciprocalCubicMeterQty): TReciprocalMeterQty;
function SquarePower(AQuantity: TReciprocalSquareMeterQty): TReciprocalQuarticMeterQty;
function SquareRoot(AQuantity: TReciprocalQuarticMeterQty): TReciprocalSquareMeterQty;
function QuarticPower(AQuantity: TReciprocalMeterQty): TReciprocalQuarticMeterQty;
function QuarticRoot(AQuantity: TReciprocalQuarticMeterQty): TReciprocalMeterQty;
function SquarePower(AQuantity: TNewtonQty): TSquareNewtonQty;
function SquareRoot(AQuantity: TSquareNewtonQty): TNewtonQty;
function SquarePower(AQuantity: TCoulombQty): TSquareCoulombQty;
function SquareRoot(AQuantity: TSquareCoulombQty): TCoulombQty;
function SquarePower(AQuantity: TVoltQty): TSquareVoltQty;
function SquareRoot(AQuantity: TSquareVoltQty): TVoltQty;
function SquarePower(AQuantity: TKilogramPerSecondQty): TSquareKilogramPerSquareSecondQty;
function SquareRoot(AQuantity: TSquareKilogramPerSquareSecondQty): TKilogramPerSecondQty;
function SquarePower(AQuantity: TJouleQty): TSquareJouleQty;
function SquareRoot(AQuantity: TSquareJouleQty): TJouleQty;
function SquarePower(AQuantity: TKilogramSquareMeterPerSecondQty): TSquareJouleSquareSecondQty;
function SquareRoot(AQuantity: TSquareJouleSquareSecondQty): TKilogramSquareMeterPerSecondQty;

{ Trigonometric functions }

function Cos(const AQuantity: TRadians): double;
function Sin(const AQuantity: TRadians): double;
function Tan(const AQuantity: TRadians): double;
function Cotan(const AQuantity: TRadians): double;
function Secant(const AQuantity: TRadians): double;
function Cosecant(const AQuantity: TRadians): double;

function ArcCos(const AValue: double): TRadians;
function ArcSin(const AValue: double): TRadians;
function ArcTan(const AValue: double): TRadians;
function ArcTan2(const x, y: double): TRadians;

{ Override trigonometric functions }

function Cos(const AQuantity: double): double;
function Sin(const AQuantity: double): double;
function Tan(const AQuantity: double): double;
function Cotan(const AQuantity: double): double;
function Secant(const AQuantity: double): double;
function Cosecant(const AQuantity: double): double;

{ Math functions }

generic function Min<TQuantity>(const AValue1, AValue2: TQuantity): TQuantity;
generic function Max<TQuantity>(const AValue1, AValue2: TQuantity): TQuantity;

{ Useful routines }

function GetSymbol(const ASymbol: string; const Prefixes: TPrefixes): string;
function GetName(const AName: string; const Prefixes: TPrefixes): string;

{ Constants }

const
  AvogadroConstant               : TReciprocalMoles                     = (FValue: 6.02214076E+23);
  BohrMagneton                   : TSquareMeterAmperes                  = (FValue: 9.2740100657E-24);
  BohrRadius                     : TMeters                              = (FValue: 5.29177210903E-11);
  BoltzmannConstant              : TJoulesPerKelvin                     = (FValue: 1.380649E-23);
  ComptonWaveLength              : TMeters                              = (FValue: 2.42631023867E-12);
  CoulombConstant                : TNewtonSquareMetersPerSquareCoulomb  = (FValue: 8.9875517923E+9);
  DeuteronMass                   : TKilograms                           = (FValue: 3.3435837768E-27);
  ElectricPermittivity           : TFaradsPerMeter                      = (FValue: 8.8541878128E-12);
  ElectronMass                   : TKilograms                           = (FValue: 9.1093837015E-31);
  ElectronCharge                 : TCoulombs                            = (FValue: 1.602176634E-19);
  ElementaryCharge               : TCoulombs                            = (FValue: 1.602176634E-19);
  MagneticPermeability           : THenriesPerMeter                     = (FValue: 1.25663706212E-6);
  MolarGasConstant               : TJoulesPerMolePerKelvin              = (FValue: 8.314462618);
  NeutronMass                    : TKilograms                           = (FValue: 1.67492750056E-27);
  NewtonianConstantOfGravitation : TNewtonSquareMetersPerSquareKilogram = (FValue: 6.67430E-11);
  PlanckConstant                 : TJouleSeconds                        = (FValue: 6.62607015E-34);
  ProtonMass                     : TKilograms                           = (FValue: 1.67262192595E-27);
  RydbergConstant                : TReciprocalMeters                    = (FValue: 10973731.568157);
  SpeedOfLight                   : TMetersPerSecond                     = (FValue: 299792458);
  SquaredSpeedOfLight            : TSquareMetersPerSquareSecond         = (FValue: 8.98755178736818E+16);
  StandardAccelerationOfGravity  : TMetersPerSquareSecond               = (FValue: 9.80665);
  ReducedPlanckConstant          : TJouleSeconds                        = (FValue: 6.62607015E-34/2/pi);
  UnifiedAtomicMassUnit          : TKilograms                           = (FValue: 1.66053906892E-27);

const
  PrefixTable: array[pQuetta..pQuecto] of
    record  Symbol, Name: string; Exponent: longint end = (
    (Symbol: 'Q';   Name: 'quetta';  Exponent: +30),
    (Symbol: 'R';   Name: 'ronna';   Exponent: +27),
    (Symbol: 'Y';   Name: 'yotta';   Exponent: +24),
    (Symbol: 'Z';   Name: 'zetta';   Exponent: +21),
    (Symbol: 'E';   Name: 'exa';     Exponent: +18),
    (Symbol: 'P';   Name: 'peta';    Exponent: +15),
    (Symbol: 'T';   Name: 'tera';    Exponent: +12),
    (Symbol: 'G';   Name: 'giga';    Exponent: +09),
    (Symbol: 'M';   Name: 'mega';    Exponent: +06),
    (Symbol: 'k';   Name: 'kilo';    Exponent: +03),
    (Symbol: 'h';   Name: 'hecto';   Exponent: +02),
    (Symbol: 'da';  Name: 'deca';    Exponent: +01),
    (Symbol: '';    Name: '';        Exponent:  00),
    (Symbol: 'd';   Name: 'deci';    Exponent: -01),
    (Symbol: 'c';   Name: 'centi';   Exponent: -02),
    (Symbol: 'm';   Name: 'milli';   Exponent: -03),
    (Symbol: 'μ';   Name: 'micro';   Exponent: -06),
    (Symbol: 'n';   Name: 'nano';    Exponent: -09),
    (Symbol: 'p';   Name: 'pico';    Exponent: -12),
    (Symbol: 'f';   Name: 'femto';   Exponent: -15),
    (Symbol: 'a';   Name: 'atto';    Exponent: -18),
    (Symbol: 'z';   Name: 'zepto';   Exponent: -21),
    (Symbol: 'y';   Name: 'yocto';   Exponent: -24),
    (Symbol: 'r';   Name: 'ronto';   Exponent: -27),
    (Symbol: 'q';   Name: 'quecto';  Exponent: -30)
  );

implementation

uses Math;

function GetSymbol(const ASymbol: string; const Prefixes: TPrefixes): string;
var
  PrefixCount: longint;
begin
  PrefixCount := Length(Prefixes);
  case PrefixCount of
    0:  result := ASymbol;
    1:  result := Format(ASymbol, [
          PrefixTable[Prefixes[0]].Symbol]);
    2:  result := Format(ASymbol, [
          PrefixTable[Prefixes[0]].Symbol,
          PrefixTable[Prefixes[1]].Symbol]);
    3:  result := Format(ASymbol, [
          PrefixTable[Prefixes[0]].Symbol,
          PrefixTable[Prefixes[1]].Symbol,
          PrefixTable[Prefixes[2]].Symbol]);
  else raise Exception.Create('Wrong number of prefixes.');
  end;
end;

function GetName(const AName: string; const Prefixes: TPrefixes): string;
var
  PrefixCount: longint;
begin
  PrefixCount := Length(Prefixes);
  case PrefixCount of
    0:  result := AName;
    1:  result := Format(AName, [
          PrefixTable[Prefixes[0]].Name]);
    2:  result := Format(AName, [
          PrefixTable[Prefixes[0]].Name,
          PrefixTable[Prefixes[1]].Name]);
    3:  result := Format(AName, [
          PrefixTable[Prefixes[0]].Name,
          PrefixTable[Prefixes[1]].Name,
          PrefixTable[Prefixes[2]].Name]);
   else raise Exception.Create('Wrong number of prefixes.');
   end;
end;

{ TQuantity classes }

{$DEFINE CSYMBOL:=rsSquareMeterAmpereSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterAmpereName}
{$DEFINE CPLURALNAME:=rsSquareMeterAmperePluralName}
{$DEFINE CPREFIXES:=cSquareMeterAmperePrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterAmpereExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterAmpereQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsSquareMeterPerSquareKilogramSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterPerSquareKilogramName}
{$DEFINE CPLURALNAME:=rsSquareMeterPerSquareKilogramPluralName}
{$DEFINE CPREFIXES:=cSquareMeterPerSquareKilogramPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterPerSquareKilogramExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSquareKilogramQty}{$i adim.inc}

class operator TSquareMeterPerSquareKilogramQty./(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareMeterPerSquareKilogramQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterPerSquareKilogramQty.*(const ALeft: TSquareMeterPerSquareKilogramQty; const ARight: TNewtonQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSquareKilogramQty.*(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareKilogramQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSquareKilogramQty./(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareKilogramQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterPerSquareKilogramQty.*(const ALeft: TSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSquareKilogramQty.*(const ALeft: TSquareKilogramQty; const ARight: TSquareMeterPerSquareKilogramQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsGrayPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsGrayPerSecondName}
{$DEFINE CPLURALNAME:=rsGrayPerSecondPluralName}
{$DEFINE CPREFIXES:=cGrayPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cGrayPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TGrayPerSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsVoltMeterPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsVoltMeterPerSecondName}
{$DEFINE CPLURALNAME:=rsVoltMeterPerSecondPluralName}
{$DEFINE CPREFIXES:=cVoltMeterPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cVoltMeterPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TVoltMeterPerSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsMoleSymbol}
{$DEFINE CSINGULARNAME:=rsMoleName}
{$DEFINE CPLURALNAME:=rsMolePluralName}
{$DEFINE CPREFIXES:=cMolePrefixes}
{$DEFINE CEXPONENTS:=cMoleExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMoleQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsWattSymbol}
{$DEFINE CSINGULARNAME:=rsWattName}
{$DEFINE CPLURALNAME:=rsWattPluralName}
{$DEFINE CPREFIXES:=cWattPrefixes}
{$DEFINE CEXPONENTS:=cWattExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsFaradSymbol}
{$DEFINE CSINGULARNAME:=rsFaradName}
{$DEFINE CPLURALNAME:=rsFaradPluralName}
{$DEFINE CPREFIXES:=cFaradPrefixes}
{$DEFINE CEXPONENTS:=cFaradExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TFaradQty}{$i adim.inc}

class operator TFaradQty./(const ALeft: TSquareCoulombQty; const ARight: TFaradQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TFaradQty.*(const ALeft: TFaradQty; const ARight: TJouleQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TFaradQty.*(const ALeft: TJouleQty; const ARight: TFaradQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerMeterName}
{$DEFINE CPLURALNAME:=rsWattPerMeterPluralName}
{$DEFINE CPREFIXES:=cWattPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cWattPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsReciprocalSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalSquareMeterName}
{$DEFINE CPLURALNAME:=rsReciprocalSquareMeterPluralName}
{$DEFINE CPREFIXES:=cReciprocalSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalSquareMeterQty}{$i adim.inc}

class operator TReciprocalSquareMeterQty.*(const ALeft: TSquareJouleSquareSecondQty; const ARight: TReciprocalSquareMeterQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalSquareMeterQty.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareJouleSquareSecondQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalSquareMeterQty./(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TReciprocalSquareMeterQty): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalSquareMeterQty./(const ALeft: double; const ARight: TReciprocalSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TReciprocalSquareMeterQty.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TReciprocalSquareMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareKilogramPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareKilogramPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsSquareKilogramPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cSquareKilogramPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareKilogramPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramPerSquareSecondQty}{$i adim.inc}

class operator TSquareKilogramPerSquareSecondQty./(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerSquareSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareKilogramPerSquareSecondQty.*(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TSquareSecondQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareKilogramPerSquareSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TSquareKilogramPerSquareSecondQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareKilogramPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSquareKilogramPerMeterName}
{$DEFINE CPLURALNAME:=rsSquareKilogramPerMeterPluralName}
{$DEFINE CPREFIXES:=cSquareKilogramPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cSquareKilogramPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramPerMeterQty}{$i adim.inc}

class operator TSquareKilogramPerMeterQty.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramPerMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareKilogramPerMeterQty.*(const ALeft: TSquareKilogramPerMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareKilogramPerMeterQty./(const ALeft: TJouleQty; const ARight: TSquareKilogramPerMeterQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsQuarticMeterSecondSymbol}
{$DEFINE CSINGULARNAME:=rsQuarticMeterSecondName}
{$DEFINE CPLURALNAME:=rsQuarticMeterSecondPluralName}
{$DEFINE CPREFIXES:=cQuarticMeterSecondPrefixes}
{$DEFINE CEXPONENTS:=cQuarticMeterSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TQuarticMeterSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsNewtonSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonName}
{$DEFINE CPLURALNAME:=rsNewtonPluralName}
{$DEFINE CPREFIXES:=cNewtonPrefixes}
{$DEFINE CEXPONENTS:=cNewtonExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonQty}{$i adim.inc}

class operator TNewtonQty./(const ALeft: TNewtonCubicMeterQty; const ARight: TNewtonQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonQty.*(const ALeft: TCubicMeterQty; const ARight: TNewtonQty): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonQty.*(const ALeft: TNewtonQty; const ARight: TCubicMeterQty): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonQty./(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonQty.*(const ALeft: TSquareMeterQty; const ARight: TNewtonQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonQty.*(const ALeft: TNewtonQty; const ARight: TSquareMeterQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonQty./(const ALeft: TSquareNewtonQty; const ARight: TNewtonQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonQty.*(const ALeft: TNewtonQty; const ARight: TNewtonQty): TSquareNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonQty./(const ALeft: TKilogramMeterQty; const ARight: TNewtonQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonQty.*(const ALeft: TNewtonQty; const ARight: TSquareSecondQty): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonQty.*(const ALeft: TSquareSecondQty; const ARight: TNewtonQty): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsLumenSecondSymbol}
{$DEFINE CSINGULARNAME:=rsLumenSecondName}
{$DEFINE CPLURALNAME:=rsLumenSecondPluralName}
{$DEFINE CPREFIXES:=cLumenSecondPrefixes}
{$DEFINE CEXPONENTS:=cLumenSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TLumenSecondQty}{$i adim.inc}

class operator TLumenSecondQty./(const ALeft: TLumenSecondPerCubicMeterQty; const ARight: TLumenSecondQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TLumenSecondQty.*(const ALeft: TCubicMeterQty; const ARight: TLumenSecondQty): TLumenSecondPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TLumenSecondQty.*(const ALeft: TLumenSecondQty; const ARight: TCubicMeterQty): TLumenSecondPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramMeterPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramMeterPerSecondName}
{$DEFINE CPLURALNAME:=rsKilogramMeterPerSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramMeterPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramMeterPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterPerSecondQty}{$i adim.inc}

class operator TKilogramMeterPerSecondQty./(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TKilogramMeterPerSecondQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramMeterPerSecondQty.*(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramMeterPerSecondQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareCoulombPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSquareCoulombPerMeterName}
{$DEFINE CPLURALNAME:=rsSquareCoulombPerMeterPluralName}
{$DEFINE CPREFIXES:=cSquareCoulombPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cSquareCoulombPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareCoulombPerMeterQty}{$i adim.inc}

class operator TSquareCoulombPerMeterQty.*(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombPerMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareCoulombPerMeterQty.*(const ALeft: TSquareCoulombPerMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareCoulombPerMeterQty./(const ALeft: TJouleQty; const ARight: TSquareCoulombPerMeterQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsJoulePerMoleSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerMoleName}
{$DEFINE CPLURALNAME:=rsJoulePerMolePluralName}
{$DEFINE CPREFIXES:=cJoulePerMolePrefixes}
{$DEFINE CEXPONENTS:=cJoulePerMoleExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerMoleQty}{$i adim.inc}

class operator TJoulePerMoleQty./(const ALeft: TJouleQty; const ARight: TJoulePerMoleQty): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TJoulePerMoleQty.*(const ALeft: TJoulePerMoleQty; const ARight: TMoleQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJoulePerMoleQty.*(const ALeft: TMoleQty; const ARight: TJoulePerMoleQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsSquareMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cSquareMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$i adim.inc}

class operator TSquareMeterPerSquareSecondQty./(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterPerSquareSecondQty.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TSquareSecondQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSquareSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TSquareMeterPerSquareSecondQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerSecondName}
{$DEFINE CPLURALNAME:=rsKilogramPerSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerSecondQty}{$i adim.inc}

class operator TKilogramPerSecondQty./(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TKilogramPerSecondQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerSecondQty.*(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerSecondQty): TSquareKilogramPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerSecondQty./(const ALeft: TWattQty; const ARight: TKilogramPerSecondQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerSecondQty.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerSecondQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerSecondQty.*(const ALeft: TKilogramPerSecondQty; const ARight: TSquareMeterPerSquareSecondQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsNewtonPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonPerMeterName}
{$DEFINE CPLURALNAME:=rsNewtonPerMeterPluralName}
{$DEFINE CPREFIXES:=cNewtonPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cNewtonPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$i adim.inc}

class operator TNewtonPerMeterQty./(const ALeft: TJouleQty; const ARight: TNewtonPerMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonPerMeterQty.*(const ALeft: TNewtonPerMeterQty; const ARight: TSquareMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonPerMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TNewtonPerMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsJoulePerKilogramPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerKilogramPerKelvinName}
{$DEFINE CPLURALNAME:=rsJoulePerKilogramPerKelvinPluralName}
{$DEFINE CPREFIXES:=cJoulePerKilogramPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerKilogramPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerKilogramPerKelvinQty}{$i adim.inc}

class operator TJoulePerKilogramPerKelvinQty./(const ALeft: TJouleQty; const ARight: TJoulePerKilogramPerKelvinQty): TKilogramKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TJoulePerKilogramPerKelvinQty.*(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKilogramKelvinQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJoulePerKilogramPerKelvinQty.*(const ALeft: TKilogramKelvinQty; const ARight: TJoulePerKilogramPerKelvinQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerSteradianPerHertzSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerSteradianPerHertzName}
{$DEFINE CPLURALNAME:=rsWattPerSteradianPerHertzPluralName}
{$DEFINE CPREFIXES:=cWattPerSteradianPerHertzPrefixes}
{$DEFINE CEXPONENTS:=cWattPerSteradianPerHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerSteradianPerHertzQty}{$i adim.inc}

class operator TWattPerSteradianPerHertzQty./(const ALeft: TWattQty; const ARight: TWattPerSteradianPerHertzQty): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSteradianPerHertzQty.*(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSteradianHertzQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSteradianPerHertzQty.*(const ALeft: TSteradianHertzQty; const ARight: TWattPerSteradianPerHertzQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsAmperePerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsAmperePerMeterName}
{$DEFINE CPLURALNAME:=rsAmperePerMeterPluralName}
{$DEFINE CPREFIXES:=cAmperePerMeterPrefixes}
{$DEFINE CEXPONENTS:=cAmperePerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TAmperePerMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsWattPerSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerSteradianName}
{$DEFINE CPLURALNAME:=rsWattPerSteradianPluralName}
{$DEFINE CPREFIXES:=cWattPerSteradianPrefixes}
{$DEFINE CEXPONENTS:=cWattPerSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerSteradianQty}{$i adim.inc}

class operator TWattPerSteradianQty./(const ALeft: TWattQty; const ARight: TWattPerSteradianQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSteradianQty.*(const ALeft: TWattPerSteradianQty; const ARight: TSteradianQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSteradianQty.*(const ALeft: TSteradianQty; const ARight: TWattPerSteradianQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerKelvinName}
{$DEFINE CPLURALNAME:=rsWattPerKelvinPluralName}
{$DEFINE CPREFIXES:=cWattPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cWattPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsCandelaSymbol}
{$DEFINE CSINGULARNAME:=rsCandelaName}
{$DEFINE CPLURALNAME:=rsCandelaPluralName}
{$DEFINE CPREFIXES:=cCandelaPrefixes}
{$DEFINE CEXPONENTS:=cCandelaExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCandelaQty}{$i adim.inc}

class operator TCandelaQty./(const ALeft: TLumenQty; const ARight: TCandelaQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCandelaQty.*(const ALeft: TSteradianQty; const ARight: TCandelaQty): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCandelaQty.*(const ALeft: TCandelaQty; const ARight: TSteradianQty): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsJoulePerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerKelvinName}
{$DEFINE CPLURALNAME:=rsJoulePerKelvinPluralName}
{$DEFINE CPREFIXES:=cJoulePerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsSiemensPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSiemensPerMeterName}
{$DEFINE CPLURALNAME:=rsSiemensPerMeterPluralName}
{$DEFINE CPREFIXES:=cSiemensPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cSiemensPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSiemensPerMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsCubicMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsCubicMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsCubicMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cCubicMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cCubicMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicMeterPerSquareSecondQty}{$i adim.inc}

class operator TCubicMeterPerSquareSecondQty./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TMeterPerSquareSecondQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicMeterPerSquareSecondQty./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareMeterQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicMeterPerSquareSecondQty./(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerSquareSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicMeterPerSquareSecondQty.*(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareSecondQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCubicMeterPerSquareSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TCubicMeterPerSquareSecondQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramName}
{$DEFINE CPLURALNAME:=rsKilogramPluralName}
{$DEFINE CPREFIXES:=cKilogramPrefixes}
{$DEFINE CEXPONENTS:=cKilogramExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramQty}{$i adim.inc}

class operator TKilogramQty./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TKilogramQty): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TNewtonCubicMeterQty): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TNewtonCubicMeterQty; const ARight: TKilogramQty): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TKilogramQty): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TNewtonPerMeterQty; const ARight: TKilogramQty): TSquareKilogramPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TNewtonPerMeterQty): TSquareKilogramPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKilogramQty): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TJoulePerKilogramPerKelvinQty): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TJoulePerKelvinQty; const ARight: TKilogramQty): TJoulePerKilogramPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TKilogramQty): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TKilogramQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TNewtonSquareMeterQty; const ARight: TKilogramQty): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TKilogramQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TCubicMeterPerSquareSecondQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TKilogramSquareSecondQty; const ARight: TKilogramQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TSquareSecondQty; const ARight: TKilogramQty): TKilogramSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TSquareSecondQty): TKilogramSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TJouleQty; const ARight: TKilogramQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TJouleQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TKilogramQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TJouleQty; const ARight: TKilogramQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TSquareMeterPerSquareSecondQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TNewtonQty; const ARight: TKilogramQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TKilogramQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TMeterPerSquareSecondQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TKilogramSquareMeterQty; const ARight: TKilogramQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TSquareMeterQty; const ARight: TKilogramQty): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TSquareMeterQty): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramQty./(const ALeft: TSquareKilogramQty; const ARight: TKilogramQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramQty.*(const ALeft: TKilogramQty; const ARight: TKilogramQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareSecondQty}{$i adim.inc}

class operator TKilogramSquareSecondQty.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TKilogramSquareSecondQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramSquareSecondQty.*(const ALeft: TKilogramSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramSquareSecondQty./(const ALeft: TCubicMeterQty; const ARight: TKilogramSquareSecondQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsReciprocalSquareRootCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalSquareRootCubicMeterName}
{$DEFINE CPLURALNAME:=rsReciprocalSquareRootCubicMeterPluralName}
{$DEFINE CPREFIXES:=cReciprocalSquareRootCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalSquareRootCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalSquareRootCubicMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsReciprocalMeterSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalMeterName}
{$DEFINE CPLURALNAME:=rsReciprocalMeterPluralName}
{$DEFINE CPREFIXES:=cReciprocalMeterPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalMeterQty}{$i adim.inc}

class operator TReciprocalMeterQty./(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalMeterQty.*(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsNewtonSquareMeterPerSquareKilogramSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonSquareMeterPerSquareKilogramName}
{$DEFINE CPLURALNAME:=rsNewtonSquareMeterPerSquareKilogramPluralName}
{$DEFINE CPREFIXES:=cNewtonSquareMeterPerSquareKilogramPrefixes}
{$DEFINE CEXPONENTS:=cNewtonSquareMeterPerSquareKilogramExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareKilogramQty}{$i adim.inc}

class operator TNewtonSquareMeterPerSquareKilogramQty./(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramQty.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramQty.*(const ALeft: TSquareKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerSecondName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$i adim.inc}

class operator TKilogramSquareMeterPerSecondQty./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramSquareMeterPerSecondQty.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramSquareMeterPerSecondQty./(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramSquareMeterPerSecondQty.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TReciprocalSquareMeterQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramSquareMeterPerSecondQty.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramSquareMeterPerSecondQty./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramSquareMeterPerSecondQty.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TReciprocalMeterQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramSquareMeterPerSecondQty.*(const ALeft: TReciprocalMeterQty; const ARight: TKilogramSquareMeterPerSecondQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCubicSecondSymbol}
{$DEFINE CSINGULARNAME:=rsCubicSecondName}
{$DEFINE CPLURALNAME:=rsCubicSecondPluralName}
{$DEFINE CPREFIXES:=cCubicSecondPrefixes}
{$DEFINE CEXPONENTS:=cCubicSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicSecondQty}{$i adim.inc}

class operator TCubicSecondQty./(const ALeft: TSexticSecondQty; const ARight: TCubicSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicSecondQty.*(const ALeft: TCubicSecondQty; const ARight: TCubicSecondQty): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCubicSecondQty./(const ALeft: TQuinticSecondQty; const ARight: TCubicSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicSecondQty.*(const ALeft: TCubicSecondQty; const ARight: TSquareSecondQty): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCubicSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TCubicSecondQty): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareVoltSymbol}
{$DEFINE CSINGULARNAME:=rsSquareVoltName}
{$DEFINE CPLURALNAME:=rsSquareVoltPluralName}
{$DEFINE CPREFIXES:=cSquareVoltPrefixes}
{$DEFINE CEXPONENTS:=cSquareVoltExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareVoltQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsKilogramPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsKilogramPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cKilogramPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerSquareMeterQty}{$i adim.inc}

class operator TKilogramPerSquareMeterQty./(const ALeft: TKilogramQty; const ARight: TKilogramPerSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerSquareMeterQty.*(const ALeft: TKilogramPerSquareMeterQty; const ARight: TSquareMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TKilogramPerSquareMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterName}
{$DEFINE CPLURALNAME:=rsSquareMeterPluralName}
{$DEFINE CPREFIXES:=cSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterQty}{$i adim.inc}

class operator TSquareMeterQty./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterQty): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSteradianHertzQty; const ARight: TSquareMeterQty): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TSteradianHertzQty): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty./(const ALeft: TSquareMeterSteradianQty; const ARight: TSquareMeterQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSteradianQty; const ARight: TSquareMeterQty): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TSteradianQty): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareMeterQty): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramSquareMeterPerSquareSecondQty): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TSquareMeterQty): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty./(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TSquareMeterQty): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TQuarticKelvinQty; const ARight: TSquareMeterQty): TSquareMeterQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TQuarticKelvinQty): TSquareMeterQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty./(const ALeft: TNewtonCubicMeterQty; const ARight: TSquareMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TJouleQty): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TJouleQty; const ARight: TSquareMeterQty): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty./(const ALeft: TSexticMeterQty; const ARight: TSquareMeterQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TQuarticMeterQty): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TQuarticMeterQty; const ARight: TSquareMeterQty): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty./(const ALeft: TQuinticMeterQty; const ARight: TSquareMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TCubicMeterQty): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TSquareMeterQty): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterQty./(const ALeft: TQuarticMeterQty; const ARight: TSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TSquareMeterQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareMeterPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterPerSecondName}
{$DEFINE CPLURALNAME:=rsSquareMeterPerSecondPluralName}
{$DEFINE CPREFIXES:=cSquareMeterPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSecondQty}{$i adim.inc}

class operator TSquareMeterPerSecondQty./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterPerSecondQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterPerSecondQty.*(const ALeft: TSteradianQty; const ARight: TSquareMeterPerSecondQty): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSecondQty.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TSteradianQty): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSecondQty./(const ALeft: TSquareMeterAmpereQty; const ARight: TSquareMeterPerSecondQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterPerSecondQty.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TCoulombQty): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSecondQty.*(const ALeft: TCoulombQty; const ARight: TSquareMeterPerSecondQty): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSecondQty./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSquareMeterPerSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterPerSecondQty.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TKilogramQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSecondQty.*(const ALeft: TKilogramQty; const ARight: TSquareMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsJoulePerRadianSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerRadianName}
{$DEFINE CPLURALNAME:=rsJoulePerRadianPluralName}
{$DEFINE CPREFIXES:=cJoulePerRadianPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerRadianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerRadianQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsRadianSymbol}
{$DEFINE CSINGULARNAME:=rsRadianName}
{$DEFINE CPLURALNAME:=rsRadianPluralName}
{$DEFINE CPREFIXES:=cRadianPrefixes}
{$DEFINE CEXPONENTS:=cRadianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TRadianQty}{$i adim.inc}

class operator TRadianQty.*(const ALeft: TJoulePerRadianQty; const ARight: TRadianQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TRadianQty.*(const ALeft: TRadianQty; const ARight: TJoulePerRadianQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TRadianQty./(const ALeft: TJouleQty; const ARight: TRadianQty): TJoulePerRadianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TRadianQty./(const ALeft: TNewtonRadianQty; const ARight: TRadianQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TRadianQty.*(const ALeft: TRadianQty; const ARight: TNewtonQty): TNewtonRadianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TRadianQty.*(const ALeft: TNewtonQty; const ARight: TRadianQty): TNewtonRadianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TRadianQty./(const ALeft: TSteradianQty; const ARight: TRadianQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TRadianQty.*(const ALeft: TRadianQty; const ARight: TRadianQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCoulombPerKilogramSymbol}
{$DEFINE CSINGULARNAME:=rsCoulombPerKilogramName}
{$DEFINE CPLURALNAME:=rsCoulombPerKilogramPluralName}
{$DEFINE CPREFIXES:=cCoulombPerKilogramPrefixes}
{$DEFINE CEXPONENTS:=cCoulombPerKilogramExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCoulombPerKilogramQty}{$i adim.inc}

class operator TCoulombPerKilogramQty./(const ALeft: TSquareMeterAmpereQty; const ARight: TCoulombPerKilogramQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerKilogramQty.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TCoulombPerKilogramQty): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerKilogramQty.*(const ALeft: TCoulombPerKilogramQty; const ARight: TKilogramSquareMeterPerSecondQty): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerKilogramQty./(const ALeft: TCoulombQty; const ARight: TCoulombPerKilogramQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerKilogramQty.*(const ALeft: TCoulombPerKilogramQty; const ARight: TKilogramQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerKilogramQty.*(const ALeft: TKilogramQty; const ARight: TCoulombPerKilogramQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsMeterSteradianName}
{$DEFINE CPLURALNAME:=rsMeterSteradianPluralName}
{$DEFINE CPREFIXES:=cMeterSteradianPrefixes}
{$DEFINE CEXPONENTS:=cMeterSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterSteradianQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsAmpereSymbol}
{$DEFINE CSINGULARNAME:=rsAmpereName}
{$DEFINE CPLURALNAME:=rsAmperePluralName}
{$DEFINE CPREFIXES:=cAmperePrefixes}
{$DEFINE CEXPONENTS:=cAmpereExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TAmpereQty}{$i adim.inc}

class operator TAmpereQty./(const ALeft: TSquareMeterAmpereQty; const ARight: TAmpereQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TAmpereQty.*(const ALeft: TAmpereQty; const ARight: TSquareMeterQty): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TAmpereQty.*(const ALeft: TSquareMeterQty; const ARight: TAmpereQty): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TAmpereQty.*(const ALeft: TTeslaMeterQty; const ARight: TAmpereQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TAmpereQty.*(const ALeft: TAmpereQty; const ARight: TTeslaMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TAmpereQty./(const ALeft: TNewtonQty; const ARight: TAmpereQty): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TAmpereQty./(const ALeft: TSquareAmpereQty; const ARight: TAmpereQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TAmpereQty.*(const ALeft: TAmpereQty; const ARight: TAmpereQty): TSquareAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSiemensSymbol}
{$DEFINE CSINGULARNAME:=rsSiemensName}
{$DEFINE CPLURALNAME:=rsSiemensPluralName}
{$DEFINE CPREFIXES:=cSiemensPrefixes}
{$DEFINE CEXPONENTS:=cSiemensExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSiemensQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsCoulombSymbol}
{$DEFINE CSINGULARNAME:=rsCoulombName}
{$DEFINE CPLURALNAME:=rsCoulombPluralName}
{$DEFINE CPREFIXES:=cCoulombPrefixes}
{$DEFINE CEXPONENTS:=cCoulombExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCoulombQty}{$i adim.inc}

class operator TCoulombQty./(const ALeft: TSquareCoulombQty; const ARight: TCoulombQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombQty.*(const ALeft: TCoulombQty; const ARight: TCoulombQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsQuarticMeterSymbol}
{$DEFINE CSINGULARNAME:=rsQuarticMeterName}
{$DEFINE CPLURALNAME:=rsQuarticMeterPluralName}
{$DEFINE CPREFIXES:=cQuarticMeterPrefixes}
{$DEFINE CEXPONENTS:=cQuarticMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TQuarticMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsPascalSymbol}
{$DEFINE CSINGULARNAME:=rsPascalName}
{$DEFINE CPLURALNAME:=rsPascalPluralName}
{$DEFINE CPREFIXES:=cPascalPrefixes}
{$DEFINE CEXPONENTS:=cPascalExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPascalQty}{$i adim.inc}

class operator TPascalQty./(const ALeft: TNewtonSquareMeterQty; const ARight: TPascalQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TPascalQty.*(const ALeft: TQuarticMeterQty; const ARight: TPascalQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TPascalQty.*(const ALeft: TPascalQty; const ARight: TQuarticMeterQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TPascalQty./(const ALeft: TJouleQty; const ARight: TPascalQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TPascalQty.*(const ALeft: TCubicMeterQty; const ARight: TPascalQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TPascalQty.*(const ALeft: TPascalQty; const ARight: TCubicMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TPascalQty./(const ALeft: TNewtonQty; const ARight: TPascalQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TPascalQty.*(const ALeft: TPascalQty; const ARight: TSquareMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TPascalQty.*(const ALeft: TSquareMeterQty; const ARight: TPascalQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramPerQuarticMeterSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerQuarticMeterName}
{$DEFINE CPLURALNAME:=rsKilogramPerQuarticMeterPluralName}
{$DEFINE CPREFIXES:=cKilogramPerQuarticMeterPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerQuarticMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerQuarticMeterQty}{$i adim.inc}

class operator TKilogramPerQuarticMeterQty./(const ALeft: TKilogramQty; const ARight: TKilogramPerQuarticMeterQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerQuarticMeterQty.*(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TQuarticMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerQuarticMeterQty.*(const ALeft: TQuarticMeterQty; const ARight: TKilogramPerQuarticMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsReciprocalMoleSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalMoleName}
{$DEFINE CPLURALNAME:=rsReciprocalMolePluralName}
{$DEFINE CPREFIXES:=cReciprocalMolePrefixes}
{$DEFINE CEXPONENTS:=cReciprocalMoleExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalMoleQty}{$i adim.inc}

class operator TReciprocalMoleQty./(const ALeft: double; const ARight: TReciprocalMoleQty): TMoleQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsNewtonPerSquareCoulombSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonPerSquareCoulombName}
{$DEFINE CPLURALNAME:=rsNewtonPerSquareCoulombPluralName}
{$DEFINE CPREFIXES:=cNewtonPerSquareCoulombPrefixes}
{$DEFINE CEXPONENTS:=cNewtonPerSquareCoulombExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonPerSquareCoulombQty}{$i adim.inc}

class operator TNewtonPerSquareCoulombQty./(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TNewtonPerSquareCoulombQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonPerSquareCoulombQty.*(const ALeft: TSquareMeterQty; const ARight: TNewtonPerSquareCoulombQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonPerSquareCoulombQty.*(const ALeft: TNewtonPerSquareCoulombQty; const ARight: TSquareMeterQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonPerSquareCoulombQty./(const ALeft: TNewtonQty; const ARight: TNewtonPerSquareCoulombQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonPerSquareCoulombQty.*(const ALeft: TNewtonPerSquareCoulombQty; const ARight: TSquareCoulombQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonPerSquareCoulombQty.*(const ALeft: TSquareCoulombQty; const ARight: TNewtonPerSquareCoulombQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsNewtonRadianSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonRadianName}
{$DEFINE CPLURALNAME:=rsNewtonRadianPluralName}
{$DEFINE CPREFIXES:=cNewtonRadianPrefixes}
{$DEFINE CEXPONENTS:=cNewtonRadianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonRadianQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsNewtonPerSquareKilogramSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonPerSquareKilogramName}
{$DEFINE CPLURALNAME:=rsNewtonPerSquareKilogramPluralName}
{$DEFINE CPREFIXES:=cNewtonPerSquareKilogramPrefixes}
{$DEFINE CEXPONENTS:=cNewtonPerSquareKilogramExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonPerSquareKilogramQty}{$i adim.inc}

class operator TNewtonPerSquareKilogramQty./(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TNewtonPerSquareKilogramQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonPerSquareKilogramQty.*(const ALeft: TSquareMeterQty; const ARight: TNewtonPerSquareKilogramQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonPerSquareKilogramQty.*(const ALeft: TNewtonPerSquareKilogramQty; const ARight: TSquareMeterQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonPerSquareKilogramQty./(const ALeft: TNewtonQty; const ARight: TNewtonPerSquareKilogramQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonPerSquareKilogramQty.*(const ALeft: TNewtonPerSquareKilogramQty; const ARight: TSquareKilogramQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonPerSquareKilogramQty.*(const ALeft: TSquareKilogramQty; const ARight: TNewtonPerSquareKilogramQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsHenrySymbol}
{$DEFINE CSINGULARNAME:=rsHenryName}
{$DEFINE CPLURALNAME:=rsHenryPluralName}
{$DEFINE CPREFIXES:=cHenryPrefixes}
{$DEFINE CEXPONENTS:=cHenryExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=THenryQty}{$i adim.inc}

class operator THenryQty./(const ALeft: TWeberQty; const ARight: THenryQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THenryQty.*(const ALeft: THenryQty; const ARight: TAmpereQty): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THenryQty.*(const ALeft: TAmpereQty; const ARight: THenryQty): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerQuarticKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerQuarticKelvinName}
{$DEFINE CPLURALNAME:=rsWattPerQuarticKelvinPluralName}
{$DEFINE CPREFIXES:=cWattPerQuarticKelvinPrefixes}
{$DEFINE CEXPONENTS:=cWattPerQuarticKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerQuarticKelvinQty}{$i adim.inc}

class operator TWattPerQuarticKelvinQty./(const ALeft: TWattQty; const ARight: TWattPerQuarticKelvinQty): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerQuarticKelvinQty.*(const ALeft: TWattPerQuarticKelvinQty; const ARight: TQuarticKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerQuarticKelvinQty.*(const ALeft: TQuarticKelvinQty; const ARight: TWattPerQuarticKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWeberSymbol}
{$DEFINE CSINGULARNAME:=rsWeberName}
{$DEFINE CPLURALNAME:=rsWeberPluralName}
{$DEFINE CPREFIXES:=cWeberPrefixes}
{$DEFINE CEXPONENTS:=cWeberExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWeberQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsVoltPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsVoltPerMeterName}
{$DEFINE CPLURALNAME:=rsVoltPerMeterPluralName}
{$DEFINE CPREFIXES:=cVoltPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cVoltPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TVoltPerMeterQty}{$i adim.inc}

class operator TVoltPerMeterQty./(const ALeft: TVoltMeterQty; const ARight: TVoltPerMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TVoltPerMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TVoltPerMeterQty): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltPerMeterQty.*(const ALeft: TVoltPerMeterQty; const ARight: TSquareMeterQty): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltPerMeterQty./(const ALeft: TNewtonQty; const ARight: TVoltPerMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TVoltPerMeterQty.*(const ALeft: TVoltPerMeterQty; const ARight: TCoulombQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltPerMeterQty.*(const ALeft: TCoulombQty; const ARight: TVoltPerMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareKilogramSquareMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareKilogramSquareMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsSquareKilogramSquareMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cSquareKilogramSquareMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareKilogramSquareMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramSquareMeterPerSquareSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsCubicMeterPerKilogramSymbol}
{$DEFINE CSINGULARNAME:=rsCubicMeterPerKilogramName}
{$DEFINE CPLURALNAME:=rsCubicMeterPerKilogramPluralName}
{$DEFINE CPREFIXES:=cCubicMeterPerKilogramPrefixes}
{$DEFINE CEXPONENTS:=cCubicMeterPerKilogramExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicMeterPerKilogramQty}{$i adim.inc}

class operator TCubicMeterPerKilogramQty./(const ALeft: TCubicMeterPerKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicMeterPerKilogramQty./(const ALeft: TCubicMeterPerKilogramQty; const ARight: TSquareSecondQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicMeterPerKilogramQty./(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerKilogramQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicMeterPerKilogramQty.*(const ALeft: TCubicMeterPerKilogramQty; const ARight: TKilogramQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCubicMeterPerKilogramQty.*(const ALeft: TKilogramQty; const ARight: TCubicMeterPerKilogramQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareMeterKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterKelvinName}
{$DEFINE CPLURALNAME:=rsSquareMeterKelvinPluralName}
{$DEFINE CPREFIXES:=cSquareMeterKelvinPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsWattPerCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerCubicMeterName}
{$DEFINE CPLURALNAME:=rsWattPerCubicMeterPluralName}
{$DEFINE CPREFIXES:=cWattPerCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cWattPerCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerCubicMeterQty}{$i adim.inc}

class operator TWattPerCubicMeterQty./(const ALeft: TWattPerMeterQty; const ARight: TWattPerCubicMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerCubicMeterQty.*(const ALeft: TWattPerCubicMeterQty; const ARight: TSquareMeterQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerCubicMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TWattPerCubicMeterQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerCubicMeterQty./(const ALeft: TWattQty; const ARight: TWattPerCubicMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerCubicMeterQty.*(const ALeft: TWattPerCubicMeterQty; const ARight: TCubicMeterQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerCubicMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TWattPerCubicMeterQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCoulombPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsCoulombPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsCoulombPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cCoulombPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cCoulombPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCoulombPerSquareMeterQty}{$i adim.inc}

class operator TCoulombPerSquareMeterQty.*(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TCoulombPerSquareMeterQty): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerSquareMeterQty.*(const ALeft: TCoulombPerSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerSquareMeterQty./(const ALeft: TVoltPerMeterQty; const ARight: TCoulombPerSquareMeterQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerSquareMeterQty./(const ALeft: TCoulombQty; const ARight: TCoulombPerSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerSquareMeterQty.*(const ALeft: TCoulombPerSquareMeterQty; const ARight: TSquareMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TCoulombPerSquareMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsVoltSymbol}
{$DEFINE CSINGULARNAME:=rsVoltName}
{$DEFINE CPLURALNAME:=rsVoltPluralName}
{$DEFINE CPREFIXES:=cVoltPrefixes}
{$DEFINE CEXPONENTS:=cVoltExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TVoltQty}{$i adim.inc}

class operator TVoltQty.*(const ALeft: TSiemensQty; const ARight: TVoltQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltQty.*(const ALeft: TVoltQty; const ARight: TSiemensQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltQty./(const ALeft: TAmpereQty; const ARight: TVoltQty): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TVoltQty.*(const ALeft: TFaradQty; const ARight: TVoltQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltQty.*(const ALeft: TVoltQty; const ARight: TFaradQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltQty./(const ALeft: TCoulombQty; const ARight: TVoltQty): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TVoltQty./(const ALeft: TSquareVoltQty; const ARight: TVoltQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TVoltQty.*(const ALeft: TVoltQty; const ARight: TVoltQty): TSquareVoltQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltQty./(const ALeft: TWattQty; const ARight: TVoltQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TVoltQty.*(const ALeft: TVoltQty; const ARight: TAmpereQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltQty.*(const ALeft: TAmpereQty; const ARight: TVoltQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltQty./(const ALeft: TJouleQty; const ARight: TVoltQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TVoltQty.*(const ALeft: TVoltQty; const ARight: TCoulombQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TVoltQty.*(const ALeft: TCoulombQty; const ARight: TVoltQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsOhmMeterSymbol}
{$DEFINE CSINGULARNAME:=rsOhmMeterName}
{$DEFINE CPLURALNAME:=rsOhmMeterPluralName}
{$DEFINE CPREFIXES:=cOhmMeterPrefixes}
{$DEFINE CEXPONENTS:=cOhmMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TOhmMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsCubicMeterPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsCubicMeterPerSecondName}
{$DEFINE CPLURALNAME:=rsCubicMeterPerSecondPluralName}
{$DEFINE CPREFIXES:=cCubicMeterPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cCubicMeterPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicMeterPerSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsJouleSymbol}
{$DEFINE CSINGULARNAME:=rsJouleName}
{$DEFINE CPLURALNAME:=rsJoulePluralName}
{$DEFINE CPREFIXES:=cJoulePrefixes}
{$DEFINE CEXPONENTS:=cJouleExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJouleQty}{$i adim.inc}

class operator TJouleQty./(const ALeft: TSquareJouleQty; const ARight: TJouleQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TJouleQty.*(const ALeft: TJouleQty; const ARight: TJouleQty): TSquareJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJouleQty./(const ALeft: TKilogramSquareMeterQty; const ARight: TJouleQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TJouleQty.*(const ALeft: TJouleQty; const ARight: TSquareSecondQty): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJouleQty.*(const ALeft: TSquareSecondQty; const ARight: TJouleQty): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCubicKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsCubicKelvinName}
{$DEFINE CPLURALNAME:=rsCubicKelvinPluralName}
{$DEFINE CPREFIXES:=cCubicKelvinPrefixes}
{$DEFINE CEXPONENTS:=cCubicKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsReciprocalQuarticMeterSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalQuarticMeterName}
{$DEFINE CPLURALNAME:=rsReciprocalQuarticMeterPluralName}
{$DEFINE CPREFIXES:=cReciprocalQuarticMeterPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalQuarticMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalQuarticMeterQty}{$i adim.inc}

class operator TReciprocalQuarticMeterQty./(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty./(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalQuarticMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty.*(const ALeft: TReciprocalQuarticMeterQty; const ARight: TSquareMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TReciprocalQuarticMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty./(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalQuarticMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty.*(const ALeft: TReciprocalQuarticMeterQty; const ARight: TCubicMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TReciprocalQuarticMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty./(const ALeft: double; const ARight: TReciprocalQuarticMeterQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty.*(const ALeft: TReciprocalQuarticMeterQty; const ARight: TQuarticMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalQuarticMeterQty.*(const ALeft: TQuarticMeterQty; const ARight: TReciprocalQuarticMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCoulombMeterSymbol}
{$DEFINE CSINGULARNAME:=rsCoulombMeterName}
{$DEFINE CPLURALNAME:=rsCoulombMeterPluralName}
{$DEFINE CPREFIXES:=cCoulombMeterPrefixes}
{$DEFINE CEXPONENTS:=cCoulombMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCoulombMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsLuxSecondSymbol}
{$DEFINE CSINGULARNAME:=rsLuxSecondName}
{$DEFINE CPLURALNAME:=rsLuxSecondPluralName}
{$DEFINE CPREFIXES:=cLuxSecondPrefixes}
{$DEFINE CEXPONENTS:=cLuxSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TLuxSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsTeslaSymbol}
{$DEFINE CSINGULARNAME:=rsTeslaName}
{$DEFINE CPLURALNAME:=rsTeslaPluralName}
{$DEFINE CPREFIXES:=cTeslaPrefixes}
{$DEFINE CEXPONENTS:=cTeslaExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TTeslaQty}{$i adim.inc}

class operator TTeslaQty.*(const ALeft: TSquareMeterAmpereQty; const ARight: TTeslaQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TTeslaQty.*(const ALeft: TTeslaQty; const ARight: TSquareMeterAmpereQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TTeslaQty./(const ALeft: TJouleQty; const ARight: TTeslaQty): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TTeslaQty./(const ALeft: TWeberQty; const ARight: TTeslaQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TTeslaQty.*(const ALeft: TSquareMeterQty; const ARight: TTeslaQty): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TTeslaQty.*(const ALeft: TTeslaQty; const ARight: TSquareMeterQty): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TTeslaQty./(const ALeft: TKilogramPerSecondQty; const ARight: TTeslaQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TTeslaQty.*(const ALeft: TTeslaQty; const ARight: TCoulombQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TTeslaQty.*(const ALeft: TCoulombQty; const ARight: TTeslaQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSteradianPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSteradianPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsSteradianPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cSteradianPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cSteradianPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSteradianPerSquareSecondQty}{$i adim.inc}

class operator TSteradianPerSquareSecondQty./(const ALeft: TSteradianQty; const ARight: TSteradianPerSquareSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSteradianPerSquareSecondQty.*(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSquareSecondQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSteradianPerSquareSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TSteradianPerSquareSecondQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsLumenPerWattSymbol}
{$DEFINE CSINGULARNAME:=rsLumenPerWattName}
{$DEFINE CPLURALNAME:=rsLumenPerWattPluralName}
{$DEFINE CPREFIXES:=cLumenPerWattPrefixes}
{$DEFINE CEXPONENTS:=cLumenPerWattExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TLumenPerWattQty}{$i adim.inc}

class operator TLumenPerWattQty./(const ALeft: TLumenQty; const ARight: TLumenPerWattQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TLumenPerWattQty.*(const ALeft: TLumenPerWattQty; const ARight: TWattQty): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TLumenPerWattQty.*(const ALeft: TWattQty; const ARight: TLumenPerWattQty): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsTeslaMeterSymbol}
{$DEFINE CSINGULARNAME:=rsTeslaMeterName}
{$DEFINE CPLURALNAME:=rsTeslaMeterPluralName}
{$DEFINE CPREFIXES:=cTeslaMeterPrefixes}
{$DEFINE CEXPONENTS:=cTeslaMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TTeslaMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsNewtonPerCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonPerCubicMeterName}
{$DEFINE CPLURALNAME:=rsNewtonPerCubicMeterPluralName}
{$DEFINE CPREFIXES:=cNewtonPerCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cNewtonPerCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonPerCubicMeterQty}{$i adim.inc}

class operator TNewtonPerCubicMeterQty./(const ALeft: TNewtonQty; const ARight: TNewtonPerCubicMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TNewtonPerCubicMeterQty.*(const ALeft: TNewtonPerCubicMeterQty; const ARight: TCubicMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TNewtonPerCubicMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TNewtonPerCubicMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareMeterPerSquareCoulombSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterPerSquareCoulombName}
{$DEFINE CPLURALNAME:=rsSquareMeterPerSquareCoulombPluralName}
{$DEFINE CPREFIXES:=cSquareMeterPerSquareCoulombPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterPerSquareCoulombExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSquareCoulombQty}{$i adim.inc}

class operator TSquareMeterPerSquareCoulombQty./(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareMeterPerSquareCoulombQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterPerSquareCoulombQty.*(const ALeft: TSquareMeterPerSquareCoulombQty; const ARight: TNewtonQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSquareCoulombQty.*(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareCoulombQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSquareCoulombQty./(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareCoulombQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareMeterPerSquareCoulombQty.*(const ALeft: TSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareMeterPerSquareCoulombQty.*(const ALeft: TSquareCoulombQty; const ARight: TSquareMeterPerSquareCoulombQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareSecondName}
{$DEFINE CPLURALNAME:=rsSquareSecondPluralName}
{$DEFINE CPREFIXES:=cSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareSecondQty}{$i adim.inc}

class operator TSquareSecondQty./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareSecondQty): TSquareJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TSquareJouleQty): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareSecondQty.*(const ALeft: TSquareJouleQty; const ARight: TSquareSecondQty): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareSecondQty./(const ALeft: TSexticSecondQty; const ARight: TSquareSecondQty): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareSecondQty.*(const ALeft: TQuarticSecondQty; const ARight: TSquareSecondQty): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TQuarticSecondQty): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareSecondQty./(const ALeft: TQuarticSecondQty; const ARight: TSquareSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TSquareSecondQty): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsSteradianName}
{$DEFINE CPLURALNAME:=rsSteradianPluralName}
{$DEFINE CPREFIXES:=cSteradianPrefixes}
{$DEFINE CEXPONENTS:=cSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSteradianQty}{$i adim.inc}

class operator TSteradianQty./(const ALeft: TCubicMeterSteradianQty; const ARight: TSteradianQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSteradianQty.*(const ALeft: TSteradianQty; const ARight: TCubicMeterQty): TCubicMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSteradianQty.*(const ALeft: TCubicMeterQty; const ARight: TSteradianQty): TCubicMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareCoulombSymbol}
{$DEFINE CSINGULARNAME:=rsSquareCoulombName}
{$DEFINE CPLURALNAME:=rsSquareCoulombPluralName}
{$DEFINE CPREFIXES:=cSquareCoulombPrefixes}
{$DEFINE CEXPONENTS:=cSquareCoulombExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareCoulombQty}{$i adim.inc}

class operator TSquareCoulombQty.*(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareCoulombQty.*(const ALeft: TSquareCoulombQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareCoulombQty./(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareCoulombQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareSecondPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSquareSecondPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsSquareSecondPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cSquareSecondPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cSquareSecondPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareSecondPerSquareMeterQty}{$i adim.inc}

class operator TSquareSecondPerSquareMeterQty./(const ALeft: double; const ARight: TSquareSecondPerSquareMeterQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TSquareSecondPerSquareMeterQty./(const ALeft: TSquareSecondQty; const ARight: TSquareSecondPerSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareSecondPerSquareMeterQty.*(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: TSquareMeterQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareSecondPerSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TSquareSecondPerSquareMeterQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareHertzSymbol}
{$DEFINE CSINGULARNAME:=rsSquareHertzName}
{$DEFINE CPLURALNAME:=rsSquareHertzPluralName}
{$DEFINE CPREFIXES:=cSquareHertzPrefixes}
{$DEFINE CEXPONENTS:=cSquareHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareHertzQty}{$i adim.inc}

class operator TSquareHertzQty./(const ALeft: TNewtonPerMeterQty; const ARight: TSquareHertzQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TSquareHertzQty; const ARight: TKilogramQty): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TKilogramQty; const ARight: TSquareHertzQty): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty./(const ALeft: TJouleQty; const ARight: TSquareHertzQty): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TSquareHertzQty; const ARight: TKilogramSquareMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareHertzQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty./(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSquareHertzQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TSquareHertzQty; const ARight: TSteradianQty): TSteradianPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TSteradianQty; const ARight: TSquareHertzQty): TSteradianPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty./(const ALeft: TSquareHertzQty; const ARight: TSquareHertzQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareHertzQty./(const ALeft: TSquareHertzQty; const ARight: TRadianQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TSquareHertzQty; const ARight: TRadianQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TRadianQty; const ARight: TSquareHertzQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty./(const ALeft: TRadianQty; const ARight: TSquareHertzQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TSquareHertzQty; const ARight: TSquareSecondQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty.*(const ALeft: TSquareSecondQty; const ARight: TSquareHertzQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareHertzQty./(const ALeft: double; const ARight: TSquareHertzQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsTeslaPerAmpereSymbol}
{$DEFINE CSINGULARNAME:=rsTeslaPerAmpereName}
{$DEFINE CPLURALNAME:=rsTeslaPerAmperePluralName}
{$DEFINE CPREFIXES:=cTeslaPerAmperePrefixes}
{$DEFINE CEXPONENTS:=cTeslaPerAmpereExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TTeslaPerAmpereQty}{$i adim.inc}

class operator TTeslaPerAmpereQty./(const ALeft: TTeslaQty; const ARight: TTeslaPerAmpereQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TTeslaPerAmpereQty.*(const ALeft: TTeslaPerAmpereQty; const ARight: TAmpereQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TTeslaPerAmpereQty.*(const ALeft: TAmpereQty; const ARight: TTeslaPerAmpereQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerSquareMeterPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerSquareMeterPerKelvinName}
{$DEFINE CPLURALNAME:=rsWattPerSquareMeterPerKelvinPluralName}
{$DEFINE CPREFIXES:=cWattPerSquareMeterPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cWattPerSquareMeterPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerKelvinQty}{$i adim.inc}

class operator TWattPerSquareMeterPerKelvinQty./(const ALeft: TWattPerKelvinQty; const ARight: TWattPerSquareMeterPerKelvinQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerKelvinQty.*(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TSquareMeterQty): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerKelvinQty.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerKelvinQty): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerKelvinQty./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerKelvinQty): TSquareMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerKelvinQty.*(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TSquareMeterKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerKelvinQty.*(const ALeft: TSquareMeterKelvinQty; const ARight: TWattPerSquareMeterPerKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsWattPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cWattPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cWattPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterQty}{$i adim.inc}

class operator TWattPerSquareMeterQty./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterQty.*(const ALeft: TWattPerSquareMeterQty; const ARight: TSquareMeterQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsFaradPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsFaradPerMeterName}
{$DEFINE CPLURALNAME:=rsFaradPerMeterPluralName}
{$DEFINE CPREFIXES:=cFaradPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cFaradPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TFaradPerMeterQty}{$i adim.inc}

class operator TFaradPerMeterQty./(const ALeft: double; const ARight: TFaradPerMeterQty): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TFaradPerMeterQty./(const ALeft: TCoulombPerSquareMeterQty; const ARight: TFaradPerMeterQty): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TFaradPerMeterQty.*(const ALeft: TFaradPerMeterQty; const ARight: TVoltPerMeterQty): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TFaradPerMeterQty.*(const ALeft: TVoltPerMeterQty; const ARight: TFaradPerMeterQty): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TFaradPerMeterQty./(const ALeft: TCoulombQty; const ARight: TFaradPerMeterQty): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TFaradPerMeterQty.*(const ALeft: TFaradPerMeterQty; const ARight: TVoltMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TFaradPerMeterQty.*(const ALeft: TVoltMeterQty; const ARight: TFaradPerMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TFaradPerMeterQty./(const ALeft: TSquareCoulombQty; const ARight: TFaradPerMeterQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TFaradPerMeterQty.*(const ALeft: TFaradPerMeterQty; const ARight: TNewtonSquareMeterQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TFaradPerMeterQty.*(const ALeft: TNewtonSquareMeterQty; const ARight: TFaradPerMeterQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramKelvinName}
{$DEFINE CPLURALNAME:=rsKilogramKelvinPluralName}
{$DEFINE CPREFIXES:=cKilogramKelvinPrefixes}
{$DEFINE CEXPONENTS:=cKilogramKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsMoleKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsMoleKelvinName}
{$DEFINE CPLURALNAME:=rsMoleKelvinPluralName}
{$DEFINE CPREFIXES:=cMoleKelvinPrefixes}
{$DEFINE CEXPONENTS:=cMoleKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMoleKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsKelvinName}
{$DEFINE CPLURALNAME:=rsKelvinPluralName}
{$DEFINE CPREFIXES:=cKelvinPrefixes}
{$DEFINE CEXPONENTS:=cKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKelvinQty}{$i adim.inc}

class operator TKelvinQty./(const ALeft: TMoleKelvinQty; const ARight: TKelvinQty): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TMoleQty): TMoleKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TMoleQty; const ARight: TKelvinQty): TMoleKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TKelvinQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TWattPerSquareMeterPerKelvinQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TWattPerSquareMeterQty; const ARight: TKelvinQty): TWattPerSquareMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TSquareMeterKelvinQty; const ARight: TKelvinQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TSquareMeterQty): TSquareMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TSquareMeterQty; const ARight: TKelvinQty): TSquareMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TWattPerKelvinQty; const ARight: TKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TWattPerKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TWattQty; const ARight: TKelvinQty): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKelvinQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TJoulePerKilogramPerKelvinQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKelvinQty): TJoulePerKilogramPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TJoulePerKelvinQty; const ARight: TKelvinQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TJoulePerKelvinQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TJouleQty; const ARight: TKelvinQty): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TKilogramKelvinQty; const ARight: TKelvinQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TKilogramQty): TKilogramKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKilogramQty; const ARight: TKelvinQty): TKilogramKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TQuarticKelvinQty; const ARight: TKelvinQty): TCubicKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TCubicKelvinQty): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TCubicKelvinQty; const ARight: TKelvinQty): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TCubicKelvinQty; const ARight: TKelvinQty): TSquareKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TSquareKelvinQty): TCubicKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TSquareKelvinQty; const ARight: TKelvinQty): TCubicKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinQty./(const ALeft: TSquareKelvinQty; const ARight: TKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinQty.*(const ALeft: TKelvinQty; const ARight: TKelvinQty): TSquareKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsRadianPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsRadianPerMeterName}
{$DEFINE CPLURALNAME:=rsRadianPerMeterPluralName}
{$DEFINE CPREFIXES:=cRadianPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cRadianPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TRadianPerMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsSquareJouleSymbol}
{$DEFINE CSINGULARNAME:=rsSquareJouleName}
{$DEFINE CPLURALNAME:=rsSquareJoulePluralName}
{$DEFINE CPREFIXES:=cSquareJoulePrefixes}
{$DEFINE CEXPONENTS:=cSquareJouleExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareJouleQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsReciprocalCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalCubicMeterName}
{$DEFINE CPLURALNAME:=rsReciprocalCubicMeterPluralName}
{$DEFINE CPREFIXES:=cReciprocalCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalCubicMeterQty}{$i adim.inc}

class operator TReciprocalCubicMeterQty./(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalCubicMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalCubicMeterQty.*(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalCubicMeterQty): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalCubicMeterQty.*(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalMeterQty): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalCubicMeterQty./(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalCubicMeterQty./(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalCubicMeterQty./(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalCubicMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalCubicMeterQty.*(const ALeft: TReciprocalCubicMeterQty; const ARight: TSquareMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalCubicMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TReciprocalCubicMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalCubicMeterQty./(const ALeft: double; const ARight: TReciprocalCubicMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TReciprocalCubicMeterQty.*(const ALeft: TReciprocalCubicMeterQty; const ARight: TCubicMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalCubicMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TReciprocalCubicMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareMeterSteradianHertzSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterSteradianHertzName}
{$DEFINE CPLURALNAME:=rsSquareMeterSteradianHertzPluralName}
{$DEFINE CPREFIXES:=cSquareMeterSteradianHertzPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterSteradianHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterSteradianHertzQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsVoltMeterSymbol}
{$DEFINE CSINGULARNAME:=rsVoltMeterName}
{$DEFINE CPLURALNAME:=rsVoltMeterPluralName}
{$DEFINE CPREFIXES:=cVoltMeterPrefixes}
{$DEFINE CEXPONENTS:=cVoltMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TVoltMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsWattPerCubicMeterPerSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerCubicMeterPerSteradianName}
{$DEFINE CPLURALNAME:=rsWattPerCubicMeterPerSteradianPluralName}
{$DEFINE CPREFIXES:=cWattPerCubicMeterPerSteradianPrefixes}
{$DEFINE CEXPONENTS:=cWattPerCubicMeterPerSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerCubicMeterPerSteradianQty}{$i adim.inc}

class operator TWattPerCubicMeterPerSteradianQty./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerCubicMeterPerSteradianQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerCubicMeterPerSteradianQty.*(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TCubicMeterQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerCubicMeterPerSteradianQty.*(const ALeft: TCubicMeterQty; const ARight: TWattPerCubicMeterPerSteradianQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerCubicMeterPerSteradianQty./(const ALeft: TWattPerCubicMeterQty; const ARight: TWattPerCubicMeterPerSteradianQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerCubicMeterPerSteradianQty.*(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TSteradianQty): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerCubicMeterPerSteradianQty.*(const ALeft: TSteradianQty; const ARight: TWattPerCubicMeterPerSteradianQty): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerCubicMeterPerSteradianQty./(const ALeft: TWattQty; const ARight: TWattPerCubicMeterPerSteradianQty): TCubicMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerCubicMeterPerSteradianQty.*(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TCubicMeterSteradianQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerCubicMeterPerSteradianQty.*(const ALeft: TCubicMeterSteradianQty; const ARight: TWattPerCubicMeterPerSteradianQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCoulombPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsCoulombPerMeterName}
{$DEFINE CPLURALNAME:=rsCoulombPerMeterPluralName}
{$DEFINE CPREFIXES:=cCoulombPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cCoulombPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCoulombPerMeterQty}{$i adim.inc}

class operator TCoulombPerMeterQty./(const ALeft: TSquareCoulombPerMeterQty; const ARight: TCoulombPerMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerMeterQty.*(const ALeft: TCoulombQty; const ARight: TCoulombPerMeterQty): TSquareCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerMeterQty.*(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombQty): TSquareCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsLumenSymbol}
{$DEFINE CSINGULARNAME:=rsLumenName}
{$DEFINE CPLURALNAME:=rsLumenPluralName}
{$DEFINE CPREFIXES:=cLumenPrefixes}
{$DEFINE CEXPONENTS:=cLumenExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TLumenQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsSteradianHertzSymbol}
{$DEFINE CSINGULARNAME:=rsSteradianHertzName}
{$DEFINE CPLURALNAME:=rsSteradianHertzPluralName}
{$DEFINE CPREFIXES:=cSteradianHertzPrefixes}
{$DEFINE CEXPONENTS:=cSteradianHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSteradianHertzQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsJoulePerMolePerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerMolePerKelvinName}
{$DEFINE CPLURALNAME:=rsJoulePerMolePerKelvinPluralName}
{$DEFINE CPREFIXES:=cJoulePerMolePerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerMolePerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerMolePerKelvinQty}{$i adim.inc}

class operator TJoulePerMolePerKelvinQty./(const ALeft: TJoulePerMoleQty; const ARight: TJoulePerMolePerKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TJoulePerMolePerKelvinQty.*(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TKelvinQty): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJoulePerMolePerKelvinQty.*(const ALeft: TKelvinQty; const ARight: TJoulePerMolePerKelvinQty): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJoulePerMolePerKelvinQty./(const ALeft: TJoulePerKelvinQty; const ARight: TJoulePerMolePerKelvinQty): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TJoulePerMolePerKelvinQty.*(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TMoleQty): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJoulePerMolePerKelvinQty.*(const ALeft: TMoleQty; const ARight: TJoulePerMolePerKelvinQty): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJoulePerMolePerKelvinQty./(const ALeft: TJouleQty; const ARight: TJoulePerMolePerKelvinQty): TMoleKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TJoulePerMolePerKelvinQty.*(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TMoleKelvinQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TJoulePerMolePerKelvinQty.*(const ALeft: TMoleKelvinQty; const ARight: TJoulePerMolePerKelvinQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramMeterSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramMeterName}
{$DEFINE CPLURALNAME:=rsKilogramMeterPluralName}
{$DEFINE CPREFIXES:=cKilogramMeterPrefixes}
{$DEFINE CEXPONENTS:=cKilogramMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsQuarticSecondSymbol}
{$DEFINE CSINGULARNAME:=rsQuarticSecondName}
{$DEFINE CPLURALNAME:=rsQuarticSecondPluralName}
{$DEFINE CPREFIXES:=cQuarticSecondPrefixes}
{$DEFINE CEXPONENTS:=cQuarticSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TQuarticSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsWattPerSquareMeterPerQuarticKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerSquareMeterPerQuarticKelvinName}
{$DEFINE CPLURALNAME:=rsWattPerSquareMeterPerQuarticKelvinPluralName}
{$DEFINE CPREFIXES:=cWattPerSquareMeterPerQuarticKelvinPrefixes}
{$DEFINE CEXPONENTS:=cWattPerSquareMeterPerQuarticKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerQuarticKelvinQty}{$i adim.inc}

class operator TWattPerSquareMeterPerQuarticKelvinQty./(const ALeft: TWattPerQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinQty.*(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TSquareMeterQty): TWattPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinQty.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TWattPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinQty./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinQty.*(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TQuarticKelvinQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinQty.*(const ALeft: TQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinQty./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TSquareMeterQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinQty.*(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TSquareMeterQuarticKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinQty.*(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerSecondQty}{$i adim.inc}

class operator TMeterPerSecondQty.*(const ALeft: TCoulombPerMeterQty; const ARight: TMeterPerSecondQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TCoulombPerMeterQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TAmpereQty; const ARight: TMeterPerSecondQty): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TVoltPerMeterQty; const ARight: TMeterPerSecondQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TTeslaQty): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TTeslaQty; const ARight: TMeterPerSecondQty): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterPerSecondQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TPoiseuilleQty; const ARight: TMeterPerSecondQty): TKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerSquareMeterQty): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TKilogramPerSquareMeterQty; const ARight: TMeterPerSecondQty): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TCubicMeterPerSecondQty; const ARight: TMeterPerSecondQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TSquareMeterQty): TCubicMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TSquareMeterQty; const ARight: TMeterPerSecondQty): TCubicMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TWattQty; const ARight: TMeterPerSecondQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TNewtonQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TNewtonQty; const ARight: TMeterPerSecondQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TJouleQty; const ARight: TMeterPerSecondQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramMeterPerSecondQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterPerSecondQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TNewtonQty; const ARight: TMeterPerSecondQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerSecondQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TKilogramPerSecondQty; const ARight: TMeterPerSecondQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterPerSecondQty): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramMeterQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TKilogramMeterQty; const ARight: TMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterPerSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TKilogramQty; const ARight: TMeterPerSecondQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSecondQty./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterPerSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSecondQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCoulombPerCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsCoulombPerCubicMeterName}
{$DEFINE CPLURALNAME:=rsCoulombPerCubicMeterPluralName}
{$DEFINE CPREFIXES:=cCoulombPerCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cCoulombPerCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCoulombPerCubicMeterQty}{$i adim.inc}

class operator TCoulombPerCubicMeterQty./(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombPerCubicMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerCubicMeterQty.*(const ALeft: TCoulombPerCubicMeterQty; const ARight: TSquareMeterQty): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerCubicMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TCoulombPerCubicMeterQty): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerCubicMeterQty./(const ALeft: TCoulombQty; const ARight: TCoulombPerCubicMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerCubicMeterQty.*(const ALeft: TCoulombPerCubicMeterQty; const ARight: TCubicMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerCubicMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TCoulombPerCubicMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsSquareKelvinName}
{$DEFINE CPLURALNAME:=rsSquareKelvinPluralName}
{$DEFINE CPREFIXES:=cSquareKelvinPrefixes}
{$DEFINE CEXPONENTS:=cSquareKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareKelvinQty}{$i adim.inc}

class operator TSquareKelvinQty./(const ALeft: TQuarticKelvinQty; const ARight: TSquareKelvinQty): TSquareKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareKelvinQty.*(const ALeft: TSquareKelvinQty; const ARight: TSquareKelvinQty): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterKelvinPerWattSymbol}
{$DEFINE CSINGULARNAME:=rsMeterKelvinPerWattName}
{$DEFINE CPLURALNAME:=rsMeterKelvinPerWattPluralName}
{$DEFINE CPREFIXES:=cMeterKelvinPerWattPrefixes}
{$DEFINE CEXPONENTS:=cMeterKelvinPerWattExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterKelvinPerWattQty}{$i adim.inc}

class operator TMeterKelvinPerWattQty./(const ALeft: TMeterKelvinQty; const ARight: TMeterKelvinPerWattQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterKelvinPerWattQty.*(const ALeft: TMeterKelvinPerWattQty; const ARight: TWattQty): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterKelvinPerWattQty.*(const ALeft: TWattQty; const ARight: TMeterKelvinPerWattQty): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsReciprocalSquareRootMeterSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalSquareRootMeterName}
{$DEFINE CPLURALNAME:=rsReciprocalSquareRootMeterPluralName}
{$DEFINE CPREFIXES:=cReciprocalSquareRootMeterPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalSquareRootMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalSquareRootMeterQty}{$i adim.inc}

class operator TReciprocalSquareRootMeterQty./(const ALeft: TReciprocalSquareRootCubicMeterQty; const ARight: TReciprocalSquareRootMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalSquareRootMeterQty.*(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareRootMeterQty): TReciprocalSquareRootCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalSquareRootMeterQty.*(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TReciprocalMeterQty): TReciprocalSquareRootCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalSquareRootMeterQty./(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareRootMeterQty): TReciprocalSquareRootMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TReciprocalSquareRootMeterQty.*(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TReciprocalSquareRootMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsQuarticKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsQuarticKelvinName}
{$DEFINE CPLURALNAME:=rsQuarticKelvinPluralName}
{$DEFINE CPREFIXES:=cQuarticKelvinPrefixes}
{$DEFINE CEXPONENTS:=cQuarticKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TQuarticKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsPoiseuilleSymbol}
{$DEFINE CSINGULARNAME:=rsPoiseuilleName}
{$DEFINE CPLURALNAME:=rsPoiseuillePluralName}
{$DEFINE CPREFIXES:=cPoiseuillePrefixes}
{$DEFINE CEXPONENTS:=cPoiseuilleExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPoiseuilleQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsWattPerSquareMeterPerSteradianPerHertzSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerSquareMeterPerSteradianPerHertzName}
{$DEFINE CPLURALNAME:=rsWattPerSquareMeterPerSteradianPerHertzPluralName}
{$DEFINE CPREFIXES:=cWattPerSquareMeterPerSteradianPerHertzPrefixes}
{$DEFINE CEXPONENTS:=cWattPerSquareMeterPerSteradianPerHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerSteradianPerHertzQty}{$i adim.inc}

class operator TWattPerSquareMeterPerSteradianPerHertzQty./(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterQty): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterPerSecondQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSteradianHertzQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty.*(const ALeft: TSteradianHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterSteradianHertzQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzQty.*(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsNewtonSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonSquareMeterName}
{$DEFINE CPLURALNAME:=rsNewtonSquareMeterPluralName}
{$DEFINE CPREFIXES:=cNewtonSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cNewtonSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonSquareMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsSexticSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSexticSecondName}
{$DEFINE CPLURALNAME:=rsSexticSecondPluralName}
{$DEFINE CPREFIXES:=cSexticSecondPrefixes}
{$DEFINE CEXPONENTS:=cSexticSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSexticSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsHenryPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsHenryPerMeterName}
{$DEFINE CPLURALNAME:=rsHenryPerMeterPluralName}
{$DEFINE CPREFIXES:=cHenryPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cHenryPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=THenryPerMeterQty}{$i adim.inc}

class operator THenryPerMeterQty./(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: THenryPerMeterQty): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THenryPerMeterQty.*(const ALeft: THenryPerMeterQty; const ARight: TFaradPerMeterQty): TSquareSecondPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THenryPerMeterQty.*(const ALeft: TFaradPerMeterQty; const ARight: THenryPerMeterQty): TSquareSecondPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THenryPerMeterQty./(const ALeft: TNewtonQty; const ARight: THenryPerMeterQty): TSquareAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THenryPerMeterQty.*(const ALeft: THenryPerMeterQty; const ARight: TSquareAmpereQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THenryPerMeterQty.*(const ALeft: TSquareAmpereQty; const ARight: THenryPerMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THenryPerMeterQty./(const ALeft: TTeslaQty; const ARight: THenryPerMeterQty): TAmperePerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THenryPerMeterQty.*(const ALeft: THenryPerMeterQty; const ARight: TAmperePerMeterQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THenryPerMeterQty.*(const ALeft: TAmperePerMeterQty; const ARight: THenryPerMeterQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THenryPerMeterQty./(const ALeft: TTeslaMeterQty; const ARight: THenryPerMeterQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THenryPerMeterQty.*(const ALeft: THenryPerMeterQty; const ARight: TAmpereQty): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THenryPerMeterQty.*(const ALeft: TAmpereQty; const ARight: THenryPerMeterQty): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsMeterKelvinName}
{$DEFINE CPLURALNAME:=rsMeterKelvinPluralName}
{$DEFINE CPREFIXES:=cMeterKelvinPrefixes}
{$DEFINE CEXPONENTS:=cMeterKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsOhmSymbol}
{$DEFINE CSINGULARNAME:=rsOhmName}
{$DEFINE CPLURALNAME:=rsOhmPluralName}
{$DEFINE CPREFIXES:=cOhmPrefixes}
{$DEFINE CEXPONENTS:=cOhmExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TOhmQty}{$i adim.inc}

class operator TOhmQty./(const ALeft: TWeberQty; const ARight: TOhmQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TOhmQty.*(const ALeft: TCoulombQty; const ARight: TOhmQty): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TOhmQty.*(const ALeft: TOhmQty; const ARight: TCoulombQty): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TOhmQty./(const ALeft: double; const ARight: TOhmQty): TSiemensQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TOhmQty./(const ALeft: TVoltQty; const ARight: TOhmQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TOhmQty.*(const ALeft: TOhmQty; const ARight: TAmpereQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TOhmQty.*(const ALeft: TAmpereQty; const ARight: TOhmQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TOhmQty./(const ALeft: TSquareVoltQty; const ARight: TOhmQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TOhmQty.*(const ALeft: TOhmQty; const ARight: TWattQty): TSquareVoltQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TOhmQty.*(const ALeft: TWattQty; const ARight: TOhmQty): TSquareVoltQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TOhmQty./(const ALeft: TWattQty; const ARight: TOhmQty): TSquareAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TOhmQty.*(const ALeft: TOhmQty; const ARight: TSquareAmpereQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TOhmQty.*(const ALeft: TSquareAmpereQty; const ARight: TOhmQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsMeterSymbol}
{$DEFINE CSINGULARNAME:=rsMeterName}
{$DEFINE CPLURALNAME:=rsMeterPluralName}
{$DEFINE CPREFIXES:=cMeterPrefixes}
{$DEFINE CEXPONENTS:=cMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterQty}{$i adim.inc}

class operator TMeterQty./(const ALeft: TMeterSteradianQty; const ARight: TMeterQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TSteradianQty; const ARight: TMeterQty): TMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TSteradianQty): TMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TCoulombPerCubicMeterQty; const ARight: TMeterQty): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TCoulombPerCubicMeterQty): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TCoulombPerSquareMeterQty; const ARight: TMeterQty): TCoulombPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TRadianPerMeterQty; const ARight: TMeterQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TRadianPerMeterQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TRadianQty; const ARight: TMeterQty): TRadianPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: THenryPerMeterQty; const ARight: TMeterQty): TTeslaPerAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TTeslaPerAmpereQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TTeslaPerAmpereQty; const ARight: TMeterQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: THenryPerMeterQty; const ARight: TMeterQty): THenryQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: THenryPerMeterQty): THenryQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: THenryQty; const ARight: TMeterQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TTeslaMeterQty; const ARight: TMeterQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TTeslaQty): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TTeslaQty; const ARight: TMeterQty): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TAmperePerMeterQty; const ARight: TMeterQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TAmperePerMeterQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TAmpereQty; const ARight: TMeterQty): TAmperePerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TFaradPerMeterQty; const ARight: TMeterQty): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TFaradPerMeterQty): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TFaradQty; const ARight: TMeterQty): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TVoltMeterQty; const ARight: TMeterQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TVoltQty): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TVoltQty; const ARight: TMeterQty): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TCoulombPerSquareMeterQty; const ARight: TMeterQty): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TCoulombPerSquareMeterQty): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TCoulombPerMeterQty; const ARight: TMeterQty): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TSquareCoulombPerMeterQty; const ARight: TMeterQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TSquareCoulombPerMeterQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TSquareCoulombQty; const ARight: TMeterQty): TSquareCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TCoulombPerMeterQty; const ARight: TMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TCoulombPerMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TCoulombQty; const ARight: TMeterQty): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TVoltPerMeterQty; const ARight: TMeterQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TVoltPerMeterQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TVoltQty; const ARight: TMeterQty): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TOhmMeterQty; const ARight: TMeterQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TOhmQty): TOhmMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TOhmQty; const ARight: TMeterQty): TOhmMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TWattPerCubicMeterQty; const ARight: TMeterQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TWattPerCubicMeterQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TWattPerSquareMeterQty; const ARight: TMeterQty): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TWattPerSquareMeterQty; const ARight: TMeterQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TWattPerSquareMeterQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TWattPerMeterQty; const ARight: TMeterQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TWattPerMeterQty; const ARight: TMeterQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TWattPerMeterQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TWattQty; const ARight: TMeterQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TMeterKelvinQty; const ARight: TMeterQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TKelvinQty; const ARight: TMeterQty): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TKelvinQty): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TSquareKilogramPerMeterQty; const ARight: TMeterQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TSquareKilogramPerMeterQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TSquareKilogramQty; const ARight: TMeterQty): TSquareKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TNewtonCubicMeterQty; const ARight: TMeterQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TNewtonSquareMeterQty): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterQty): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TJouleQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TJouleQty; const ARight: TMeterQty): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TMeterQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterQty): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TSquareMeterPerSquareSecondQty): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TSquareMeterPerSecondQty; const ARight: TMeterQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TMeterPerSecondQty): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterPerSecondQty; const ARight: TMeterQty): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TPoiseuilleQty; const ARight: TMeterQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TPoiseuilleQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TKilogramPerSecondQty; const ARight: TMeterQty): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TNewtonPerMeterQty; const ARight: TMeterQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TPascalQty): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TPascalQty; const ARight: TMeterQty): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TNewtonPerMeterQty; const ARight: TMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TNewtonPerMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TNewtonQty; const ARight: TMeterQty): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TNewtonPerCubicMeterQty; const ARight: TMeterQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TNewtonPerCubicMeterQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TPascalQty; const ARight: TMeterQty): TNewtonPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TSiemensPerMeterQty; const ARight: TMeterQty): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TSiemensPerMeterQty): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TSiemensQty; const ARight: TMeterQty): TSiemensPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TCoulombMeterQty; const ARight: TMeterQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TCoulombQty): TCoulombMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TCoulombQty; const ARight: TMeterQty): TCoulombMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TJouleQty; const ARight: TMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TNewtonQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TNewtonQty; const ARight: TMeterQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TKilogramMeterPerSecondQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TReciprocalQuarticMeterQty; const ARight: TMeterQty): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TReciprocalQuarticMeterQty): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TReciprocalCubicMeterQty; const ARight: TMeterQty): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TReciprocalCubicMeterQty; const ARight: TMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TReciprocalCubicMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TReciprocalSquareMeterQty; const ARight: TMeterQty): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TReciprocalMeterQty; const ARight: TMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TReciprocalMeterQty; const ARight: TMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TReciprocalMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: double; const ARight: TMeterQty): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TKilogramPerSecondQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TKilogramPerSecondQty; const ARight: TMeterQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TKilogramMeterQty; const ARight: TMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TKilogramQty): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TKilogramQty; const ARight: TMeterQty): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TMeterPerSquareSecondQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TMeterQty; const ARight: TMeterPerSquareSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TMeterQty; const ARight: TSquareSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TSquareHertzQty; const ARight: TMeterQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TSquareHertzQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TSexticMeterQty; const ARight: TMeterQty): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TQuinticMeterQty): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TQuinticMeterQty; const ARight: TMeterQty): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TQuinticMeterQty; const ARight: TMeterQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TQuarticMeterQty): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TQuarticMeterQty; const ARight: TMeterQty): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TQuarticMeterQty; const ARight: TMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TCubicMeterQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TMeterQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TCubicMeterQty; const ARight: TMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TSquareMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterQty./(const ALeft: TSquareMeterQty; const ARight: TMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterQty.*(const ALeft: TMeterQty; const ARight: TMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsQuinticSecondSymbol}
{$DEFINE CSINGULARNAME:=rsQuinticSecondName}
{$DEFINE CPLURALNAME:=rsQuinticSecondPluralName}
{$DEFINE CPREFIXES:=cQuinticSecondPrefixes}
{$DEFINE CEXPONENTS:=cQuinticSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TQuinticSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsKilogramPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerMeterName}
{$DEFINE CPLURALNAME:=rsKilogramPerMeterPluralName}
{$DEFINE CPREFIXES:=cKilogramPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerMeterQty}{$i adim.inc}

class operator TKilogramPerMeterQty./(const ALeft: TNewtonQty; const ARight: TKilogramPerMeterQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerMeterQty.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerMeterQty.*(const ALeft: TKilogramPerMeterQty; const ARight: TSquareMeterPerSquareSecondQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerMeterQty./(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerMeterQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerMeterQty.*(const ALeft: TKilogramPerMeterQty; const ARight: TMeterPerSecondQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerMeterQty.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerMeterQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerMeterQty./(const ALeft: TKilogramQty; const ARight: TKilogramPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerMeterQty.*(const ALeft: TKilogramPerMeterQty; const ARight: TMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerMeterQty.*(const ALeft: TMeterQty; const ARight: TKilogramPerMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareNewtonSymbol}
{$DEFINE CSINGULARNAME:=rsSquareNewtonName}
{$DEFINE CPLURALNAME:=rsSquareNewtonPluralName}
{$DEFINE CPREFIXES:=cSquareNewtonPrefixes}
{$DEFINE CEXPONENTS:=cSquareNewtonExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareNewtonQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsCubicMeterSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsCubicMeterSteradianName}
{$DEFINE CPLURALNAME:=rsCubicMeterSteradianPluralName}
{$DEFINE CPREFIXES:=cCubicMeterSteradianPrefixes}
{$DEFINE CEXPONENTS:=cCubicMeterSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicMeterSteradianQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerSquareSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsKilogramPerCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerCubicMeterName}
{$DEFINE CPLURALNAME:=rsKilogramPerCubicMeterPluralName}
{$DEFINE CPREFIXES:=cKilogramPerCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerCubicMeterQty}{$i adim.inc}

class operator TKilogramPerCubicMeterQty./(const ALeft: double; const ARight: TKilogramPerCubicMeterQty): TCubicMeterPerKilogramQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TKilogramPerCubicMeterQty): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TSquareMeterPerSecondQty): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty./(const ALeft: TPoiseuilleQty; const ARight: TKilogramPerCubicMeterQty): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty./(const ALeft: TNewtonPerCubicMeterQty; const ARight: TKilogramPerCubicMeterQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TKilogramPerCubicMeterQty): TNewtonPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TMeterPerSquareSecondQty): TNewtonPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty./(const ALeft: TPascalQty; const ARight: TKilogramPerCubicMeterQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerCubicMeterQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TSquareMeterPerSquareSecondQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty./(const ALeft: TKilogramPerSquareMeterQty; const ARight: TKilogramPerCubicMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TMeterQty): TKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TMeterQty; const ARight: TKilogramPerCubicMeterQty): TKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty./(const ALeft: TKilogramQty; const ARight: TKilogramPerCubicMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TCubicMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerCubicMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TKilogramPerCubicMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKilogramPerQuarticMeterPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerQuarticMeterPerSecondName}
{$DEFINE CPLURALNAME:=rsKilogramPerQuarticMeterPerSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramPerQuarticMeterPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerQuarticMeterPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerQuarticMeterPerSecondQty}{$i adim.inc}

class operator TKilogramPerQuarticMeterPerSecondQty./(const ALeft: TPascalQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TCubicMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondQty.*(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TCubicMeterPerSecondQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondQty.*(const ALeft: TCubicMeterPerSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondQty./(const ALeft: TKilogramQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TQuarticMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondQty.*(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TQuarticMeterSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondQty.*(const ALeft: TQuarticMeterSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondQty./(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondQty.*(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TQuarticMeterQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondQty.*(const ALeft: TQuarticMeterQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerSquareMeterPerSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerSquareMeterPerSteradianName}
{$DEFINE CPLURALNAME:=rsWattPerSquareMeterPerSteradianPluralName}
{$DEFINE CPREFIXES:=cWattPerSquareMeterPerSteradianPrefixes}
{$DEFINE CEXPONENTS:=cWattPerSquareMeterPerSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerSteradianQty}{$i adim.inc}

class operator TWattPerSquareMeterPerSteradianQty./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianQty.*(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSquareMeterQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianQty.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianQty./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianQty.*(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSteradianQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianQty.*(const ALeft: TSteradianQty; const ARight: TWattPerSquareMeterPerSteradianQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianQty./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerSteradianQty): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianQty.*(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSquareMeterSteradianQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerSquareMeterPerSteradianQty.*(const ALeft: TSquareMeterSteradianQty; const ARight: TWattPerSquareMeterPerSteradianQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterPerWattSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerWattName}
{$DEFINE CPLURALNAME:=rsMeterPerWattPluralName}
{$DEFINE CPREFIXES:=cMeterPerWattPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerWattExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerWattQty}{$i adim.inc}

class operator TMeterPerWattQty./(const ALeft: TMeterKelvinPerWattQty; const ARight: TMeterPerWattQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerWattQty.*(const ALeft: TMeterPerWattQty; const ARight: TKelvinQty): TMeterKelvinPerWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerWattQty.*(const ALeft: TKelvinQty; const ARight: TMeterPerWattQty): TMeterKelvinPerWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerWattQty./(const ALeft: double; const ARight: TMeterPerWattQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TMeterPerWattQty./(const ALeft: TMeterQty; const ARight: TMeterPerWattQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerWattQty.*(const ALeft: TMeterPerWattQty; const ARight: TWattQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerWattQty.*(const ALeft: TWattQty; const ARight: TMeterPerWattQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareRootMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSquareRootMeterName}
{$DEFINE CPLURALNAME:=rsSquareRootMeterPluralName}
{$DEFINE CPREFIXES:=cSquareRootMeterPrefixes}
{$DEFINE CEXPONENTS:=cSquareRootMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareRootMeterQty}{$i adim.inc}

class operator TSquareRootMeterQty.*(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TSquareRootMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

class operator TSquareRootMeterQty.*(const ALeft: TSquareRootMeterQty; const ARight: TReciprocalSquareRootMeterQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

class operator TSquareRootMeterQty./(const ALeft: double; const ARight: TSquareRootMeterQty): TReciprocalSquareRootMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TSquareRootMeterQty.*(const ALeft: TSquareRootMeterQty; const ARight: TSquareRootMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareRootMeterQty./(const ALeft: TMeterQty; const ARight: TSquareRootMeterQty): TSquareRootMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareMeterSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterSteradianName}
{$DEFINE CPLURALNAME:=rsSquareMeterSteradianPluralName}
{$DEFINE CPREFIXES:=cSquareMeterSteradianPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterSteradianQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsNewtonCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonCubicMeterName}
{$DEFINE CPLURALNAME:=rsNewtonCubicMeterPluralName}
{$DEFINE CPREFIXES:=cNewtonCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cNewtonCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonCubicMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsAmperePerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsAmperePerSquareMeterName}
{$DEFINE CPLURALNAME:=rsAmperePerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cAmperePerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cAmperePerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TAmperePerSquareMeterQty}{$i adim.inc}

class operator TAmperePerSquareMeterQty./(const ALeft: TAmperePerMeterQty; const ARight: TAmperePerSquareMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TAmperePerSquareMeterQty.*(const ALeft: TAmperePerSquareMeterQty; const ARight: TMeterQty): TAmperePerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TAmperePerSquareMeterQty.*(const ALeft: TMeterQty; const ARight: TAmperePerSquareMeterQty): TAmperePerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TAmperePerSquareMeterQty./(const ALeft: TAmpereQty; const ARight: TAmperePerSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TAmperePerSquareMeterQty.*(const ALeft: TAmperePerSquareMeterQty; const ARight: TSquareMeterQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TAmperePerSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TAmperePerSquareMeterQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsHertzSymbol}
{$DEFINE CSINGULARNAME:=rsHertzName}
{$DEFINE CPLURALNAME:=rsHertzPluralName}
{$DEFINE CPREFIXES:=cHertzPrefixes}
{$DEFINE CEXPONENTS:=cHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=THertzQty}{$i adim.inc}

class operator THertzQty.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: THertzQty): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: THertzQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TWattPerSteradianPerHertzQty; const ARight: THertzQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TWattPerSteradianPerHertzQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TWattPerSteradianQty; const ARight: THertzQty): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: THertzQty): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TSquareMeterSteradianQty): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TSquareMeterSteradianQty; const ARight: THertzQty): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TSteradianHertzQty; const ARight: THertzQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TSteradianQty): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TSteradianQty; const ARight: THertzQty): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THenryQty; const ARight: THertzQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: THenryQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TOhmQty; const ARight: THertzQty): THenryQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty./(const ALeft: TSiemensQty; const ARight: THertzQty): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TFaradQty): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TFaradQty; const ARight: THertzQty): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TWattQty; const ARight: THertzQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TJouleQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TJouleQty; const ARight: THertzQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TJouleQty; const ARight: THertzQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TKilogramSquareMeterPerSecondQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: THertzQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: THertzQty): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TKilogramSquareMeterQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TKilogramSquareMeterQty; const ARight: THertzQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TKilogramPerSecondQty; const ARight: THertzQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TKilogramQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TKilogramQty; const ARight: THertzQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TMeterPerSecondQty; const ARight: THertzQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TMeterQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TMeterQty; const ARight: THertzQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: TSquareHertzQty; const ARight: THertzQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: THertzQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty./(const ALeft: THertzQty; const ARight: THertzQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty./(const ALeft: THertzQty; const ARight: TRadianQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator THertzQty.*(const ALeft: THertzQty; const ARight: TRadianQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator THertzQty.*(const ALeft: TRadianQty; const ARight: THertzQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterPerQuarticSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerQuarticSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerQuarticSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerQuarticSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerQuarticSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerQuarticSecondQty}{$i adim.inc}

class operator TMeterPerQuarticSecondQty./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerQuarticSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerQuarticSecondQty.*(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSquareSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuarticSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerQuarticSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuarticSecondQty./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerQuarticSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerQuarticSecondQty.*(const ALeft: TMeterPerQuarticSecondQty; const ARight: TCubicSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuarticSecondQty.*(const ALeft: TCubicSecondQty; const ARight: TMeterPerQuarticSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuarticSecondQty./(const ALeft: TMeterQty; const ARight: TMeterPerQuarticSecondQty): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerQuarticSecondQty.*(const ALeft: TMeterPerQuarticSecondQty; const ARight: TQuarticSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuarticSecondQty.*(const ALeft: TQuarticSecondQty; const ARight: TMeterPerQuarticSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerMeterPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerMeterPerKelvinName}
{$DEFINE CPLURALNAME:=rsWattPerMeterPerKelvinPluralName}
{$DEFINE CPREFIXES:=cWattPerMeterPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cWattPerMeterPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerMeterPerKelvinQty}{$i adim.inc}

class operator TWattPerMeterPerKelvinQty./(const ALeft: double; const ARight: TWattPerMeterPerKelvinQty): TMeterKelvinPerWattQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty./(const ALeft: TWattPerKelvinQty; const ARight: TWattPerMeterPerKelvinQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty.*(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TMeterQty): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty.*(const ALeft: TMeterQty; const ARight: TWattPerMeterPerKelvinQty): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty./(const ALeft: TWattPerMeterQty; const ARight: TWattPerMeterPerKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty.*(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TKelvinQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty.*(const ALeft: TKelvinQty; const ARight: TWattPerMeterPerKelvinQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty./(const ALeft: TWattQty; const ARight: TWattPerMeterPerKelvinQty): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty.*(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TMeterKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerKelvinQty.*(const ALeft: TMeterKelvinQty; const ARight: TWattPerMeterPerKelvinQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKelvinPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsKelvinPerMeterName}
{$DEFINE CPLURALNAME:=rsKelvinPerMeterPluralName}
{$DEFINE CPREFIXES:=cKelvinPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cKelvinPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKelvinPerMeterQty}{$i adim.inc}

class operator TKelvinPerMeterQty.*(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TKelvinPerMeterQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinPerMeterQty.*(const ALeft: TKelvinPerMeterQty; const ARight: TWattPerMeterPerKelvinQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinPerMeterQty./(const ALeft: TWattPerSquareMeterQty; const ARight: TKelvinPerMeterQty): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinPerMeterQty./(const ALeft: TKelvinQty; const ARight: TKelvinPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinPerMeterQty.*(const ALeft: TKelvinPerMeterQty; const ARight: TMeterQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinPerMeterQty.*(const ALeft: TMeterQty; const ARight: TKelvinPerMeterQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterPerCubicSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerCubicSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerCubicSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerCubicSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerCubicSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerCubicSecondQty}{$i adim.inc}

class operator TMeterPerCubicSecondQty./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerCubicSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerCubicSecondQty.*(const ALeft: TMeterPerCubicSecondQty; const ARight: TSquareSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerCubicSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerCubicSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerCubicSecondQty./(const ALeft: TMeterQty; const ARight: TMeterPerCubicSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerCubicSecondQty.*(const ALeft: TMeterPerCubicSecondQty; const ARight: TCubicSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerCubicSecondQty.*(const ALeft: TCubicSecondQty; const ARight: TMeterPerCubicSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareJouleSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareJouleSquareSecondName}
{$DEFINE CPLURALNAME:=rsSquareJouleSquareSecondPluralName}
{$DEFINE CPREFIXES:=cSquareJouleSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareJouleSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareJouleSquareSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsSquareKilogramPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSquareKilogramPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsSquareKilogramPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cSquareKilogramPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cSquareKilogramPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramPerSquareMeterQty}{$i adim.inc}

class operator TSquareKilogramPerSquareMeterQty.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramPerSquareMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareKilogramPerSquareMeterQty.*(const ALeft: TSquareKilogramPerSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareKilogramPerSquareMeterQty./(const ALeft: TNewtonQty; const ARight: TSquareKilogramPerSquareMeterQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareKilogramPerSquareMeterQty./(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSquareKilogramPerSquareMeterQty.*(const ALeft: TSquareKilogramPerSquareMeterQty; const ARight: TSquareMeterQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSquareKilogramPerSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramPerSquareMeterQty): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterPerAmpereSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerAmpereName}
{$DEFINE CPLURALNAME:=rsMeterPerAmperePluralName}
{$DEFINE CPREFIXES:=cMeterPerAmperePrefixes}
{$DEFINE CEXPONENTS:=cMeterPerAmpereExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerAmpereQty}{$i adim.inc}

class operator TMeterPerAmpereQty./(const ALeft: THenryPerMeterQty; const ARight: TMeterPerAmpereQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerAmpereQty.*(const ALeft: TMeterPerAmpereQty; const ARight: TTeslaQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerAmpereQty.*(const ALeft: TTeslaQty; const ARight: TMeterPerAmpereQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerAmpereQty./(const ALeft: TMeterQty; const ARight: TMeterPerAmpereQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerAmpereQty.*(const ALeft: TMeterPerAmpereQty; const ARight: TAmpereQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerAmpereQty.*(const ALeft: TAmpereQty; const ARight: TMeterPerAmpereQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsKatalSymbol}
{$DEFINE CSINGULARNAME:=rsKatalName}
{$DEFINE CPLURALNAME:=rsKatalPluralName}
{$DEFINE CPREFIXES:=cKatalPrefixes}
{$DEFINE CEXPONENTS:=cKatalExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKatalQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsSquareMeterQuarticKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterQuarticKelvinName}
{$DEFINE CPLURALNAME:=rsSquareMeterQuarticKelvinPluralName}
{$DEFINE CPREFIXES:=cSquareMeterQuarticKelvinPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterQuarticKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterQuarticKelvinQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsMolePerCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsMolePerCubicMeterName}
{$DEFINE CPLURALNAME:=rsMolePerCubicMeterPluralName}
{$DEFINE CPREFIXES:=cMolePerCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cMolePerCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMolePerCubicMeterQty}{$i adim.inc}

class operator TMolePerCubicMeterQty./(const ALeft: TMoleQty; const ARight: TMolePerCubicMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMolePerCubicMeterQty.*(const ALeft: TMolePerCubicMeterQty; const ARight: TCubicMeterQty): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMolePerCubicMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TMolePerCubicMeterQty): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareKilogramSymbol}
{$DEFINE CSINGULARNAME:=rsSquareKilogramName}
{$DEFINE CPLURALNAME:=rsSquareKilogramPluralName}
{$DEFINE CPREFIXES:=cSquareKilogramPrefixes}
{$DEFINE CEXPONENTS:=cSquareKilogramExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsCubicMeterName}
{$DEFINE CPLURALNAME:=rsCubicMeterPluralName}
{$DEFINE CPREFIXES:=cCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicMeterQty}{$i adim.inc}

class operator TCubicMeterQty./(const ALeft: TSexticMeterQty; const ARight: TCubicMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCubicMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TCubicMeterQty): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSquareAmpereSymbol}
{$DEFINE CSINGULARNAME:=rsSquareAmpereName}
{$DEFINE CPLURALNAME:=rsSquareAmperePluralName}
{$DEFINE CPREFIXES:=cSquareAmperePrefixes}
{$DEFINE CEXPONENTS:=cSquareAmpereExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareAmpereQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSecondName}
{$DEFINE CPLURALNAME:=rsSecondPluralName}
{$DEFINE CPREFIXES:=cSecondPrefixes}
{$DEFINE CEXPONENTS:=cSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSecondQty}{$i adim.inc}

class operator TSecondQty.*(const ALeft: TGrayPerSecondQty; const ARight: TSecondQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TGrayPerSecondQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TSecondQty): TGrayPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TVoltMeterPerSecondQty; const ARight: TSecondQty): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TVoltMeterPerSecondQty): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TVoltMeterQty; const ARight: TSecondQty): TVoltMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TSecondQty): TKilogramPerQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TKilogramPerQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TSecondQty): TKilogramPerQuarticMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TQuarticMeterSecondQty; const ARight: TSecondQty): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TQuarticMeterQty): TQuarticMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TQuarticMeterQty; const ARight: TSecondQty): TQuarticMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TSecondQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TSquareMeterPerSecondQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TSquareMeterQty; const ARight: TSecondQty): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TPoiseuilleQty; const ARight: TSecondQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TPascalQty): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TPascalQty; const ARight: TSecondQty): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TCubicMeterPerSecondQty; const ARight: TSecondQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TCubicMeterPerSecondQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TCubicMeterQty; const ARight: TSecondQty): TCubicMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TKatalQty; const ARight: TSecondQty): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TKatalQty): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TMoleQty; const ARight: TSecondQty): TKatalQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TLumenSecondQty; const ARight: TSecondQty): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TLumenQty): TLumenSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TLumenQty; const ARight: TSecondQty): TLumenSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: THenryQty; const ARight: TSecondQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TOhmQty): THenryQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TOhmQty; const ARight: TSecondQty): THenryQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TWeberQty; const ARight: TSecondQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TVoltQty): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TVoltQty; const ARight: TSecondQty): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSiemensQty; const ARight: TSecondQty): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TSiemensQty): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TFaradQty; const ARight: TSecondQty): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TSecondQty; const ARight: TOhmQty): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TSecondQty; const ARight: TFaradQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TCoulombQty; const ARight: TSecondQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TAmpereQty; const ARight: TSecondQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TAmpereQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TWattQty; const ARight: TSecondQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TWattQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TJouleQty; const ARight: TSecondQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TJouleQty; const ARight: TSecondQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TJouleQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSecondQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TNewtonQty; const ARight: TSecondQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TNewtonQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TSecondQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSecondQty): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TKilogramSquareMeterPerSecondQty): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TKilogramSquareMeterQty; const ARight: TSecondQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TKilogramMeterPerSecondQty; const ARight: TSecondQty): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TKilogramMeterPerSecondQty): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TKilogramMeterQty; const ARight: TSecondQty): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TKilogramPerSecondQty; const ARight: TSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TKilogramPerSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TKilogramQty; const ARight: TSecondQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TMeterSecondQty; const ARight: TSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TMeterQty): TMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TMeterQty; const ARight: TSecondQty): TMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TMeterPerQuarticSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TMeterPerCubicSecondQty; const ARight: TSecondQty): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TMeterPerCubicSecondQty; const ARight: TSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TMeterPerCubicSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TMeterPerSquareSecondQty; const ARight: TSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TMeterPerSquareSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TMeterPerSecondQty; const ARight: TSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TMeterPerSecondQty; const ARight: TSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TMeterPerSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TMeterQty; const ARight: TSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSquareHertzQty; const ARight: TSecondQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TSquareHertzQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: THertzQty; const ARight: TSecondQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: THertzQty; const ARight: TSecondQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: THertzQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TRadianQty; const ARight: TSecondQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: double; const ARight: TSecondQty): THertzQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TSexticSecondQty; const ARight: TSecondQty): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TQuinticSecondQty; const ARight: TSecondQty): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TQuinticSecondQty): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TQuinticSecondQty; const ARight: TSecondQty): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TQuarticSecondQty; const ARight: TSecondQty): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TQuarticSecondQty): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TQuarticSecondQty; const ARight: TSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TCubicSecondQty; const ARight: TSecondQty): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TCubicSecondQty): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TCubicSecondQty; const ARight: TSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TSquareSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondQty./(const ALeft: TSquareSecondQty; const ARight: TSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondQty.*(const ALeft: TSecondQty; const ARight: TSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsReciprocalKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalKelvinName}
{$DEFINE CPLURALNAME:=rsReciprocalKelvinPluralName}
{$DEFINE CPREFIXES:=cReciprocalKelvinPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalKelvinQty}{$i adim.inc}

class operator TReciprocalKelvinQty./(const ALeft: double; const ARight: TReciprocalKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TReciprocalKelvinQty.*(const ALeft: TReciprocalKelvinQty; const ARight: TKelvinQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

class operator TReciprocalKelvinQty.*(const ALeft: TKelvinQty; const ARight: TReciprocalKelvinQty): double; inline;
begin
  result := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsReciprocalHenrySymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalHenryName}
{$DEFINE CPLURALNAME:=rsReciprocalHenryPluralName}
{$DEFINE CPREFIXES:=cReciprocalHenryPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalHenryExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalHenryQty}{$i adim.inc}

class operator TReciprocalHenryQty./(const ALeft: double; const ARight: TReciprocalHenryQty): THenryQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsQuinticMeterSymbol}
{$DEFINE CSINGULARNAME:=rsQuinticMeterName}
{$DEFINE CPLURALNAME:=rsQuinticMeterPluralName}
{$DEFINE CPREFIXES:=cQuinticMeterPrefixes}
{$DEFINE CEXPONENTS:=cQuinticMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TQuinticMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsMeterPerQuinticSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerQuinticSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerQuinticSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerQuinticSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerQuinticSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerQuinticSecondQty}{$i adim.inc}

class operator TMeterPerQuinticSecondQty./(const ALeft: TMeterPerQuarticSecondQty; const ARight: TMeterPerQuinticSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSecondQty): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty./(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerQuinticSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSquareSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerQuinticSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TCubicSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TCubicSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerQuinticSecondQty): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TQuarticSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TQuarticSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty./(const ALeft: TMeterQty; const ARight: TMeterPerQuinticSecondQty): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TQuinticSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerQuinticSecondQty.*(const ALeft: TQuinticSecondQty; const ARight: TMeterPerQuinticSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsMeterPerSexticSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerSexticSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerSexticSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerSexticSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerSexticSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerSexticSecondQty}{$i adim.inc}

class operator TMeterPerSexticSecondQty./(const ALeft: TMeterPerQuinticSecondQty; const ARight: TMeterPerSexticSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TSecondQty): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty./(const ALeft: TMeterPerQuarticSecondQty; const ARight: TMeterPerSexticSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TSquareSecondQty): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty./(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerSexticSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TCubicSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TCubicSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerSexticSecondQty): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TQuarticSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TQuarticSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSexticSecondQty): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TQuinticSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TQuinticSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty./(const ALeft: TMeterQty; const ARight: TMeterPerSexticSecondQty): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TSexticSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TMeterPerSexticSecondQty.*(const ALeft: TSexticSecondQty; const ARight: TMeterPerSexticSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsLuxSymbol}
{$DEFINE CSINGULARNAME:=rsLuxName}
{$DEFINE CPLURALNAME:=rsLuxPluralName}
{$DEFINE CPREFIXES:=cLuxPrefixes}
{$DEFINE CEXPONENTS:=cLuxExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TLuxQty}{$i adim.inc}

class operator TLuxQty./(const ALeft: TLuxSecondQty; const ARight: TLuxQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TLuxQty.*(const ALeft: TSecondQty; const ARight: TLuxQty): TLuxSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TLuxQty.*(const ALeft: TLuxQty; const ARight: TSecondQty): TLuxSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TLuxQty./(const ALeft: TLumenQty; const ARight: TLuxQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TLuxQty.*(const ALeft: TLuxQty; const ARight: TSquareMeterQty): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TLuxQty.*(const ALeft: TSquareMeterQty; const ARight: TLuxQty): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsWattPerMeterPerSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerMeterPerSteradianName}
{$DEFINE CPLURALNAME:=rsWattPerMeterPerSteradianPluralName}
{$DEFINE CPREFIXES:=cWattPerMeterPerSteradianPrefixes}
{$DEFINE CEXPONENTS:=cWattPerMeterPerSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerMeterPerSteradianQty}{$i adim.inc}

class operator TWattPerMeterPerSteradianQty./(const ALeft: TWattQty; const ARight: TWattPerMeterPerSteradianQty): TMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerMeterPerSteradianQty.*(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TMeterSteradianQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerSteradianQty.*(const ALeft: TMeterSteradianQty; const ARight: TWattPerMeterPerSteradianQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerSteradianQty./(const ALeft: TWattPerMeterQty; const ARight: TWattPerMeterPerSteradianQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerMeterPerSteradianQty.*(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TSteradianQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerSteradianQty.*(const ALeft: TSteradianQty; const ARight: TWattPerMeterPerSteradianQty): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerSteradianQty./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerMeterPerSteradianQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerMeterPerSteradianQty.*(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TMeterQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TWattPerMeterPerSteradianQty.*(const ALeft: TMeterQty; const ARight: TWattPerMeterPerSteradianQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsNewtonSquareMeterPerSquareCoulombSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonSquareMeterPerSquareCoulombName}
{$DEFINE CPLURALNAME:=rsNewtonSquareMeterPerSquareCoulombPluralName}
{$DEFINE CPREFIXES:=cNewtonSquareMeterPerSquareCoulombPrefixes}
{$DEFINE CEXPONENTS:=cNewtonSquareMeterPerSquareCoulombExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareCoulombQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsMeterSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterSecondName}
{$DEFINE CPLURALNAME:=rsMeterSecondPluralName}
{$DEFINE CPREFIXES:=cMeterSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterSecondQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsLumenSecondPerCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsLumenSecondPerCubicMeterName}
{$DEFINE CPLURALNAME:=rsLumenSecondPerCubicMeterPluralName}
{$DEFINE CPREFIXES:=cLumenSecondPerCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cLumenSecondPerCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TLumenSecondPerCubicMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsKatalPerCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsKatalPerCubicMeterName}
{$DEFINE CPLURALNAME:=rsKatalPerCubicMeterPluralName}
{$DEFINE CPREFIXES:=cKatalPerCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cKatalPerCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKatalPerCubicMeterQty}{$i adim.inc}

class operator TKatalPerCubicMeterQty./(const ALeft: TKatalQty; const ARight: TKatalPerCubicMeterQty): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKatalPerCubicMeterQty.*(const ALeft: TKatalPerCubicMeterQty; const ARight: TCubicMeterQty): TKatalQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKatalPerCubicMeterQty.*(const ALeft: TCubicMeterQty; const ARight: TKatalPerCubicMeterQty): TKatalQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSexticMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSexticMeterName}
{$DEFINE CPLURALNAME:=rsSexticMeterPluralName}
{$DEFINE CPREFIXES:=cSexticMeterPrefixes}
{$DEFINE CEXPONENTS:=cSexticMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSexticMeterQty}{$i adim.inc}

{$DEFINE CSYMBOL:=rsKelvinPerWattSymbol}
{$DEFINE CSINGULARNAME:=rsKelvinPerWattName}
{$DEFINE CPLURALNAME:=rsKelvinPerWattPluralName}
{$DEFINE CPREFIXES:=cKelvinPerWattPrefixes}
{$DEFINE CEXPONENTS:=cKelvinPerWattExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKelvinPerWattQty}{$i adim.inc}

class operator TKelvinPerWattQty./(const ALeft: double; const ARight: TKelvinPerWattQty): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

class operator TKelvinPerWattQty./(const ALeft: TKelvinQty; const ARight: TKelvinPerWattQty): TWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TKelvinPerWattQty.*(const ALeft: TKelvinPerWattQty; const ARight: TWattQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TKelvinPerWattQty.*(const ALeft: TWattQty; const ARight: TKelvinPerWattQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsSecondPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSecondPerMeterName}
{$DEFINE CPLURALNAME:=rsSecondPerMeterPluralName}
{$DEFINE CPREFIXES:=cSecondPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cSecondPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSecondPerMeterQty}{$i adim.inc}

class operator TSecondPerMeterQty./(const ALeft: TKilogramPerMeterQty; const ARight: TSecondPerMeterQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondPerMeterQty.*(const ALeft: TSecondPerMeterQty; const ARight: TKilogramPerSecondQty): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondPerMeterQty.*(const ALeft: TKilogramPerSecondQty; const ARight: TSecondPerMeterQty): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondPerMeterQty./(const ALeft: TSecondQty; const ARight: TSecondPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TSecondPerMeterQty.*(const ALeft: TSecondPerMeterQty; const ARight: TMeterQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TSecondPerMeterQty.*(const ALeft: TMeterQty; const ARight: TSecondPerMeterQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCandelaPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsCandelaPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsCandelaPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cCandelaPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cCandelaPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCandelaPerSquareMeterQty}{$i adim.inc}

class operator TCandelaPerSquareMeterQty./(const ALeft: TCandelaQty; const ARight: TCandelaPerSquareMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCandelaPerSquareMeterQty.*(const ALeft: TCandelaPerSquareMeterQty; const ARight: TSquareMeterQty): TCandelaQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCandelaPerSquareMeterQty.*(const ALeft: TSquareMeterQty; const ARight: TCandelaPerSquareMeterQty): TCandelaQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE CSYMBOL:=rsCoulombPerMoleSymbol}
{$DEFINE CSINGULARNAME:=rsCoulombPerMoleName}
{$DEFINE CPLURALNAME:=rsCoulombPerMolePluralName}
{$DEFINE CPREFIXES:=cCoulombPerMolePrefixes}
{$DEFINE CEXPONENTS:=cCoulombPerMoleExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCoulombPerMoleQty}{$i adim.inc}

class operator TCoulombPerMoleQty./(const ALeft: TJoulePerMoleQty; const ARight: TCoulombPerMoleQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerMoleQty.*(const ALeft: TCoulombPerMoleQty; const ARight: TVoltQty): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerMoleQty.*(const ALeft: TVoltQty; const ARight: TCoulombPerMoleQty): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerMoleQty./(const ALeft: TCoulombQty; const ARight: TCoulombPerMoleQty): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TCoulombPerMoleQty.*(const ALeft: TCoulombPerMoleQty; const ARight: TMoleQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

class operator TCoulombPerMoleQty.*(const ALeft: TMoleQty; const ARight: TCoulombPerMoleQty): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsDaySymbol}
{$DEFINE CSINGULARNAME:=rsDayName}
{$DEFINE CPLURALNAME:=rsDayPluralName}
{$DEFINE CPREFIXES:=cDayPrefixes}
{$DEFINE CEXPONENTS:=cDayExponents}
{$DEFINE CFACTOR:=cDayFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TDayQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsHourSymbol}
{$DEFINE CSINGULARNAME:=rsHourName}
{$DEFINE CPLURALNAME:=rsHourPluralName}
{$DEFINE CPREFIXES:=cHourPrefixes}
{$DEFINE CEXPONENTS:=cHourExponents}
{$DEFINE CFACTOR:=cHourFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=THourQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsMinuteSymbol}
{$DEFINE CSINGULARNAME:=rsMinuteName}
{$DEFINE CPLURALNAME:=rsMinutePluralName}
{$DEFINE CPREFIXES:=cMinutePrefixes}
{$DEFINE CEXPONENTS:=cMinuteExponents}
{$DEFINE CFACTOR:=cMinuteFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMinuteQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareDaySymbol}
{$DEFINE CSINGULARNAME:=rsSquareDayName}
{$DEFINE CPLURALNAME:=rsSquareDayPluralName}
{$DEFINE CPREFIXES:=cSquareDayPrefixes}
{$DEFINE CEXPONENTS:=cSquareDayExponents}
{$DEFINE CFACTOR:=cSquareDayFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareDayQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareHourSymbol}
{$DEFINE CSINGULARNAME:=rsSquareHourName}
{$DEFINE CPLURALNAME:=rsSquareHourPluralName}
{$DEFINE CPREFIXES:=cSquareHourPrefixes}
{$DEFINE CEXPONENTS:=cSquareHourExponents}
{$DEFINE CFACTOR:=cSquareHourFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareHourQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareMinuteSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMinuteName}
{$DEFINE CPLURALNAME:=rsSquareMinutePluralName}
{$DEFINE CPREFIXES:=cSquareMinutePrefixes}
{$DEFINE CEXPONENTS:=cSquareMinuteExponents}
{$DEFINE CFACTOR:=cSquareMinuteFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMinuteQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsAstronomicalSymbol}
{$DEFINE CSINGULARNAME:=rsAstronomicalName}
{$DEFINE CPLURALNAME:=rsAstronomicalPluralName}
{$DEFINE CPREFIXES:=cAstronomicalPrefixes}
{$DEFINE CEXPONENTS:=cAstronomicalExponents}
{$DEFINE CFACTOR:=cAstronomicalFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TAstronomicalQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsInchSymbol}
{$DEFINE CSINGULARNAME:=rsInchName}
{$DEFINE CPLURALNAME:=rsInchPluralName}
{$DEFINE CPREFIXES:=cInchPrefixes}
{$DEFINE CEXPONENTS:=cInchExponents}
{$DEFINE CFACTOR:=cInchFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TInchQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsFootSymbol}
{$DEFINE CSINGULARNAME:=rsFootName}
{$DEFINE CPLURALNAME:=rsFootPluralName}
{$DEFINE CPREFIXES:=cFootPrefixes}
{$DEFINE CEXPONENTS:=cFootExponents}
{$DEFINE CFACTOR:=cFootFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TFootQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsYardSymbol}
{$DEFINE CSINGULARNAME:=rsYardName}
{$DEFINE CPLURALNAME:=rsYardPluralName}
{$DEFINE CPREFIXES:=cYardPrefixes}
{$DEFINE CEXPONENTS:=cYardExponents}
{$DEFINE CFACTOR:=cYardFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TYardQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsMileSymbol}
{$DEFINE CSINGULARNAME:=rsMileName}
{$DEFINE CPLURALNAME:=rsMilePluralName}
{$DEFINE CPREFIXES:=cMilePrefixes}
{$DEFINE CEXPONENTS:=cMileExponents}
{$DEFINE CFACTOR:=cMileFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMileQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNauticalMileSymbol}
{$DEFINE CSINGULARNAME:=rsNauticalMileName}
{$DEFINE CPLURALNAME:=rsNauticalMilePluralName}
{$DEFINE CPREFIXES:=cNauticalMilePrefixes}
{$DEFINE CEXPONENTS:=cNauticalMileExponents}
{$DEFINE CFACTOR:=cNauticalMileFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNauticalMileQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsAngstromSymbol}
{$DEFINE CSINGULARNAME:=rsAngstromName}
{$DEFINE CPLURALNAME:=rsAngstromPluralName}
{$DEFINE CPREFIXES:=cAngstromPrefixes}
{$DEFINE CEXPONENTS:=cAngstromExponents}
{$DEFINE CFACTOR:=cAngstromFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TAngstromQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareInchSymbol}
{$DEFINE CSINGULARNAME:=rsSquareInchName}
{$DEFINE CPLURALNAME:=rsSquareInchPluralName}
{$DEFINE CPREFIXES:=cSquareInchPrefixes}
{$DEFINE CEXPONENTS:=cSquareInchExponents}
{$DEFINE CFACTOR:=cSquareInchFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareInchQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareFootSymbol}
{$DEFINE CSINGULARNAME:=rsSquareFootName}
{$DEFINE CPLURALNAME:=rsSquareFootPluralName}
{$DEFINE CPREFIXES:=cSquareFootPrefixes}
{$DEFINE CEXPONENTS:=cSquareFootExponents}
{$DEFINE CFACTOR:=cSquareFootFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareFootQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareYardSymbol}
{$DEFINE CSINGULARNAME:=rsSquareYardName}
{$DEFINE CPLURALNAME:=rsSquareYardPluralName}
{$DEFINE CPREFIXES:=cSquareYardPrefixes}
{$DEFINE CEXPONENTS:=cSquareYardExponents}
{$DEFINE CFACTOR:=cSquareYardFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareYardQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareMileSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMileName}
{$DEFINE CPLURALNAME:=rsSquareMilePluralName}
{$DEFINE CPREFIXES:=cSquareMilePrefixes}
{$DEFINE CEXPONENTS:=cSquareMileExponents}
{$DEFINE CFACTOR:=cSquareMileFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMileQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsCubicInchSymbol}
{$DEFINE CSINGULARNAME:=rsCubicInchName}
{$DEFINE CPLURALNAME:=rsCubicInchPluralName}
{$DEFINE CPREFIXES:=cCubicInchPrefixes}
{$DEFINE CEXPONENTS:=cCubicInchExponents}
{$DEFINE CFACTOR:=cCubicInchFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicInchQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsCubicFootSymbol}
{$DEFINE CSINGULARNAME:=rsCubicFootName}
{$DEFINE CPLURALNAME:=rsCubicFootPluralName}
{$DEFINE CPREFIXES:=cCubicFootPrefixes}
{$DEFINE CEXPONENTS:=cCubicFootExponents}
{$DEFINE CFACTOR:=cCubicFootFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicFootQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsCubicYardSymbol}
{$DEFINE CSINGULARNAME:=rsCubicYardName}
{$DEFINE CPLURALNAME:=rsCubicYardPluralName}
{$DEFINE CPREFIXES:=cCubicYardPrefixes}
{$DEFINE CEXPONENTS:=cCubicYardExponents}
{$DEFINE CFACTOR:=cCubicYardFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicYardQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsLitreSymbol}
{$DEFINE CSINGULARNAME:=rsLitreName}
{$DEFINE CPLURALNAME:=rsLitrePluralName}
{$DEFINE CPREFIXES:=cLitrePrefixes}
{$DEFINE CEXPONENTS:=cLitreExponents}
{$DEFINE CFACTOR:=cLitreFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TLitreQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsGallonSymbol}
{$DEFINE CSINGULARNAME:=rsGallonName}
{$DEFINE CPLURALNAME:=rsGallonPluralName}
{$DEFINE CPREFIXES:=cGallonPrefixes}
{$DEFINE CEXPONENTS:=cGallonExponents}
{$DEFINE CFACTOR:=cGallonFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TGallonQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsTonneSymbol}
{$DEFINE CSINGULARNAME:=rsTonneName}
{$DEFINE CPLURALNAME:=rsTonnePluralName}
{$DEFINE CPREFIXES:=cTonnePrefixes}
{$DEFINE CEXPONENTS:=cTonneExponents}
{$DEFINE CFACTOR:=cTonneFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TTonneQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsPoundSymbol}
{$DEFINE CSINGULARNAME:=rsPoundName}
{$DEFINE CPLURALNAME:=rsPoundPluralName}
{$DEFINE CPREFIXES:=cPoundPrefixes}
{$DEFINE CEXPONENTS:=cPoundExponents}
{$DEFINE CFACTOR:=cPoundFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPoundQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsOunceSymbol}
{$DEFINE CSINGULARNAME:=rsOunceName}
{$DEFINE CPLURALNAME:=rsOuncePluralName}
{$DEFINE CPREFIXES:=cOuncePrefixes}
{$DEFINE CEXPONENTS:=cOunceExponents}
{$DEFINE CFACTOR:=cOunceFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TOunceQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsStoneSymbol}
{$DEFINE CSINGULARNAME:=rsStoneName}
{$DEFINE CPLURALNAME:=rsStonePluralName}
{$DEFINE CPREFIXES:=cStonePrefixes}
{$DEFINE CEXPONENTS:=cStoneExponents}
{$DEFINE CFACTOR:=cStoneFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TStoneQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsTonSymbol}
{$DEFINE CSINGULARNAME:=rsTonName}
{$DEFINE CPLURALNAME:=rsTonPluralName}
{$DEFINE CPREFIXES:=cTonPrefixes}
{$DEFINE CEXPONENTS:=cTonExponents}
{$DEFINE CFACTOR:=cTonFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TTonQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsElectronvoltPerSquareSpeedOfLightSymbol}
{$DEFINE CSINGULARNAME:=rsElectronvoltPerSquareSpeedOfLightName}
{$DEFINE CPLURALNAME:=rsElectronvoltPerSquareSpeedOfLightPluralName}
{$DEFINE CPREFIXES:=cElectronvoltPerSquareSpeedOfLightPrefixes}
{$DEFINE CEXPONENTS:=cElectronvoltPerSquareSpeedOfLightExponents}
{$DEFINE CFACTOR:=cElectronvoltPerSquareSpeedOfLightFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TElectronvoltPerSquareSpeedOfLightQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsDegreeCelsiusSymbol}
{$DEFINE CSINGULARNAME:=rsDegreeCelsiusName}
{$DEFINE CPLURALNAME:=rsDegreeCelsiusPluralName}
{$DEFINE CPREFIXES:=cDegreeCelsiusPrefixes}
{$DEFINE CEXPONENTS:=cDegreeCelsiusExponents}
{$DEFINE CFACTOR:=cDegreeCelsiusFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TDegreeCelsiusQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsDegreeFahrenheitSymbol}
{$DEFINE CSINGULARNAME:=rsDegreeFahrenheitName}
{$DEFINE CPLURALNAME:=rsDegreeFahrenheitPluralName}
{$DEFINE CPREFIXES:=cDegreeFahrenheitPrefixes}
{$DEFINE CEXPONENTS:=cDegreeFahrenheitExponents}
{$DEFINE CFACTOR:=cDegreeFahrenheitFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TDegreeFahrenheitQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsDegreeSymbol}
{$DEFINE CSINGULARNAME:=rsDegreeName}
{$DEFINE CPLURALNAME:=rsDegreePluralName}
{$DEFINE CPREFIXES:=cDegreePrefixes}
{$DEFINE CEXPONENTS:=cDegreeExponents}
{$DEFINE CFACTOR:=cDegreeFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TDegreeQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareDegreeSymbol}
{$DEFINE CSINGULARNAME:=rsSquareDegreeName}
{$DEFINE CPLURALNAME:=rsSquareDegreePluralName}
{$DEFINE CPREFIXES:=cSquareDegreePrefixes}
{$DEFINE CEXPONENTS:=cSquareDegreeExponents}
{$DEFINE CFACTOR:=cSquareDegreeFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareDegreeQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsReciprocalSecondSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalSecondName}
{$DEFINE CPLURALNAME:=rsReciprocalSecondPluralName}
{$DEFINE CPREFIXES:=cReciprocalSecondPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsRadianPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsRadianPerSecondName}
{$DEFINE CPLURALNAME:=rsRadianPerSecondPluralName}
{$DEFINE CPREFIXES:=cRadianPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cRadianPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TRadianPerSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsReciprocalSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsReciprocalSquareSecondName}
{$DEFINE CPLURALNAME:=rsReciprocalSquareSecondPluralName}
{$DEFINE CPREFIXES:=cReciprocalSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cReciprocalSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TReciprocalSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsRadianPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsRadianPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsRadianPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cRadianPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cRadianPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TRadianPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsMeterPerHourSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerHourName}
{$DEFINE CPLURALNAME:=rsMeterPerHourPluralName}
{$DEFINE CPREFIXES:=cMeterPerHourPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerHourExponents}
{$DEFINE CFACTOR:=cMeterPerHourFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerHourQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsMilePerHourSymbol}
{$DEFINE CSINGULARNAME:=rsMilePerHourName}
{$DEFINE CPLURALNAME:=rsMilePerHourPluralName}
{$DEFINE CPREFIXES:=cMilePerHourPrefixes}
{$DEFINE CEXPONENTS:=cMilePerHourExponents}
{$DEFINE CFACTOR:=cMilePerHourFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMilePerHourQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNauticalMilePerHourSymbol}
{$DEFINE CSINGULARNAME:=rsNauticalMilePerHourName}
{$DEFINE CPLURALNAME:=rsNauticalMilePerHourPluralName}
{$DEFINE CPREFIXES:=cNauticalMilePerHourPrefixes}
{$DEFINE CEXPONENTS:=cNauticalMilePerHourExponents}
{$DEFINE CFACTOR:=cNauticalMilePerHourFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNauticalMilePerHourQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsMeterPerSecondPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerSecondPerSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerSecondPerSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerSecondPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerSecondPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerSecondPerSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsMeterPerHourPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerHourPerSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerHourPerSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerHourPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerHourPerSecondExponents}
{$DEFINE CFACTOR:=cMeterPerHourPerSecondFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerHourPerSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsJoulePerKilogramSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerKilogramName}
{$DEFINE CPLURALNAME:=rsJoulePerKilogramPluralName}
{$DEFINE CPREFIXES:=cJoulePerKilogramPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerKilogramExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerKilogramQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsGraySymbol}
{$DEFINE CSINGULARNAME:=rsGrayName}
{$DEFINE CPLURALNAME:=rsGrayPluralName}
{$DEFINE CPREFIXES:=cGrayPrefixes}
{$DEFINE CEXPONENTS:=cGrayExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TGrayQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSievertSymbol}
{$DEFINE CSINGULARNAME:=rsSievertName}
{$DEFINE CPLURALNAME:=rsSievertPluralName}
{$DEFINE CPREFIXES:=cSievertPrefixes}
{$DEFINE CEXPONENTS:=cSievertExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSievertQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsJoulePerSquareMeterPerHertzSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerSquareMeterPerHertzName}
{$DEFINE CPLURALNAME:=rsJoulePerSquareMeterPerHertzPluralName}
{$DEFINE CPREFIXES:=cJoulePerSquareMeterPerHertzPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerSquareMeterPerHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerSquareMeterPerHertzQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonSecondSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonSecondName}
{$DEFINE CPLURALNAME:=rsNewtonSecondPluralName}
{$DEFINE CPREFIXES:=cNewtonSecondPrefixes}
{$DEFINE CEXPONENTS:=cNewtonSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsDioptreSymbol}
{$DEFINE CSINGULARNAME:=rsDioptreName}
{$DEFINE CPLURALNAME:=rsDioptrePluralName}
{$DEFINE CPREFIXES:=cDioptrePrefixes}
{$DEFINE CEXPONENTS:=cDioptreExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TDioptreQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonMeterSecondSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonMeterSecondName}
{$DEFINE CPLURALNAME:=rsNewtonMeterSecondPluralName}
{$DEFINE CPREFIXES:=cNewtonMeterSecondPrefixes}
{$DEFINE CEXPONENTS:=cNewtonMeterSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonMeterSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsPoundPerCubicInchSymbol}
{$DEFINE CSINGULARNAME:=rsPoundPerCubicInchName}
{$DEFINE CPLURALNAME:=rsPoundPerCubicInchPluralName}
{$DEFINE CPREFIXES:=cPoundPerCubicInchPrefixes}
{$DEFINE CEXPONENTS:=cPoundPerCubicInchExponents}
{$DEFINE CFACTOR:=cPoundPerCubicInchFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPoundPerCubicInchQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsPoundForceSymbol}
{$DEFINE CSINGULARNAME:=rsPoundForceName}
{$DEFINE CPLURALNAME:=rsPoundForcePluralName}
{$DEFINE CPREFIXES:=cPoundForcePrefixes}
{$DEFINE CEXPONENTS:=cPoundForceExponents}
{$DEFINE CFACTOR:=cPoundForceFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPoundForceQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareKilogramSquareMeterPerQuarticSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareKilogramSquareMeterPerQuarticSecondName}
{$DEFINE CPLURALNAME:=rsSquareKilogramSquareMeterPerQuarticSecondPluralName}
{$DEFINE CPREFIXES:=cSquareKilogramSquareMeterPerQuarticSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareKilogramSquareMeterPerQuarticSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramSquareMeterPerQuarticSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsNewtonPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cNewtonPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cNewtonPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonPerSquareMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsBarSymbol}
{$DEFINE CSINGULARNAME:=rsBarName}
{$DEFINE CPLURALNAME:=rsBarPluralName}
{$DEFINE CPREFIXES:=cBarPrefixes}
{$DEFINE CEXPONENTS:=cBarExponents}
{$DEFINE CFACTOR:=cBarFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TBarQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsPoundPerSquareInchSymbol}
{$DEFINE CSINGULARNAME:=rsPoundPerSquareInchName}
{$DEFINE CPLURALNAME:=rsPoundPerSquareInchPluralName}
{$DEFINE CPREFIXES:=cPoundPerSquareInchPrefixes}
{$DEFINE CEXPONENTS:=cPoundPerSquareInchExponents}
{$DEFINE CFACTOR:=cPoundPerSquareInchFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPoundPerSquareInchQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsJoulePerCubicMeterSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerCubicMeterName}
{$DEFINE CPLURALNAME:=rsJoulePerCubicMeterPluralName}
{$DEFINE CPREFIXES:=cJoulePerCubicMeterPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerCubicMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerCubicMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramPerMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramPerMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramPerMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerMeterPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsWattHourSymbol}
{$DEFINE CSINGULARNAME:=rsWattHourName}
{$DEFINE CPLURALNAME:=rsWattHourPluralName}
{$DEFINE CPREFIXES:=cWattHourPrefixes}
{$DEFINE CEXPONENTS:=cWattHourExponents}
{$DEFINE CFACTOR:=cWattHourFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattHourQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsWattSecondSymbol}
{$DEFINE CSINGULARNAME:=rsWattSecondName}
{$DEFINE CPLURALNAME:=rsWattSecondPluralName}
{$DEFINE CPREFIXES:=cWattSecondPrefixes}
{$DEFINE CEXPONENTS:=cWattSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsWattPerHertzSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerHertzName}
{$DEFINE CPLURALNAME:=rsWattPerHertzPluralName}
{$DEFINE CPREFIXES:=cWattPerHertzPrefixes}
{$DEFINE CEXPONENTS:=cWattPerHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerHertzQty}{$i adim.inc}

class operator TWattPerHertzQty./(const ALeft: TWattPerHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerHertzQty./(const ALeft: TWattPerHertzQty; const ARight: TSquareMeterSteradianQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerHertzQty./(const ALeft: TWattPerHertzQty; const ARight: TWattPerSteradianPerHertzQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

class operator TWattPerHertzQty./(const ALeft: TWattPerHertzQty; const ARight: TSteradianQty): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsElectronvoltSymbol}
{$DEFINE CSINGULARNAME:=rsElectronvoltName}
{$DEFINE CPLURALNAME:=rsElectronvoltPluralName}
{$DEFINE CPREFIXES:=cElectronvoltPrefixes}
{$DEFINE CEXPONENTS:=cElectronvoltExponents}
{$DEFINE CFACTOR:=cElectronvoltFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TElectronvoltQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonMeterSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonMeterName}
{$DEFINE CPLURALNAME:=rsNewtonMeterPluralName}
{$DEFINE CPREFIXES:=cNewtonMeterPrefixes}
{$DEFINE CEXPONENTS:=cNewtonMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsPoundForceInchSymbol}
{$DEFINE CSINGULARNAME:=rsPoundForceInchName}
{$DEFINE CPLURALNAME:=rsPoundForceInchPluralName}
{$DEFINE CPREFIXES:=cPoundForceInchPrefixes}
{$DEFINE CEXPONENTS:=cPoundForceInchExponents}
{$DEFINE CFACTOR:=cPoundForceInchFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPoundForceInchQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsRydbergSymbol}
{$DEFINE CSINGULARNAME:=rsRydbergName}
{$DEFINE CPLURALNAME:=rsRydbergPluralName}
{$DEFINE CPREFIXES:=cRydbergPrefixes}
{$DEFINE CEXPONENTS:=cRydbergExponents}
{$DEFINE CFACTOR:=cRydbergFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TRydbergQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsCalorieSymbol}
{$DEFINE CSINGULARNAME:=rsCalorieName}
{$DEFINE CPLURALNAME:=rsCaloriePluralName}
{$DEFINE CPREFIXES:=cCaloriePrefixes}
{$DEFINE CEXPONENTS:=cCalorieExponents}
{$DEFINE CFACTOR:=cCalorieFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCalorieQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsJoulePerDegreeSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerDegreeName}
{$DEFINE CPLURALNAME:=rsJoulePerDegreePluralName}
{$DEFINE CPREFIXES:=cJoulePerDegreePrefixes}
{$DEFINE CEXPONENTS:=cJoulePerDegreeExponents}
{$DEFINE CFACTOR:=cJoulePerDegreeFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerDegreeQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonMeterPerRadianSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonMeterPerRadianName}
{$DEFINE CPLURALNAME:=rsNewtonMeterPerRadianPluralName}
{$DEFINE CPREFIXES:=cNewtonMeterPerRadianPrefixes}
{$DEFINE CEXPONENTS:=cNewtonMeterPerRadianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonMeterPerRadianQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonMeterPerDegreeSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonMeterPerDegreeName}
{$DEFINE CPLURALNAME:=rsNewtonMeterPerDegreePluralName}
{$DEFINE CPREFIXES:=cNewtonMeterPerDegreePrefixes}
{$DEFINE CEXPONENTS:=cNewtonMeterPerDegreeExponents}
{$DEFINE CFACTOR:=cNewtonMeterPerDegreeFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonMeterPerDegreeQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerSquareSecondPerRadianSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerSquareSecondPerRadianName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerSquareSecondPerRadianPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerSquareSecondPerRadianPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerSquareSecondPerRadianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareSecondPerRadianQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerCubicSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerCubicSecondName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerCubicSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerCubicSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerCubicSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerCubicSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsAmpereHourSymbol}
{$DEFINE CSINGULARNAME:=rsAmpereHourName}
{$DEFINE CPLURALNAME:=rsAmpereHourPluralName}
{$DEFINE CPREFIXES:=cAmpereHourPrefixes}
{$DEFINE CEXPONENTS:=cAmpereHourExponents}
{$DEFINE CFACTOR:=cAmpereHourFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TAmpereHourQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsAmpereSecondSymbol}
{$DEFINE CSINGULARNAME:=rsAmpereSecondName}
{$DEFINE CPLURALNAME:=rsAmpereSecondPluralName}
{$DEFINE CPREFIXES:=cAmpereSecondPrefixes}
{$DEFINE CEXPONENTS:=cAmpereSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TAmpereSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareAmpereSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareAmpereSquareSecondName}
{$DEFINE CPLURALNAME:=rsSquareAmpereSquareSecondPluralName}
{$DEFINE CPREFIXES:=cSquareAmpereSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareAmpereSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareAmpereSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerAmperePerCubicSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerAmperePerCubicSecondName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerAmperePerCubicSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerAmperePerCubicSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerAmperePerCubicSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerAmperePerCubicSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondSymbol}
{$DEFINE CSINGULARNAME:=rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondName}
{$DEFINE CPLURALNAME:=rsSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondPluralName}
{$DEFINE CPREFIXES:=cSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondPrefixes}
{$DEFINE CEXPONENTS:=cSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsSquareAmpereQuarticSecondPerKilogramPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cSquareAmpereQuarticSecondPerKilogramPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cSquareAmpereQuarticSecondPerKilogramPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareAmpereQuarticSecondPerKilogramPerSquareMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerSquareAmperePerCubicSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerSquareAmperePerCubicSecondName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerSquareAmperePerCubicSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerSquareAmperePerCubicSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerSquareAmperePerCubicSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareAmperePerCubicSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareAmpereCubicSecondPerKilogramPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsSquareAmpereCubicSecondPerKilogramPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsSquareAmpereCubicSecondPerKilogramPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cSquareAmpereCubicSecondPerKilogramPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cSquareAmpereCubicSecondPerKilogramPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareAmpereCubicSecondPerKilogramPerSquareMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsWeberPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsWeberPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsWeberPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cWeberPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cWeberPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWeberPerSquareMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramPerAmperePerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerAmperePerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramPerAmperePerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramPerAmperePerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerAmperePerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerAmperePerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerAmperePerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerAmperePerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerAmperePerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerAmperePerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerAmperePerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerAmperePerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerSquareAmperePerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerSquareAmperePerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerSquareAmperePerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerSquareAmperePerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerSquareAmperePerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareAmperePerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsCandelaSteradianSymbol}
{$DEFINE CSINGULARNAME:=rsCandelaSteradianName}
{$DEFINE CPLURALNAME:=rsCandelaSteradianPluralName}
{$DEFINE CPREFIXES:=cCandelaSteradianPrefixes}
{$DEFINE CEXPONENTS:=cCandelaSteradianExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCandelaSteradianQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsCandelaSteradianPerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsCandelaSteradianPerSquareMeterName}
{$DEFINE CPLURALNAME:=rsCandelaSteradianPerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cCandelaSteradianPerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cCandelaSteradianPerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCandelaSteradianPerSquareMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsBequerelSymbol}
{$DEFINE CSINGULARNAME:=rsBequerelName}
{$DEFINE CPLURALNAME:=rsBequerelPluralName}
{$DEFINE CPREFIXES:=cBequerelPrefixes}
{$DEFINE CEXPONENTS:=cBequerelExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TBequerelQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsMolePerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMolePerSecondName}
{$DEFINE CPLURALNAME:=rsMolePerSecondPluralName}
{$DEFINE CPREFIXES:=cMolePerSecondPrefixes}
{$DEFINE CEXPONENTS:=cMolePerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMolePerSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsPascalPerMeterSymbol}
{$DEFINE CSINGULARNAME:=rsPascalPerMeterName}
{$DEFINE CPLURALNAME:=rsPascalPerMeterPluralName}
{$DEFINE CPREFIXES:=cPascalPerMeterPrefixes}
{$DEFINE CEXPONENTS:=cPascalPerMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPascalPerMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramPerSquareMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerSquareMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramPerSquareMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramPerSquareMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerSquareMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerSquareMeterPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsJoulePerSquareMeterSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerSquareMeterName}
{$DEFINE CPLURALNAME:=rsJoulePerSquareMeterPluralName}
{$DEFINE CPREFIXES:=cJoulePerSquareMeterPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerSquareMeterExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerSquareMeterQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsWattPerSquareMeterPerHertzSymbol}
{$DEFINE CSINGULARNAME:=rsWattPerSquareMeterPerHertzName}
{$DEFINE CPLURALNAME:=rsWattPerSquareMeterPerHertzPluralName}
{$DEFINE CPREFIXES:=cWattPerSquareMeterPerHertzPrefixes}
{$DEFINE CEXPONENTS:=cWattPerSquareMeterPerHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TWattPerSquareMeterPerHertzQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsPoundForcePerInchSymbol}
{$DEFINE CSINGULARNAME:=rsPoundForcePerInchName}
{$DEFINE CPLURALNAME:=rsPoundForcePerInchPluralName}
{$DEFINE CPREFIXES:=cPoundForcePerInchPrefixes}
{$DEFINE CEXPONENTS:=cPoundForcePerInchExponents}
{$DEFINE CFACTOR:=cPoundForcePerInchFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPoundForcePerInchQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsPascalSecondSymbol}
{$DEFINE CSINGULARNAME:=rsPascalSecondName}
{$DEFINE CPLURALNAME:=rsPascalSecondPluralName}
{$DEFINE CPREFIXES:=cPascalSecondPrefixes}
{$DEFINE CEXPONENTS:=cPascalSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TPascalSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramPerMeterPerSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerMeterPerSecondName}
{$DEFINE CPLURALNAME:=rsKilogramPerMeterPerSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramPerMeterPerSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerMeterPerSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerMeterPerSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramCubicMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramCubicMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramCubicMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramCubicMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramCubicMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramCubicMeterPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramQuarticMeterPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramQuarticMeterPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsKilogramQuarticMeterPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramQuarticMeterPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramQuarticMeterPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramQuarticMeterPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsMeterPerKilogramPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsMeterPerKilogramPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsMeterPerKilogramPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cMeterPerKilogramPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cMeterPerKilogramPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TMeterPerKilogramPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsCubicMeterPerKilogramPerSquareSecondSymbol}
{$DEFINE CSINGULARNAME:=rsCubicMeterPerKilogramPerSquareSecondName}
{$DEFINE CPLURALNAME:=rsCubicMeterPerKilogramPerSquareSecondPluralName}
{$DEFINE CPREFIXES:=cCubicMeterPerKilogramPerSquareSecondPrefixes}
{$DEFINE CEXPONENTS:=cCubicMeterPerKilogramPerSquareSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TCubicMeterPerKilogramPerSquareSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerSquareSecondPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerSquareSecondPerKelvinName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerSquareSecondPerKelvinPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerSquareSecondPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerSquareSecondPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerSquareSecondPerKelvinQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsSquareMeterPerSquareSecondPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsSquareMeterPerSquareSecondPerKelvinName}
{$DEFINE CPLURALNAME:=rsSquareMeterPerSquareSecondPerKelvinPluralName}
{$DEFINE CPREFIXES:=cSquareMeterPerSquareSecondPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cSquareMeterPerSquareSecondPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondPerKelvinQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramMeterPerCubicSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramMeterPerCubicSecondName}
{$DEFINE CPLURALNAME:=rsKilogramMeterPerCubicSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramMeterPerCubicSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramMeterPerCubicSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterPerCubicSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramPerCubicSecondSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerCubicSecondName}
{$DEFINE CPLURALNAME:=rsKilogramPerCubicSecondPluralName}
{$DEFINE CPREFIXES:=cKilogramPerCubicSecondPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerCubicSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerCubicSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramSquareMeterPerCubicSecondPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramSquareMeterPerCubicSecondPerKelvinName}
{$DEFINE CPLURALNAME:=rsKilogramSquareMeterPerCubicSecondPerKelvinPluralName}
{$DEFINE CPREFIXES:=cKilogramSquareMeterPerCubicSecondPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cKilogramSquareMeterPerCubicSecondPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramSquareMeterPerCubicSecondPerKelvinQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramMeterPerCubicSecondPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramMeterPerCubicSecondPerKelvinName}
{$DEFINE CPLURALNAME:=rsKilogramMeterPerCubicSecondPerKelvinPluralName}
{$DEFINE CPREFIXES:=cKilogramMeterPerCubicSecondPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cKilogramMeterPerCubicSecondPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramMeterPerCubicSecondPerKelvinQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsKilogramPerCubicSecondPerKelvinSymbol}
{$DEFINE CSINGULARNAME:=rsKilogramPerCubicSecondPerKelvinName}
{$DEFINE CPLURALNAME:=rsKilogramPerCubicSecondPerKelvinPluralName}
{$DEFINE CPREFIXES:=cKilogramPerCubicSecondPerKelvinPrefixes}
{$DEFINE CEXPONENTS:=cKilogramPerCubicSecondPerKelvinExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TKilogramPerCubicSecondPerKelvinQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonPerCoulombSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonPerCoulombName}
{$DEFINE CPLURALNAME:=rsNewtonPerCoulombPluralName}
{$DEFINE CPREFIXES:=cNewtonPerCoulombPrefixes}
{$DEFINE CEXPONENTS:=cNewtonPerCoulombExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonPerCoulombQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonSquareMeterPerCoulombSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonSquareMeterPerCoulombName}
{$DEFINE CPLURALNAME:=rsNewtonSquareMeterPerCoulombPluralName}
{$DEFINE CPREFIXES:=cNewtonSquareMeterPerCoulombPrefixes}
{$DEFINE CEXPONENTS:=cNewtonSquareMeterPerCoulombExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonSquareMeterPerCoulombQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonPerAmpereSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonPerAmpereName}
{$DEFINE CPLURALNAME:=rsNewtonPerAmperePluralName}
{$DEFINE CPREFIXES:=cNewtonPerAmperePrefixes}
{$DEFINE CEXPONENTS:=cNewtonPerAmpereExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonPerAmpereQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsTeslaMeterPerAmpereSymbol}
{$DEFINE CSINGULARNAME:=rsTeslaMeterPerAmpereName}
{$DEFINE CPLURALNAME:=rsTeslaMeterPerAmperePluralName}
{$DEFINE CPREFIXES:=cTeslaMeterPerAmperePrefixes}
{$DEFINE CEXPONENTS:=cTeslaMeterPerAmpereExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TTeslaMeterPerAmpereQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsNewtonPerSquareAmpereSymbol}
{$DEFINE CSINGULARNAME:=rsNewtonPerSquareAmpereName}
{$DEFINE CPLURALNAME:=rsNewtonPerSquareAmperePluralName}
{$DEFINE CPREFIXES:=cNewtonPerSquareAmperePrefixes}
{$DEFINE CEXPONENTS:=cNewtonPerSquareAmpereExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TNewtonPerSquareAmpereQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsJouleSecondSymbol}
{$DEFINE CSINGULARNAME:=rsJouleSecondName}
{$DEFINE CPLURALNAME:=rsJouleSecondPluralName}
{$DEFINE CPREFIXES:=cJouleSecondPrefixes}
{$DEFINE CEXPONENTS:=cJouleSecondExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJouleSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsJoulePerHertzSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerHertzName}
{$DEFINE CPLURALNAME:=rsJoulePerHertzPluralName}
{$DEFINE CPREFIXES:=cJoulePerHertzPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerHertzExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerHertzQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsElectronvoltSecondSymbol}
{$DEFINE CSINGULARNAME:=rsElectronvoltSecondName}
{$DEFINE CPLURALNAME:=rsElectronvoltSecondPluralName}
{$DEFINE CPREFIXES:=cElectronvoltSecondPrefixes}
{$DEFINE CEXPONENTS:=cElectronvoltSecondExponents}
{$DEFINE CFACTOR:=cElectronvoltSecondFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TElectronvoltSecondQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsElectronvoltMeterPerSpeedOfLightSymbol}
{$DEFINE CSINGULARNAME:=rsElectronvoltMeterPerSpeedOfLightName}
{$DEFINE CPLURALNAME:=rsElectronvoltMeterPerSpeedOfLightPluralName}
{$DEFINE CPREFIXES:=cElectronvoltMeterPerSpeedOfLightPrefixes}
{$DEFINE CEXPONENTS:=cElectronvoltMeterPerSpeedOfLightExponents}
{$DEFINE CFACTOR:=cElectronvoltMeterPerSpeedOfLightFactor}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TElectronvoltMeterPerSpeedOfLightQty}{$i adim.inc}

{$DEFINE NOP}
{$DEFINE CSYMBOL:=rsJoulePerTeslaSymbol}
{$DEFINE CSINGULARNAME:=rsJoulePerTeslaName}
{$DEFINE CPLURALNAME:=rsJoulePerTeslaPluralName}
{$DEFINE CPREFIXES:=cJoulePerTeslaPrefixes}
{$DEFINE CEXPONENTS:=cJoulePerTeslaExponents}
{$DEFINE IMPL_QUANTITY}{$DEFINE TQuantity:=TJoulePerTeslaQty}{$i adim.inc}

{ External Operators }

operator /(const ALeft: TCubicSecondQty; const ARight: TSquareSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TQuarticSecondQty; const ARight: TCubicSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TQuinticSecondQty; const ARight: TQuarticSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TQuinticSecondQty; const ARight: TSquareSecondQty): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSexticSecondQty; const ARight: TQuinticSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSexticSecondQty; const ARight: TQuarticSecondQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCubicMeterQty; const ARight: TSquareMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TQuarticMeterQty; const ARight: TCubicMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TQuinticMeterQty; const ARight: TQuarticMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TQuinticMeterQty; const ARight: TCubicMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSexticMeterQty; const ARight: TQuinticMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSexticMeterQty; const ARight: TQuarticMeterQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCubicKelvinQty; const ARight: TSquareKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TQuarticKelvinQty; const ARight: TCubicKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: THertzQty): TSecondQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TRadianQty; const ARight: THertzQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TSquareSecondQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: THertzQty; const ARight: TSquareHertzQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TRadianQty; const ARight: TSquareSecondQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSteradianQty; const ARight: TSquareSecondQty): TSteradianPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSteradianQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterQty; const ARight: TMeterPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareHertzQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator *(const ALeft: TSquareSecondQty; const ARight: TMeterPerSquareSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator /(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSquareSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterQty; const ARight: TCubicSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSecondQty; const ARight: TSquareSecondQty): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerCubicSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterQty; const ARight: TQuarticSecondQty): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSecondQty; const ARight: TCubicSecondQty): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareSecondQty): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerQuarticSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterQty; const ARight: TQuinticSecondQty): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSecondQty; const ARight: TQuarticSecondQty): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TCubicSecondQty): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TSquareSecondQty): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSecondQty): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterQty; const ARight: TSexticSecondQty): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSecondQty; const ARight: TQuinticSecondQty): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerSquareSecondQty; const ARight: TQuarticSecondQty): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerCubicSecondQty; const ARight: TCubicSecondQty): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSquareSecondQty): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSecondQty): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterQty; const ARight: TSquareSecondQty): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterPerSquareSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterSecondQty; const ARight: TMeterQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramMeterQty; const ARight: TKilogramQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramQty; const ARight: TKilogramPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramMeterQty; const ARight: TKilogramMeterPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramPerSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TReciprocalSquareRootMeterQty): TSquareRootMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TReciprocalMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TReciprocalSquareRootCubicMeterQty; const ARight: TReciprocalMeterQty): TReciprocalSquareRootMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TSquareMeterQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TCubicMeterQty): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TReciprocalMeterQty; const ARight: TSquareMeterQty): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalCubicMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalMeterQty): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator *(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TQuarticMeterQty): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TReciprocalMeterQty; const ARight: TCubicMeterQty): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareMeterQty): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalQuarticMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalMeterQty): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator *(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalSquareMeterQty): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramSquareMeterQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramMeterPerSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TReciprocalMeterQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerSecondQty; const ARight: TReciprocalSquareMeterQty): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramMeterQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSecondQty; const ARight: TMeterQty): TSecondPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramQty; const ARight: TMeterQty): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerMeterQty; const ARight: TKilogramPerSecondQty): TSecondPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerSecondQty; const ARight: TMeterPerSecondQty): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramQty; const ARight: TSquareMeterQty): TKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramQty; const ARight: TCubicMeterQty): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerSquareMeterQty; const ARight: TMeterQty): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TMeterPerSquareSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareSecondQty): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TKilogramPerSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramMeterPerSecondQty; const ARight: TNewtonQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramMeterQty; const ARight: TSquareSecondQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonRadianQty; const ARight: TNewtonQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TSquareMeterQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TPascalQty; const ARight: TSquareMeterPerSquareSecondQty): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TNewtonQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TCubicMeterQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TKilogramMeterPerSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TSquareMeterPerSquareSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TKilogramSquareMeterQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareSecondQty): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TJouleQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TKilogramSquareMeterPerSecondQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TJouleQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TJoulePerRadianQty): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TWattQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TJouleQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSquareMeterPerSquareSecondQty): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TNewtonQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombQty; const ARight: TAmpereQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombMeterQty; const ARight: TCoulombQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TCoulombQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TAmpereQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombQty; const ARight: TFaradQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareCoulombQty; const ARight: TJouleQty): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator *(const ALeft: TFaradQty; const ARight: TOhmQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator *(const ALeft: TOhmQty; const ARight: TFaradQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSquareAmpereQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareVoltQty; const ARight: TWattQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TVoltQty; const ARight: TAmpereQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TSiemensQty): TOhmQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TFaradQty; const ARight: TSiemensQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSiemensQty; const ARight: TFaradQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TAmpereQty; const ARight: TSiemensQty): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSiemensQty; const ARight: TSiemensPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerSecondQty; const ARight: TCoulombQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWeberQty; const ARight: TSquareMeterQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWeberQty; const ARight: TVoltQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWeberQty; const ARight: TCoulombQty): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWeberQty; const ARight: TAmpereQty): THenryQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: THenryQty; const ARight: TOhmQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TOhmQty; const ARight: THenryQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: THenryQty): TReciprocalHenryQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TLumenQty; const ARight: TSteradianQty): TCandelaQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TLumenSecondQty; const ARight: TLumenQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TLumenSecondPerCubicMeterQty; const ARight: TCubicMeterQty): TLumenSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TLumenQty; const ARight: TSquareMeterQty): TLuxQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TLuxSecondQty; const ARight: TSecondQty): TLuxQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMoleQty; const ARight: TKatalQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TCubicMeterQty): TNewtonPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TPascalQty; const ARight: TNewtonPerCubicMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonPerCubicMeterQty; const ARight: TMeterPerSquareSecondQty): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TNewtonPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TSquareMeterQty): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonPerMeterQty; const ARight: TPascalQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonPerMeterQty; const ARight: TKilogramQty): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCubicMeterPerSecondQty; const ARight: TSquareMeterQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TPoiseuilleQty; const ARight: TPascalQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TPoiseuilleQty; const ARight: TKilogramPerSquareMeterQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerSecondQty; const ARight: TPoiseuilleQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterPerSecondQty; const ARight: TMeterPerSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TPoiseuilleQty; const ARight: TSquareMeterPerSecondQty): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramQty): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramQty; const ARight: TQuarticMeterQty): TKilogramPerQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TQuarticMeterSecondQty; const ARight: TQuarticMeterQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerSecondQty; const ARight: TQuarticMeterQty): TKilogramPerQuarticMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TKilogramPerQuarticMeterPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKilogramQty; const ARight: TQuarticMeterSecondQty): TKilogramPerQuarticMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TPascalQty; const ARight: TCubicMeterPerSecondQty): TKilogramPerQuarticMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCubicMeterQty; const ARight: TKilogramQty): TCubicMeterPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TCubicMeterPerKilogramQty): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TKilogramSquareSecondQty; const ARight: TSquareSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCubicMeterQty; const ARight: TSquareSecondQty): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator *(const ALeft: TSquareMeterQty; const ARight: TMeterPerSquareSecondQty): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator *(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareMeterQty): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareMeterPerSquareSecondQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TJouleQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TQuarticMeterQty): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TCubicMeterPerSquareSecondQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TCubicMeterQty): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TJouleQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonCubicMeterQty; const ARight: TNewtonSquareMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TSquareKilogramQty): TNewtonPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareMeterQty): TSquareKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramQty): TSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TNewtonQty): TSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TSquareKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareKilogramQty): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareMeterQty): TNewtonPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TSquareKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator *(const ALeft: TSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TCubicMeterPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator *(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareSecondQty): TCubicMeterPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator /(const ALeft: TCubicMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TKilogramSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TKelvinQty): TReciprocalKelvinQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TKilogramKelvinQty; const ARight: TKilogramQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TJoulePerKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TKilogramKelvinQty): TJoulePerKilogramPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TJoulePerKilogramPerKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJoulePerKelvinQty; const ARight: TJoulePerKilogramPerKelvinQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterKelvinQty; const ARight: TKelvinQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKelvinQty; const ARight: TMeterQty): TKelvinPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TWattPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSquareMeterQty): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerMeterQty; const ARight: TWattPerSquareMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TCubicMeterQty): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerMeterQty; const ARight: TSquareMeterQty): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerCubicMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TWattPerKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TMeterKelvinQty): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerMeterQty; const ARight: TKelvinQty): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerKelvinQty; const ARight: TMeterQty): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerMeterPerKelvinQty): TKelvinPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKelvinQty; const ARight: TWattQty): TKelvinPerWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TWattPerKelvinQty): TKelvinPerWattQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TMeterQty; const ARight: TWattQty): TMeterPerWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TWattPerMeterQty): TMeterPerWattQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TMeterKelvinQty; const ARight: TWattQty): TMeterKelvinPerWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterKelvinPerWattQty; const ARight: TKelvinQty): TMeterPerWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TMeterKelvinPerWattQty): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterKelvinQty; const ARight: TSquareMeterQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSquareMeterKelvinQty): TWattPerSquareMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerKelvinQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerKelvinQty; const ARight: TSquareMeterQty): TWattPerSquareMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TQuarticKelvinQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TQuarticKelvinQty): TWattPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSquareMeterQuarticKelvinQty): TWattPerSquareMeterPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TQuarticKelvinQty): TWattPerSquareMeterPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerQuarticKelvinQty; const ARight: TSquareMeterQty): TWattPerSquareMeterPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TMoleQty): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMoleKelvinQty; const ARight: TMoleQty): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TMoleKelvinQty): TJoulePerMolePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJoulePerKelvinQty; const ARight: TMoleQty): TJoulePerMolePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJoulePerMoleQty; const ARight: TKelvinQty): TJoulePerMolePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TOhmMeterQty; const ARight: TOhmQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TVoltQty; const ARight: TVoltPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TCoulombQty): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TVoltPerMeterQty; const ARight: TTeslaQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombQty; const ARight: TCoulombPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TAmpereQty; const ARight: TCoulombPerMeterQty): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareCoulombQty; const ARight: TSquareCoulombPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareCoulombPerMeterQty; const ARight: TCoulombQty): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombQty; const ARight: TSquareMeterQty): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombPerSquareMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterQty; const ARight: TSquareCoulombQty): TSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TSquareCoulombQty): TNewtonPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TNewtonQty): TSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareMeterQty): TNewtonPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TVoltPerMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TSquareCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TVoltMeterQty; const ARight: TVoltQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TVoltMeterQty; const ARight: TSquareMeterQty): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TVoltMeterQty; const ARight: TVoltMeterPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TFaradQty; const ARight: TFaradPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareCoulombQty; const ARight: TNewtonSquareMeterQty): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombQty; const ARight: TVoltMeterQty): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TVoltPerMeterQty): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TNewtonSquareMeterPerSquareCoulombQty): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TAmpereQty; const ARight: TAmperePerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterQty; const ARight: TAmpereQty): TMeterPerAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TTeslaMeterQty; const ARight: TTeslaQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TTeslaMeterQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TTeslaQty; const ARight: TAmpereQty): TTeslaPerAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: THenryQty; const ARight: THenryPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TTeslaMeterQty; const ARight: TAmpereQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: THenryPerMeterQty; const ARight: TTeslaPerAmpereQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: THenryPerMeterQty; const ARight: TTeslaQty): TMeterPerAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TTeslaQty; const ARight: TAmperePerMeterQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TNewtonQty; const ARight: TSquareAmpereQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TRadianQty; const ARight: TRadianPerMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareKilogramQty; const ARight: TSquareSecondQty): TSquareKilogramPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TNewtonPerMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareSecondQty; const ARight: TSquareMeterQty): TSquareSecondPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TSquareMeterPerSquareSecondQty): TSquareSecondPerSquareMeterQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: TFaradPerMeterQty): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareJouleQty): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TNewtonCubicMeterQty): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareKilogramSquareMeterPerSquareSecondQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TSquareJouleSquareSecondQty): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombQty; const ARight: TKilogramQty): TCoulombPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TSquareMeterQty): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TCoulombQty): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterAmpereQty; const ARight: TKilogramSquareMeterPerSecondQty): TCoulombPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJouleQty; const ARight: TSquareMeterAmpereQty): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TLumenQty; const ARight: TWattQty): TLumenPerWattQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: double; const ARight: TMoleQty): TReciprocalMoleQty; inline;
begin
  result.FValue := ALeft / ARight.FValue;
end;

operator /(const ALeft: TAmpereQty; const ARight: TSquareMeterQty): TAmperePerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TAmperePerMeterQty; const ARight: TMeterQty): TAmperePerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMoleQty; const ARight: TCubicMeterQty): TMolePerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCandelaQty; const ARight: TSquareMeterQty): TCandelaPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombQty; const ARight: TCubicMeterQty): TCoulombPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombPerMeterQty; const ARight: TSquareMeterQty): TCoulombPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombPerSquareMeterQty; const ARight: TCoulombPerCubicMeterQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TGrayPerSecondQty): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSteradianHertzQty; const ARight: TSteradianQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TMeterSteradianQty; const ARight: TSteradianQty): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterSteradianQty; const ARight: TSteradianQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCubicMeterSteradianQty; const ARight: TCubicMeterQty): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterSteradianQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSteradianHertzQty): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSteradianQty): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSteradianQty): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSteradianPerHertzQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator *(const ALeft: TSteradianQty; const ARight: TWattPerSteradianPerHertzQty): TWattPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator *(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSteradianQty): TWattPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSteradianHertzQty): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSteradianQty; const ARight: TMeterQty): TWattPerMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerMeterQty; const ARight: TSteradianQty): TWattPerMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TMeterSteradianQty): TWattPerMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSquareMeterSteradianQty): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TSteradianQty): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSteradianQty; const ARight: TSquareMeterQty): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TCubicMeterSteradianQty): TWattPerCubicMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerCubicMeterQty; const ARight: TSteradianQty): TWattPerCubicMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSteradianQty; const ARight: TCubicMeterQty): TWattPerCubicMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattQty; const ARight: TSquareMeterSteradianHertzQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSquareMeterQty; const ARight: TSteradianHertzQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSteradianQty; const ARight: TSquareMeterPerSecondQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator *(const ALeft: TSquareMeterSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): TWattPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator *(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterSteradianQty): TWattPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue * ARight.FValue;
end;

operator /(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzQty): THertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSquareMeterQty): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TKatalQty; const ARight: TCubicMeterQty): TKatalPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TCoulombQty; const ARight: TMoleQty): TCoulombPerMoleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

operator /(const ALeft: TJoulePerMoleQty; const ARight: TVoltQty): TCoulombPerMoleQty; inline;
begin
  result.FValue := ALeft.FValue / ARight.FValue;
end;

{ TUnit classes }

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterAmpereQty}{$DEFINE TUnit:=TSquareMeterAmpereUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareKilogramQty}{$DEFINE TUnit:=TSquareMeterPerSquareKilogramUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TGrayPerSecondQty}{$DEFINE TUnit:=TGrayPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TVoltMeterPerSecondQty}{$DEFINE TUnit:=TVoltMeterPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMoleQty}{$DEFINE TUnit:=TMoleUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattQty}{$DEFINE TUnit:=TWattUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TFaradQty}{$DEFINE TUnit:=TFaradUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerMeterQty}{$DEFINE TUnit:=TWattPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalSquareMeterQty}{$DEFINE TUnit:=TReciprocalSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareKilogramPerSquareSecondQty}{$DEFINE TUnit:=TSquareKilogramPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareKilogramPerMeterQty}{$DEFINE TUnit:=TSquareKilogramPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TQuarticMeterSecondQty}{$DEFINE TUnit:=TQuarticMeterSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonQty}{$DEFINE TUnit:=TNewtonUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLumenSecondQty}{$DEFINE TUnit:=TLumenSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramMeterPerSecondQty}{$DEFINE TUnit:=TKilogramMeterPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareCoulombPerMeterQty}{$DEFINE TUnit:=TSquareCoulombPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerMoleQty}{$DEFINE TUnit:=TJoulePerMoleUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TSquareMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramPerSecondQty}{$DEFINE TUnit:=TKilogramPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$DEFINE TUnit:=TNewtonPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerKilogramPerKelvinQty}{$DEFINE TUnit:=TJoulePerKilogramPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSteradianPerHertzQty}{$DEFINE TUnit:=TWattPerSteradianPerHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TAmperePerMeterQty}{$DEFINE TUnit:=TAmperePerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSteradianQty}{$DEFINE TUnit:=TWattPerSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerKelvinQty}{$DEFINE TUnit:=TWattPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCandelaQty}{$DEFINE TUnit:=TCandelaUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerKelvinQty}{$DEFINE TUnit:=TJoulePerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSiemensPerMeterQty}{$DEFINE TUnit:=TSiemensPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicMeterPerSquareSecondQty}{$DEFINE TUnit:=TCubicMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramQty}{$DEFINE TUnit:=TKilogramUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramSquareSecondQty}{$DEFINE TUnit:=TKilogramSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalSquareRootCubicMeterQty}{$DEFINE TUnit:=TReciprocalSquareRootCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalMeterQty}{$DEFINE TUnit:=TReciprocalMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareKilogramQty}{$DEFINE TUnit:=TNewtonSquareMeterPerSquareKilogramUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicSecondQty}{$DEFINE TUnit:=TCubicSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareVoltQty}{$DEFINE TUnit:=TSquareVoltUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramPerSquareMeterQty}{$DEFINE TUnit:=TKilogramPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterQty}{$DEFINE TUnit:=TSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSecondQty}{$DEFINE TUnit:=TSquareMeterPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerRadianQty}{$DEFINE TUnit:=TJoulePerRadianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TRadianQty}{$DEFINE TUnit:=TRadianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCoulombPerKilogramQty}{$DEFINE TUnit:=TCoulombPerKilogramUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterSteradianQty}{$DEFINE TUnit:=TMeterSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TAmpereQty}{$DEFINE TUnit:=TAmpereUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSiemensQty}{$DEFINE TUnit:=TSiemensUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCoulombQty}{$DEFINE TUnit:=TCoulombUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TQuarticMeterQty}{$DEFINE TUnit:=TQuarticMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPascalQty}{$DEFINE TUnit:=TPascalUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramPerQuarticMeterQty}{$DEFINE TUnit:=TKilogramPerQuarticMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalMoleQty}{$DEFINE TUnit:=TReciprocalMoleUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerSquareCoulombQty}{$DEFINE TUnit:=TNewtonPerSquareCoulombUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonRadianQty}{$DEFINE TUnit:=TNewtonRadianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerSquareKilogramQty}{$DEFINE TUnit:=TNewtonPerSquareKilogramUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THenryQty}{$DEFINE TUnit:=THenryUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerQuarticKelvinQty}{$DEFINE TUnit:=TWattPerQuarticKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWeberQty}{$DEFINE TUnit:=TWeberUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TVoltPerMeterQty}{$DEFINE TUnit:=TVoltPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareKilogramSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TSquareKilogramSquareMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicMeterPerKilogramQty}{$DEFINE TUnit:=TCubicMeterPerKilogramUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterKelvinQty}{$DEFINE TUnit:=TSquareMeterKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerCubicMeterQty}{$DEFINE TUnit:=TWattPerCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCoulombPerSquareMeterQty}{$DEFINE TUnit:=TCoulombPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TVoltQty}{$DEFINE TUnit:=TVoltUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TOhmMeterQty}{$DEFINE TUnit:=TOhmMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicMeterPerSecondQty}{$DEFINE TUnit:=TCubicMeterPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TJouleUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicKelvinQty}{$DEFINE TUnit:=TCubicKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalQuarticMeterQty}{$DEFINE TUnit:=TReciprocalQuarticMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCoulombMeterQty}{$DEFINE TUnit:=TCoulombMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLuxSecondQty}{$DEFINE TUnit:=TLuxSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TTeslaQty}{$DEFINE TUnit:=TTeslaUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSteradianPerSquareSecondQty}{$DEFINE TUnit:=TSteradianPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLumenPerWattQty}{$DEFINE TUnit:=TLumenPerWattUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TTeslaMeterQty}{$DEFINE TUnit:=TTeslaMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerCubicMeterQty}{$DEFINE TUnit:=TNewtonPerCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareCoulombQty}{$DEFINE TUnit:=TSquareMeterPerSquareCoulombUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareSecondQty}{$DEFINE TUnit:=TSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSteradianQty}{$DEFINE TUnit:=TSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareCoulombQty}{$DEFINE TUnit:=TSquareCoulombUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareSecondPerSquareMeterQty}{$DEFINE TUnit:=TSquareSecondPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareHertzQty}{$DEFINE TUnit:=TSquareHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TTeslaPerAmpereQty}{$DEFINE TUnit:=TTeslaPerAmpereUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerKelvinQty}{$DEFINE TUnit:=TWattPerSquareMeterPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterQty}{$DEFINE TUnit:=TWattPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TFaradPerMeterQty}{$DEFINE TUnit:=TFaradPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramKelvinQty}{$DEFINE TUnit:=TKilogramKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMoleKelvinQty}{$DEFINE TUnit:=TMoleKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKelvinQty}{$DEFINE TUnit:=TKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TRadianPerMeterQty}{$DEFINE TUnit:=TRadianPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareJouleQty}{$DEFINE TUnit:=TSquareJouleUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalCubicMeterQty}{$DEFINE TUnit:=TReciprocalCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterSteradianHertzQty}{$DEFINE TUnit:=TSquareMeterSteradianHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TVoltMeterQty}{$DEFINE TUnit:=TVoltMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerCubicMeterPerSteradianQty}{$DEFINE TUnit:=TWattPerCubicMeterPerSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCoulombPerMeterQty}{$DEFINE TUnit:=TCoulombPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLumenQty}{$DEFINE TUnit:=TLumenUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSteradianHertzQty}{$DEFINE TUnit:=TSteradianHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerMolePerKelvinQty}{$DEFINE TUnit:=TJoulePerMolePerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramMeterQty}{$DEFINE TUnit:=TKilogramMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TQuarticSecondQty}{$DEFINE TUnit:=TQuarticSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerQuarticKelvinQty}{$DEFINE TUnit:=TWattPerSquareMeterPerQuarticKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerSecondQty}{$DEFINE TUnit:=TMeterPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCoulombPerCubicMeterQty}{$DEFINE TUnit:=TCoulombPerCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareKelvinQty}{$DEFINE TUnit:=TSquareKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterKelvinPerWattQty}{$DEFINE TUnit:=TMeterKelvinPerWattUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalSquareRootMeterQty}{$DEFINE TUnit:=TReciprocalSquareRootMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TQuarticKelvinQty}{$DEFINE TUnit:=TQuarticKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoiseuilleQty}{$DEFINE TUnit:=TPoiseuilleUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerSteradianPerHertzQty}{$DEFINE TUnit:=TWattPerSquareMeterPerSteradianPerHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterQty}{$DEFINE TUnit:=TNewtonSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSexticSecondQty}{$DEFINE TUnit:=TSexticSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THenryPerMeterQty}{$DEFINE TUnit:=THenryPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterKelvinQty}{$DEFINE TUnit:=TMeterKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TOhmQty}{$DEFINE TUnit:=TOhmUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterQty}{$DEFINE TUnit:=TKilogramSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterQty}{$DEFINE TUnit:=TMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TQuinticSecondQty}{$DEFINE TUnit:=TQuinticSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramPerMeterQty}{$DEFINE TUnit:=TKilogramPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareNewtonQty}{$DEFINE TUnit:=TSquareNewtonUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicMeterSteradianQty}{$DEFINE TUnit:=TCubicMeterSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerSquareSecondQty}{$DEFINE TUnit:=TMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramPerCubicMeterQty}{$DEFINE TUnit:=TKilogramPerCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramPerQuarticMeterPerSecondQty}{$DEFINE TUnit:=TKilogramPerQuarticMeterPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerSteradianQty}{$DEFINE TUnit:=TWattPerSquareMeterPerSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerWattQty}{$DEFINE TUnit:=TMeterPerWattUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareRootMeterQty}{$DEFINE TUnit:=TSquareRootMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterSteradianQty}{$DEFINE TUnit:=TSquareMeterSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonCubicMeterQty}{$DEFINE TUnit:=TNewtonCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TAmperePerSquareMeterQty}{$DEFINE TUnit:=TAmperePerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THertzQty}{$DEFINE TUnit:=THertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerQuarticSecondQty}{$DEFINE TUnit:=TMeterPerQuarticSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerMeterPerKelvinQty}{$DEFINE TUnit:=TWattPerMeterPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKelvinPerMeterQty}{$DEFINE TUnit:=TKelvinPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerCubicSecondQty}{$DEFINE TUnit:=TMeterPerCubicSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareJouleSquareSecondQty}{$DEFINE TUnit:=TSquareJouleSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareKilogramPerSquareMeterQty}{$DEFINE TUnit:=TSquareKilogramPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerAmpereQty}{$DEFINE TUnit:=TMeterPerAmpereUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKatalQty}{$DEFINE TUnit:=TKatalUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterQuarticKelvinQty}{$DEFINE TUnit:=TSquareMeterQuarticKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMolePerCubicMeterQty}{$DEFINE TUnit:=TMolePerCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareKilogramQty}{$DEFINE TUnit:=TSquareKilogramUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicMeterQty}{$DEFINE TUnit:=TCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareAmpereQty}{$DEFINE TUnit:=TSquareAmpereUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSecondQty}{$DEFINE TUnit:=TSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalKelvinQty}{$DEFINE TUnit:=TReciprocalKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalHenryQty}{$DEFINE TUnit:=TReciprocalHenryUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TQuinticMeterQty}{$DEFINE TUnit:=TQuinticMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerQuinticSecondQty}{$DEFINE TUnit:=TMeterPerQuinticSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerSexticSecondQty}{$DEFINE TUnit:=TMeterPerSexticSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLuxQty}{$DEFINE TUnit:=TLuxUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerMeterPerSteradianQty}{$DEFINE TUnit:=TWattPerMeterPerSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareCoulombQty}{$DEFINE TUnit:=TNewtonSquareMeterPerSquareCoulombUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterSecondQty}{$DEFINE TUnit:=TMeterSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLumenSecondPerCubicMeterQty}{$DEFINE TUnit:=TLumenSecondPerCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKatalPerCubicMeterQty}{$DEFINE TUnit:=TKatalPerCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSexticMeterQty}{$DEFINE TUnit:=TSexticMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKelvinPerWattQty}{$DEFINE TUnit:=TKelvinPerWattUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSecondPerMeterQty}{$DEFINE TUnit:=TSecondPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCandelaPerSquareMeterQty}{$DEFINE TUnit:=TCandelaPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCoulombPerMoleQty}{$DEFINE TUnit:=TCoulombPerMoleUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TDayQty}{$DEFINE TUnit:=TDayUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THourQty}{$DEFINE TUnit:=THourUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMinuteQty}{$DEFINE TUnit:=TMinuteUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareDayQty}{$DEFINE TUnit:=TSquareDayUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareHourQty}{$DEFINE TUnit:=TSquareHourUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMinuteQty}{$DEFINE TUnit:=TSquareMinuteUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TAstronomicalQty}{$DEFINE TUnit:=TAstronomicalUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TInchQty}{$DEFINE TUnit:=TInchUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TFootQty}{$DEFINE TUnit:=TFootUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TYardQty}{$DEFINE TUnit:=TYardUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMileQty}{$DEFINE TUnit:=TMileUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNauticalMileQty}{$DEFINE TUnit:=TNauticalMileUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TAngstromQty}{$DEFINE TUnit:=TAngstromUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareInchQty}{$DEFINE TUnit:=TSquareInchUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareFootQty}{$DEFINE TUnit:=TSquareFootUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareYardQty}{$DEFINE TUnit:=TSquareYardUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMileQty}{$DEFINE TUnit:=TSquareMileUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicInchQty}{$DEFINE TUnit:=TCubicInchUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicFootQty}{$DEFINE TUnit:=TCubicFootUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCubicYardQty}{$DEFINE TUnit:=TCubicYardUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLitreQty}{$DEFINE TUnit:=TLitreUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TGallonQty}{$DEFINE TUnit:=TGallonUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TTonneQty}{$DEFINE TUnit:=TTonneUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoundQty}{$DEFINE TUnit:=TPoundUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TOunceQty}{$DEFINE TUnit:=TOunceUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TStoneQty}{$DEFINE TUnit:=TStoneUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TTonQty}{$DEFINE TUnit:=TTonUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TElectronvoltPerSquareSpeedOfLightQty}{$DEFINE TUnit:=TElectronvoltPerSquareSpeedOfLightUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TDegreeCelsiusQty}{$DEFINE TUnit:=TDegreeCelsiusUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TDegreeFahrenheitQty}{$DEFINE TUnit:=TDegreeFahrenheitUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TDegreeQty}{$DEFINE TUnit:=TDegreeUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareDegreeQty}{$DEFINE TUnit:=TSquareDegreeUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THertzQty}{$DEFINE TUnit:=TReciprocalSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THertzQty}{$DEFINE TUnit:=TRadianPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareHertzQty}{$DEFINE TUnit:=TReciprocalSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareHertzQty}{$DEFINE TUnit:=TRadianPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerHourQty}{$DEFINE TUnit:=TMeterPerHourUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMilePerHourQty}{$DEFINE TUnit:=TMilePerHourUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNauticalMilePerHourQty}{$DEFINE TUnit:=TNauticalMilePerHourUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerSquareSecondQty}{$DEFINE TUnit:=TMeterPerSecondPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TMeterPerHourPerSecondQty}{$DEFINE TUnit:=TMeterPerHourPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TJoulePerKilogramUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TGrayUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterPerSquareSecondQty}{$DEFINE TUnit:=TSievertUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramPerSecondQty}{$DEFINE TUnit:=TJoulePerSquareMeterPerHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramMeterPerSecondQty}{$DEFINE TUnit:=TNewtonSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TReciprocalMeterQty}{$DEFINE TUnit:=TDioptreUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$DEFINE TUnit:=TNewtonMeterSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoundPerCubicInchQty}{$DEFINE TUnit:=TPoundPerCubicInchUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoundForceQty}{$DEFINE TUnit:=TPoundForceUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonQty}{$DEFINE TUnit:=TKilogramMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareNewtonQty}{$DEFINE TUnit:=TSquareKilogramSquareMeterPerQuarticSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPascalQty}{$DEFINE TUnit:=TNewtonPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TBarQty}{$DEFINE TUnit:=TBarUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoundPerSquareInchQty}{$DEFINE TUnit:=TPoundPerSquareInchUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPascalQty}{$DEFINE TUnit:=TJoulePerCubicMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPascalQty}{$DEFINE TUnit:=TKilogramPerMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattHourQty}{$DEFINE TUnit:=TWattHourUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TWattSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TWattPerHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TElectronvoltQty}{$DEFINE TUnit:=TElectronvoltUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TNewtonMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoundForceInchQty}{$DEFINE TUnit:=TPoundForceInchUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TRydbergQty}{$DEFINE TUnit:=TRydbergUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCalorieQty}{$DEFINE TUnit:=TCalorieUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJouleQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerDegreeQty}{$DEFINE TUnit:=TJoulePerDegreeUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerRadianQty}{$DEFINE TUnit:=TNewtonMeterPerRadianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonMeterPerDegreeQty}{$DEFINE TUnit:=TNewtonMeterPerDegreeUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerRadianQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareSecondPerRadianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattQty}{$DEFINE TUnit:=TKilogramSquareMeterPerCubicSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TAmpereHourQty}{$DEFINE TUnit:=TAmpereHourUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TCoulombQty}{$DEFINE TUnit:=TAmpereSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareCoulombQty}{$DEFINE TUnit:=TSquareAmpereSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TVoltQty}{$DEFINE TUnit:=TKilogramSquareMeterPerAmperePerCubicSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareVoltQty}{$DEFINE TUnit:=TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TFaradQty}{$DEFINE TUnit:=TSquareAmpereQuarticSecondPerKilogramPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TOhmQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareAmperePerCubicSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSiemensQty}{$DEFINE TUnit:=TSquareAmpereCubicSecondPerKilogramPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TTeslaQty}{$DEFINE TUnit:=TWeberPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TTeslaQty}{$DEFINE TUnit:=TKilogramPerAmperePerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWeberQty}{$DEFINE TUnit:=TKilogramSquareMeterPerAmperePerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THenryQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareAmperePerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLumenQty}{$DEFINE TUnit:=TCandelaSteradianUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TLuxQty}{$DEFINE TUnit:=TCandelaSteradianPerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THertzQty}{$DEFINE TUnit:=TBequerelUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKatalQty}{$DEFINE TUnit:=TMolePerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerCubicMeterQty}{$DEFINE TUnit:=TPascalPerMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerCubicMeterQty}{$DEFINE TUnit:=TKilogramPerSquareMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$DEFINE TUnit:=TJoulePerSquareMeterUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$DEFINE TUnit:=TWattPerSquareMeterPerHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoundForcePerInchQty}{$DEFINE TUnit:=TPoundForcePerInchUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerMeterQty}{$DEFINE TUnit:=TKilogramPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoiseuilleQty}{$DEFINE TUnit:=TPascalSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TPoiseuilleQty}{$DEFINE TUnit:=TKilogramPerMeterPerSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterQty}{$DEFINE TUnit:=TKilogramCubicMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonCubicMeterQty}{$DEFINE TUnit:=TKilogramQuarticMeterPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonPerSquareKilogramQty}{$DEFINE TUnit:=TMeterPerKilogramPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TNewtonSquareMeterPerSquareKilogramQty}{$DEFINE TUnit:=TCubicMeterPerKilogramPerSquareSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerKelvinQty}{$DEFINE TUnit:=TKilogramSquareMeterPerSquareSecondPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TJoulePerKilogramPerKelvinQty}{$DEFINE TUnit:=TSquareMeterPerSquareSecondPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerMeterQty}{$DEFINE TUnit:=TKilogramMeterPerCubicSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterQty}{$DEFINE TUnit:=TKilogramPerCubicSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerKelvinQty}{$DEFINE TUnit:=TKilogramSquareMeterPerCubicSecondPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerMeterPerKelvinQty}{$DEFINE TUnit:=TKilogramMeterPerCubicSecondPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TWattPerSquareMeterPerKelvinQty}{$DEFINE TUnit:=TKilogramPerCubicSecondPerKelvinUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TVoltPerMeterQty}{$DEFINE TUnit:=TNewtonPerCoulombUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TVoltMeterQty}{$DEFINE TUnit:=TNewtonSquareMeterPerCoulombUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TTeslaMeterQty}{$DEFINE TUnit:=TNewtonPerAmpereUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THenryPerMeterQty}{$DEFINE TUnit:=TTeslaMeterPerAmpereUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=THenryPerMeterQty}{$DEFINE TUnit:=TNewtonPerSquareAmpereUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$DEFINE TUnit:=TJouleSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TKilogramSquareMeterPerSecondQty}{$DEFINE TUnit:=TJoulePerHertzUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TElectronvoltSecondQty}{$DEFINE TUnit:=TElectronvoltSecondUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TElectronvoltMeterPerSpeedOfLightQty}{$DEFINE TUnit:=TElectronvoltMeterPerSpeedOfLightUnit}{$i adim.inc}

{$DEFINE IMPL_UNIT}{$DEFINE TQuantity:=TSquareMeterAmpereQty}{$DEFINE TUnit:=TJoulePerTeslaUnit}{$i adim.inc}

class operator TSecondUnit.*(const ALeft: TSecondQty; const ARight: TSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TSquareSecondQty; const ARight: TSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TSecondQty; const ARight: TSquareSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TCubicSecondQty; const ARight: TSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TCubicSecondQty; const ARight: TSquareSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit.*(const ALeft: TSecondQty; const ARight: TCubicSecondUnit): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TCubicSecondQty; const ARight: TSecondUnit): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TQuarticSecondQty; const ARight: TSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit./(const ALeft: TQuarticSecondQty; const ARight: TCubicSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TSquareSecondUnit): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TQuarticSecondQty; const ARight: TSquareSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit.*(const ALeft: TSecondQty; const ARight: TQuarticSecondUnit): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TQuarticSecondQty; const ARight: TSecondUnit): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TQuinticSecondQty; const ARight: TSecondUnit): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit./(const ALeft: TQuinticSecondQty; const ARight: TQuarticSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TCubicSecondUnit): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TCubicSecondQty; const ARight: TSquareSecondUnit): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TQuinticSecondQty; const ARight: TSquareSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit./(const ALeft: TQuinticSecondQty; const ARight: TCubicSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuinticSecondUnit.*(const ALeft: TSecondQty; const ARight: TQuinticSecondUnit): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TQuinticSecondQty; const ARight: TSecondUnit): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TSexticSecondQty; const ARight: TSecondUnit): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuinticSecondUnit./(const ALeft: TSexticSecondQty; const ARight: TQuinticSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TQuarticSecondUnit): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TQuarticSecondQty; const ARight: TSquareSecondUnit): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TSexticSecondQty; const ARight: TSquareSecondUnit): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit./(const ALeft: TSexticSecondQty; const ARight: TQuarticSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit.*(const ALeft: TCubicSecondQty; const ARight: TCubicSecondUnit): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit./(const ALeft: TSexticSecondQty; const ARight: TCubicSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareRootMeterUnit./(const ALeft: TMeterQty; const ARight: TSquareRootMeterUnit): TSquareRootMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareRootMeterUnit.*(const ALeft: TSquareRootMeterQty; const ARight: TSquareRootMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TMeterQty; const ARight: TMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TSquareMeterQty; const ARight: TMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TMeterQty; const ARight: TSquareMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TCubicMeterQty; const ARight: TSquareMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TCubicMeterQty; const ARight: TMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TMeterUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TMeterQty; const ARight: TCubicMeterUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TQuarticMeterQty; const ARight: TCubicMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TQuarticMeterQty; const ARight: TMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TSquareMeterUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TQuarticMeterQty; const ARight: TSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TQuarticMeterQty; const ARight: TMeterUnit): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit.*(const ALeft: TMeterQty; const ARight: TQuarticMeterUnit): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit./(const ALeft: TQuinticMeterQty; const ARight: TQuarticMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TQuinticMeterQty; const ARight: TMeterUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TSquareMeterUnit): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TCubicMeterUnit): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TQuinticMeterQty; const ARight: TCubicMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TQuinticMeterQty; const ARight: TSquareMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TQuinticMeterQty; const ARight: TMeterUnit): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuinticMeterUnit.*(const ALeft: TMeterQty; const ARight: TQuinticMeterUnit): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuinticMeterUnit./(const ALeft: TSexticMeterQty; const ARight: TQuinticMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TSexticMeterQty; const ARight: TMeterUnit): TQuinticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TQuarticMeterQty; const ARight: TSquareMeterUnit): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TQuarticMeterUnit): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit./(const ALeft: TSexticMeterQty; const ARight: TQuarticMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSexticMeterQty; const ARight: TSquareMeterUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TCubicMeterUnit): TSexticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TSexticMeterQty; const ARight: TCubicMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TKilogramQty; const ARight: TKilogramUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TSquareKilogramQty; const ARight: TKilogramUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: TAmpereQty; const ARight: TAmpereUnit): TSquareAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TSquareAmpereQty; const ARight: TAmpereUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TKelvinUnit): TSquareKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TSquareKelvinQty; const ARight: TKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TSquareKelvinQty; const ARight: TKelvinUnit): TCubicKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TSquareKelvinUnit): TCubicKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKelvinUnit./(const ALeft: TCubicKelvinQty; const ARight: TSquareKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TCubicKelvinQty; const ARight: TKelvinUnit): TSquareKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TCubicKelvinQty; const ARight: TKelvinUnit): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TCubicKelvinUnit): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicKelvinUnit./(const ALeft: TQuarticKelvinQty; const ARight: TCubicKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TQuarticKelvinQty; const ARight: TKelvinUnit): TCubicKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKelvinUnit.*(const ALeft: TSquareKelvinQty; const ARight: TSquareKelvinUnit): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKelvinUnit./(const ALeft: TQuarticKelvinQty; const ARight: TSquareKelvinUnit): TSquareKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit.*(const ALeft: TRadianQty; const ARight: TRadianUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit./(const ALeft: TSteradianQty; const ARight: TRadianUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TRadianQty; const ARight: TSecondUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TSecondQty; const ARight: THertzUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: THertzQty; const ARight: TSecondUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TRadianQty; const ARight: THertzUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TRadianQty; const ARight: THertzUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit.*(const ALeft: THertzQty; const ARight: TRadianUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit./(const ALeft: THertzQty; const ARight: TRadianUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: THertzQty; const ARight: THertzUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: THertzQty; const ARight: TSecondUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit.*(const ALeft: TSecondQty; const ARight: TSquareHertzUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TSquareHertzQty; const ARight: TSecondUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit./(const ALeft: THertzQty; const ARight: TSquareHertzUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: THertzQty; const ARight: THertzUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TSquareHertzQty; const ARight: THertzUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TRadianQty; const ARight: TSquareSecondUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit.*(const ALeft: TSquareSecondQty; const ARight: TSquareHertzUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TSquareHertzQty; const ARight: TSquareSecondUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit./(const ALeft: TRadianQty; const ARight: TSquareHertzUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit.*(const ALeft: TRadianQty; const ARight: TSquareHertzUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit.*(const ALeft: TSquareHertzQty; const ARight: TRadianUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit./(const ALeft: TSquareHertzQty; const ARight: TRadianUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit./(const ALeft: TSquareHertzQty; const ARight: TSquareHertzUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TSteradianQty; const ARight: TSquareSecondUnit): TSteradianPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianPerSquareSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TSteradianPerSquareSecondUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSquareSecondUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianPerSquareSecondUnit./(const ALeft: TSteradianQty; const ARight: TSteradianPerSquareSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit.*(const ALeft: TSteradianQty; const ARight: TSquareHertzUnit): TSteradianPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TSquareHertzQty; const ARight: TSteradianUnit): TSteradianPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSteradianUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit./(const ALeft: TSteradianPerSquareSecondQty; const ARight: TSquareHertzUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TMeterQty; const ARight: TSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TMeterPerSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TMeterQty; const ARight: TMeterPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TMeterQty; const ARight: THertzUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: THertzQty; const ARight: TMeterUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TMeterPerSecondQty; const ARight: TMeterUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TMeterPerSecondQty; const ARight: THertzUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit.*(const ALeft: TMeterQty; const ARight: TSquareHertzUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSquareHertzQty; const ARight: TMeterUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareHertzUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TMeterQty; const ARight: TSquareSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerSquareSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit./(const ALeft: TMeterQty; const ARight: TMeterPerSquareSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit.*(const ALeft: TSecondQty; const ARight: TMeterPerSquareSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSquareSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit./(const ALeft: TMeterQty; const ARight: TCubicSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerCubicSecondUnit.*(const ALeft: TCubicSecondQty; const ARight: TMeterPerCubicSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit.*(const ALeft: TMeterPerCubicSecondQty; const ARight: TCubicSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerCubicSecondUnit./(const ALeft: TMeterQty; const ARight: TMeterPerCubicSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TSquareSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerCubicSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerCubicSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TMeterPerCubicSecondQty; const ARight: TSquareSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerCubicSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerCubicSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerCubicSecondUnit.*(const ALeft: TSecondQty; const ARight: TMeterPerCubicSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TMeterPerCubicSecondQty; const ARight: TSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerCubicSecondUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerCubicSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit./(const ALeft: TMeterQty; const ARight: TQuarticSecondUnit): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuarticSecondUnit.*(const ALeft: TQuarticSecondQty; const ARight: TMeterPerQuarticSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit.*(const ALeft: TMeterPerQuarticSecondQty; const ARight: TQuarticSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuarticSecondUnit./(const ALeft: TMeterQty; const ARight: TMeterPerQuarticSecondUnit): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TCubicSecondUnit): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuarticSecondUnit.*(const ALeft: TCubicSecondQty; const ARight: TMeterPerQuarticSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit.*(const ALeft: TMeterPerQuarticSecondQty; const ARight: TCubicSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuarticSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerQuarticSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareSecondUnit): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuarticSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerQuarticSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSquareSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuarticSecondUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerQuarticSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TMeterPerCubicSecondQty; const ARight: TSecondUnit): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuarticSecondUnit.*(const ALeft: TSecondQty; const ARight: TMeterPerQuarticSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuarticSecondUnit./(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerQuarticSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuinticSecondUnit./(const ALeft: TMeterQty; const ARight: TQuinticSecondUnit): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit.*(const ALeft: TQuinticSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuinticSecondUnit.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TQuinticSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit./(const ALeft: TMeterQty; const ARight: TMeterPerQuinticSecondUnit): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TQuarticSecondUnit): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit.*(const ALeft: TQuarticSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TQuarticSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerQuinticSecondUnit): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TCubicSecondUnit): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit.*(const ALeft: TCubicSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TCubicSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerQuinticSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TMeterPerCubicSecondQty; const ARight: TSquareSecondUnit): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSquareSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit./(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerQuinticSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSecondUnit): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit.*(const ALeft: TSecondQty; const ARight: TMeterPerQuinticSecondUnit): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSecondUnit): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerQuinticSecondUnit./(const ALeft: TMeterPerQuarticSecondQty; const ARight: TMeterPerQuinticSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSexticSecondUnit./(const ALeft: TMeterQty; const ARight: TSexticSecondUnit): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit.*(const ALeft: TSexticSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSexticSecondUnit.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TSexticSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit./(const ALeft: TMeterQty; const ARight: TMeterPerSexticSecondUnit): TSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuinticSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TQuinticSecondUnit): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit.*(const ALeft: TQuinticSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuinticSecondUnit.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TQuinticSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit./(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSexticSecondUnit): TQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TQuarticSecondUnit): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit.*(const ALeft: TQuarticSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticSecondUnit.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TQuarticSecondUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit./(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterPerSexticSecondUnit): TQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit./(const ALeft: TMeterPerCubicSecondQty; const ARight: TCubicSecondUnit): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit.*(const ALeft: TCubicSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicSecondUnit.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TCubicSecondUnit): TMeterPerCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit./(const ALeft: TMeterPerCubicSecondQty; const ARight: TMeterPerSexticSecondUnit): TCubicSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TMeterPerQuarticSecondQty; const ARight: TSquareSecondUnit): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TSquareSecondUnit): TMeterPerQuarticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit./(const ALeft: TMeterPerQuarticSecondQty; const ARight: TMeterPerSexticSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TMeterPerQuinticSecondQty; const ARight: TSecondUnit): TMeterPerSexticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit.*(const ALeft: TSecondQty; const ARight: TMeterPerSexticSecondUnit): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TMeterPerSexticSecondQty; const ARight: TSecondUnit): TMeterPerQuinticSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSexticSecondUnit./(const ALeft: TMeterPerQuinticSecondQty; const ARight: TMeterPerSexticSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TSquareMeterQty; const ARight: TSquareSecondUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TSquareMeterPerSquareSecondUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TSquareSecondUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit./(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterPerSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TMeterUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit.*(const ALeft: TMeterQty; const ARight: TMeterPerSquareSecondUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterPerSquareSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TMeterQty; const ARight: TSecondUnit): TMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSecondQty; const ARight: TMeterUnit): TMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TMeterSecondQty; const ARight: TMeterUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TMeterSecondQty; const ARight: TSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TKilogramQty; const ARight: TMeterUnit): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TMeterQty; const ARight: TKilogramUnit): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TKilogramMeterQty; const ARight: TKilogramUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TKilogramMeterQty; const ARight: TMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TKilogramQty; const ARight: TSecondUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TKilogramPerSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TKilogramPerSecondQty; const ARight: TSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit./(const ALeft: TKilogramQty; const ARight: TKilogramPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TKilogramQty; const ARight: THertzUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: THertzQty; const ARight: TKilogramUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TKilogramPerSecondQty; const ARight: THertzUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TKilogramMeterQty; const ARight: TSecondUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TKilogramMeterPerSecondUnit): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TKilogramMeterPerSecondQty; const ARight: TSecondUnit): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterPerSecondUnit./(const ALeft: TKilogramMeterQty; const ARight: TKilogramMeterPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TKilogramPerSecondQty; const ARight: TMeterUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit.*(const ALeft: TMeterQty; const ARight: TKilogramPerSecondUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramPerSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TKilogramQty; const ARight: TMeterPerSecondUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterPerSecondUnit.*(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramMeterPerSecondUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterPerSecondUnit./(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TKilogramMeterPerSecondUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareRootMeterUnit./(const ALeft: double; const ARight: TSquareRootMeterUnit): TReciprocalSquareRootMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TReciprocalSquareRootMeterUnit.*(const ALeft: TSquareRootMeterQty; const ARight: TReciprocalSquareRootMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TSquareRootMeterUnit.*(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TSquareRootMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TReciprocalSquareRootMeterUnit./(const ALeft: double; const ARight: TReciprocalSquareRootMeterUnit): TSquareRootMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TMeterUnit./(const ALeft: double; const ARight: TMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TReciprocalMeterUnit.*(const ALeft: TMeterQty; const ARight: TReciprocalMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TMeterUnit.*(const ALeft: TReciprocalMeterQty; const ARight: TMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TReciprocalMeterUnit./(const ALeft: double; const ARight: TReciprocalMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TReciprocalSquareRootMeterUnit.*(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TReciprocalSquareRootMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareRootMeterUnit./(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareRootMeterUnit): TReciprocalSquareRootMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit.*(const ALeft: TReciprocalSquareRootMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalSquareRootCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareRootMeterUnit.*(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareRootMeterUnit): TReciprocalSquareRootCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareRootMeterUnit./(const ALeft: TReciprocalSquareRootCubicMeterQty; const ARight: TReciprocalSquareRootMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit./(const ALeft: TReciprocalSquareRootCubicMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalSquareRootMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: double; const ARight: TSquareMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TReciprocalSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TReciprocalSquareMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TSquareMeterUnit.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TReciprocalSquareMeterUnit./(const ALeft: double; const ARight: TReciprocalSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TMeterUnit./(const ALeft: TReciprocalMeterQty; const ARight: TMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit.*(const ALeft: TMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit./(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit.*(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit./(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: double; const ARight: TCubicMeterUnit): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TReciprocalCubicMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TReciprocalCubicMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TCubicMeterUnit.*(const ALeft: TReciprocalCubicMeterQty; const ARight: TCubicMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TReciprocalCubicMeterUnit./(const ALeft: double; const ARight: TReciprocalCubicMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TSquareMeterUnit./(const ALeft: TReciprocalMeterQty; const ARight: TSquareMeterUnit): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalCubicMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TReciprocalCubicMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TReciprocalCubicMeterQty; const ARight: TSquareMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalCubicMeterUnit./(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalCubicMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TReciprocalSquareMeterQty; const ARight: TMeterUnit): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalCubicMeterUnit.*(const ALeft: TMeterQty; const ARight: TReciprocalCubicMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TReciprocalCubicMeterQty; const ARight: TMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalCubicMeterUnit./(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalCubicMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit.*(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit./(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit./(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit./(const ALeft: double; const ARight: TQuarticMeterUnit): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TReciprocalQuarticMeterUnit.*(const ALeft: TQuarticMeterQty; const ARight: TReciprocalQuarticMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TQuarticMeterUnit.*(const ALeft: TReciprocalQuarticMeterQty; const ARight: TQuarticMeterUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TReciprocalQuarticMeterUnit./(const ALeft: double; const ARight: TReciprocalQuarticMeterUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TCubicMeterUnit./(const ALeft: TReciprocalMeterQty; const ARight: TCubicMeterUnit): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalQuarticMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TReciprocalQuarticMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TReciprocalQuarticMeterQty; const ARight: TCubicMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalQuarticMeterUnit./(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalQuarticMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareMeterUnit): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalQuarticMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TReciprocalQuarticMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TReciprocalQuarticMeterQty; const ARight: TSquareMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalQuarticMeterUnit./(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalQuarticMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TReciprocalCubicMeterQty; const ARight: TMeterUnit): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalQuarticMeterUnit.*(const ALeft: TMeterQty; const ARight: TReciprocalQuarticMeterUnit): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TReciprocalQuarticMeterQty; const ARight: TMeterUnit): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalQuarticMeterUnit./(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalQuarticMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit.*(const ALeft: TReciprocalCubicMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalCubicMeterUnit.*(const ALeft: TReciprocalMeterQty; const ARight: TReciprocalCubicMeterUnit): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalCubicMeterUnit./(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalCubicMeterUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit./(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalMeterUnit): TReciprocalCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit./(const ALeft: TReciprocalQuarticMeterQty; const ARight: TReciprocalSquareMeterUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TKilogramQty; const ARight: TSquareMeterUnit): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TSquareMeterQty; const ARight: TKilogramUnit): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TKilogramSquareMeterQty; const ARight: TKilogramUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TKilogramSquareMeterQty; const ARight: TSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSecondUnit): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit./(const ALeft: TKilogramSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TKilogramSquareMeterQty; const ARight: THertzUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterUnit.*(const ALeft: THertzQty; const ARight: TKilogramSquareMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramSquareMeterUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: THertzUnit): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterPerSecondUnit.*(const ALeft: TMeterQty; const ARight: TKilogramMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterPerSecondUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramMeterPerSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TReciprocalMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit.*(const ALeft: TReciprocalMeterQty; const ARight: TKilogramSquareMeterPerSecondUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalMeterUnit.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TReciprocalMeterUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TReciprocalMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TReciprocalSquareMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TReciprocalSquareMeterUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TKilogramMeterQty; const ARight: TMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramMeterUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramMeterUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TSecondQty; const ARight: TMeterUnit): TSecondPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TSecondPerMeterUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSecondPerMeterQty; const ARight: TMeterUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondPerMeterUnit./(const ALeft: TSecondQty; const ARight: TSecondPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TKilogramQty; const ARight: TMeterUnit): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TKilogramPerMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TKilogramPerMeterQty; const ARight: TMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerMeterUnit./(const ALeft: TKilogramQty; const ARight: TKilogramPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondPerMeterUnit.*(const ALeft: TKilogramPerSecondQty; const ARight: TSecondPerMeterUnit): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit.*(const ALeft: TSecondPerMeterQty; const ARight: TKilogramPerSecondUnit): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit./(const ALeft: TKilogramPerMeterQty; const ARight: TKilogramPerSecondUnit): TSecondPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondPerMeterUnit./(const ALeft: TKilogramPerMeterQty; const ARight: TSecondPerMeterUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TMeterPerSecondUnit): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerMeterUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerMeterUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TKilogramPerMeterQty; const ARight: TMeterPerSecondUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerMeterUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerMeterUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TKilogramQty; const ARight: TSquareMeterUnit): TKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TKilogramPerSquareMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TKilogramPerSquareMeterQty; const ARight: TSquareMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSquareMeterUnit./(const ALeft: TKilogramQty; const ARight: TKilogramPerSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TKilogramQty; const ARight: TCubicMeterUnit): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TKilogramPerCubicMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TCubicMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit./(const ALeft: TKilogramQty; const ARight: TKilogramPerCubicMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TKilogramPerSquareMeterQty; const ARight: TMeterUnit): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit.*(const ALeft: TMeterQty; const ARight: TKilogramPerCubicMeterUnit): TKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TMeterUnit): TKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit./(const ALeft: TKilogramPerSquareMeterQty; const ARight: TKilogramPerCubicMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit.*(const ALeft: TKilogramQty; const ARight: TMeterPerSquareSecondUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TKilogramUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TNewtonQty; const ARight: TKilogramUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit./(const ALeft: TNewtonQty; const ARight: TMeterPerSquareSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit.*(const ALeft: TKilogramPerMeterQty; const ARight: TSquareMeterPerSquareSecondUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerMeterUnit.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerMeterUnit./(const ALeft: TNewtonQty; const ARight: TKilogramPerMeterUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit./(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareSecondUnit): TKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TKilogramPerSecondQty; const ARight: TMeterPerSecondUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerSecondUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit./(const ALeft: TNewtonQty; const ARight: TKilogramPerSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TNewtonQty; const ARight: TMeterPerSecondUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TSecondUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TSecondQty; const ARight: TNewtonUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TNewtonQty; const ARight: TSecondUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TKilogramMeterPerSecondQty; const ARight: TNewtonUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TKilogramMeterQty; const ARight: TSquareSecondUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TSquareSecondQty; const ARight: TNewtonUnit): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TNewtonQty; const ARight: TSquareSecondUnit): TKilogramMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TKilogramMeterQty; const ARight: TNewtonUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit.*(const ALeft: TNewtonQty; const ARight: TRadianUnit): TNewtonRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TRadianQty; const ARight: TNewtonUnit): TNewtonRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TNewtonRadianQty; const ARight: TNewtonUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit./(const ALeft: TNewtonRadianQty; const ARight: TRadianUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TNewtonQty; const ARight: TNewtonUnit): TSquareNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TSquareNewtonQty; const ARight: TNewtonUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TNewtonQty; const ARight: TSquareMeterUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit.*(const ALeft: TSquareMeterQty; const ARight: TPascalUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TPascalQty; const ARight: TSquareMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit./(const ALeft: TNewtonQty; const ARight: TPascalUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TSquareMeterPerSquareSecondUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerCubicMeterUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit./(const ALeft: TPascalQty; const ARight: TKilogramPerCubicMeterUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit./(const ALeft: TPascalQty; const ARight: TSquareMeterPerSquareSecondUnit): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TNewtonQty; const ARight: TMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TMeterQty; const ARight: TNewtonUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TJouleQty; const ARight: TNewtonUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TJouleQty; const ARight: TMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TPascalQty; const ARight: TCubicMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit.*(const ALeft: TCubicMeterQty; const ARight: TPascalUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit./(const ALeft: TJouleQty; const ARight: TPascalUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TJouleQty; const ARight: TCubicMeterUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TKilogramMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterPerSecondUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramMeterPerSecondUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramMeterPerSecondUnit./(const ALeft: TJouleQty; const ARight: TKilogramMeterPerSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TJouleQty; const ARight: TMeterPerSecondUnit): TKilogramMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit.*(const ALeft: TKilogramQty; const ARight: TSquareMeterPerSquareSecondUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TJouleQty; const ARight: TKilogramUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit./(const ALeft: TJouleQty; const ARight: TSquareMeterPerSquareSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit.*(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareHertzUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterUnit.*(const ALeft: TSquareHertzQty; const ARight: TKilogramSquareMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterUnit./(const ALeft: TJouleQty; const ARight: TKilogramSquareMeterUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit./(const ALeft: TJouleQty; const ARight: TSquareHertzUnit): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TKilogramSquareMeterQty; const ARight: TSquareSecondUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit.*(const ALeft: TSquareSecondQty; const ARight: TJouleUnit): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TJouleQty; const ARight: TSquareSecondUnit): TKilogramSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit./(const ALeft: TKilogramSquareMeterQty; const ARight: TJouleUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSecondUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit.*(const ALeft: TSecondQty; const ARight: TJouleUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TJouleQty; const ARight: TSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TJouleUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: THertzUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit.*(const ALeft: THertzQty; const ARight: TKilogramSquareMeterPerSecondUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit./(const ALeft: TJouleQty; const ARight: TKilogramSquareMeterPerSecondUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TJouleQty; const ARight: THertzUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TKilogramUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit.*(const ALeft: TKilogramQty; const ARight: TJouleUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TJouleQty; const ARight: TKilogramUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit./(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TJouleUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit./(const ALeft: TJouleQty; const ARight: TRadianUnit): TJoulePerRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerRadianUnit.*(const ALeft: TRadianQty; const ARight: TJoulePerRadianUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianUnit.*(const ALeft: TJoulePerRadianQty; const ARight: TRadianUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerRadianUnit./(const ALeft: TJouleQty; const ARight: TJoulePerRadianUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TJouleQty; const ARight: TSecondUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit.*(const ALeft: TSecondQty; const ARight: TWattUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TWattQty; const ARight: TSecondUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit./(const ALeft: TJouleQty; const ARight: TWattUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TJouleQty; const ARight: THertzUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit.*(const ALeft: THertzQty; const ARight: TJouleUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit./(const ALeft: TWattQty; const ARight: TJouleUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TWattQty; const ARight: THertzUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit.*(const ALeft: TKilogramPerSecondQty; const ARight: TSquareMeterPerSquareSecondUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKilogramPerSecondUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit./(const ALeft: TWattQty; const ARight: TKilogramPerSecondUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit./(const ALeft: TWattQty; const ARight: TSquareMeterPerSquareSecondUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TNewtonQty; const ARight: TMeterPerSecondUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TNewtonUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TWattQty; const ARight: TNewtonUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TWattQty; const ARight: TMeterPerSecondUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: TSecondQty; const ARight: TAmpereUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TAmpereQty; const ARight: TSecondUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TCoulombQty; const ARight: TSecondUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TCoulombQty; const ARight: TAmpereUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit.*(const ALeft: TCoulombQty; const ARight: TCoulombUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit./(const ALeft: TSquareCoulombQty; const ARight: TCoulombUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TCoulombQty; const ARight: TMeterUnit): TCoulombMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit.*(const ALeft: TMeterQty; const ARight: TCoulombUnit): TCoulombMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit./(const ALeft: TCoulombMeterQty; const ARight: TCoulombUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TCoulombMeterQty; const ARight: TMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit./(const ALeft: TJouleQty; const ARight: TCoulombUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit.*(const ALeft: TCoulombQty; const ARight: TVoltUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit.*(const ALeft: TVoltQty; const ARight: TCoulombUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit./(const ALeft: TJouleQty; const ARight: TVoltUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TWattQty; const ARight: TAmpereUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit.*(const ALeft: TAmpereQty; const ARight: TVoltUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: TVoltQty; const ARight: TAmpereUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit./(const ALeft: TWattQty; const ARight: TVoltUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit.*(const ALeft: TVoltQty; const ARight: TVoltUnit): TSquareVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit./(const ALeft: TSquareVoltQty; const ARight: TVoltUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit./(const ALeft: TCoulombQty; const ARight: TVoltUnit): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradUnit.*(const ALeft: TVoltQty; const ARight: TFaradUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit.*(const ALeft: TFaradQty; const ARight: TVoltUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradUnit./(const ALeft: TCoulombQty; const ARight: TFaradUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit./(const ALeft: TSquareCoulombQty; const ARight: TJouleUnit): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradUnit.*(const ALeft: TJouleQty; const ARight: TFaradUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit.*(const ALeft: TFaradQty; const ARight: TJouleUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradUnit./(const ALeft: TSquareCoulombQty; const ARight: TFaradUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradUnit./(const ALeft: TSecondQty; const ARight: TFaradUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit.*(const ALeft: TFaradQty; const ARight: TOhmUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradUnit.*(const ALeft: TOhmQty; const ARight: TFaradUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit./(const ALeft: TSecondQty; const ARight: TOhmUnit): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareAmpereUnit./(const ALeft: TWattQty; const ARight: TSquareAmpereUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit.*(const ALeft: TSquareAmpereQty; const ARight: TOhmUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareAmpereUnit.*(const ALeft: TOhmQty; const ARight: TSquareAmpereUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit./(const ALeft: TWattQty; const ARight: TOhmUnit): TSquareAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit./(const ALeft: TSquareVoltQty; const ARight: TWattUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit.*(const ALeft: TWattQty; const ARight: TOhmUnit): TSquareVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit.*(const ALeft: TOhmQty; const ARight: TWattUnit): TSquareVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit./(const ALeft: TSquareVoltQty; const ARight: TOhmUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TVoltQty; const ARight: TAmpereUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit.*(const ALeft: TAmpereQty; const ARight: TOhmUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: TOhmQty; const ARight: TAmpereUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit./(const ALeft: TVoltQty; const ARight: TOhmUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TFaradQty; const ARight: TSecondUnit): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSiemensUnit.*(const ALeft: TSecondQty; const ARight: TSiemensUnit): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TSiemensQty; const ARight: TSecondUnit): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSiemensUnit./(const ALeft: TFaradQty; const ARight: TSiemensUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TFaradQty; const ARight: THertzUnit): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradUnit.*(const ALeft: THertzQty; const ARight: TFaradUnit): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradUnit./(const ALeft: TSiemensQty; const ARight: TFaradUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TSiemensQty; const ARight: THertzUnit): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit./(const ALeft: TAmpereQty; const ARight: TVoltUnit): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSiemensUnit.*(const ALeft: TVoltQty; const ARight: TSiemensUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit.*(const ALeft: TSiemensQty; const ARight: TVoltUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSiemensUnit./(const ALeft: TAmpereQty; const ARight: TSiemensUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TSiemensQty; const ARight: TMeterUnit): TSiemensPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSiemensPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TSiemensPerMeterUnit): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSiemensPerMeterQty; const ARight: TMeterUnit): TSiemensQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSiemensPerMeterUnit./(const ALeft: TSiemensQty; const ARight: TSiemensPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TCoulombUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit.*(const ALeft: TCoulombQty; const ARight: TTeslaUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit.*(const ALeft: TTeslaQty; const ARight: TCoulombUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TTeslaUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TTeslaQty; const ARight: TSquareMeterUnit): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit.*(const ALeft: TSquareMeterQty; const ARight: TTeslaUnit): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit./(const ALeft: TWeberQty; const ARight: TTeslaUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TWeberQty; const ARight: TSquareMeterUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TVoltQty; const ARight: TSecondUnit): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit.*(const ALeft: TSecondQty; const ARight: TVoltUnit): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit./(const ALeft: TWeberQty; const ARight: TVoltUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TWeberQty; const ARight: TSecondUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit.*(const ALeft: TOhmQty; const ARight: TCoulombUnit): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit.*(const ALeft: TCoulombQty; const ARight: TOhmUnit): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit./(const ALeft: TWeberQty; const ARight: TOhmUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit./(const ALeft: TWeberQty; const ARight: TCoulombUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TWeberQty; const ARight: TAmpereUnit): THenryQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryUnit.*(const ALeft: TAmpereQty; const ARight: THenryUnit): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: THenryQty; const ARight: TAmpereUnit): TWeberQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryUnit./(const ALeft: TWeberQty; const ARight: THenryUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TOhmQty; const ARight: TSecondUnit): THenryQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit.*(const ALeft: TSecondQty; const ARight: TOhmUnit): THenryQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit./(const ALeft: THenryQty; const ARight: TOhmUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: THenryQty; const ARight: TSecondUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TOhmQty; const ARight: THertzUnit): THenryQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryUnit.*(const ALeft: THertzQty; const ARight: THenryUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: THenryQty; const ARight: THertzUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryUnit./(const ALeft: TOhmQty; const ARight: THenryUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TCandelaQty; const ARight: TSteradianUnit): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCandelaUnit.*(const ALeft: TSteradianQty; const ARight: TCandelaUnit): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCandelaUnit./(const ALeft: TLumenQty; const ARight: TCandelaUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TLumenQty; const ARight: TSteradianUnit): TCandelaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TLumenQty; const ARight: TSecondUnit): TLumenSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLumenUnit.*(const ALeft: TSecondQty; const ARight: TLumenUnit): TLumenSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLumenUnit./(const ALeft: TLumenSecondQty; const ARight: TLumenUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TLumenSecondQty; const ARight: TSecondUnit): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TLumenSecondQty; const ARight: TCubicMeterUnit): TLumenSecondPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLumenSecondUnit.*(const ALeft: TCubicMeterQty; const ARight: TLumenSecondUnit): TLumenSecondPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLumenSecondUnit./(const ALeft: TLumenSecondPerCubicMeterQty; const ARight: TLumenSecondUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TLumenSecondPerCubicMeterQty; const ARight: TCubicMeterUnit): TLumenSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TLumenQty; const ARight: TSquareMeterUnit): TLuxQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLuxUnit.*(const ALeft: TSquareMeterQty; const ARight: TLuxUnit): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TLuxQty; const ARight: TSquareMeterUnit): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLuxUnit./(const ALeft: TLumenQty; const ARight: TLuxUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TLuxQty; const ARight: TSecondUnit): TLuxSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLuxUnit.*(const ALeft: TSecondQty; const ARight: TLuxUnit): TLuxSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLuxUnit./(const ALeft: TLuxSecondQty; const ARight: TLuxUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TLuxSecondQty; const ARight: TSecondUnit): TLuxQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TMoleQty; const ARight: TSecondUnit): TKatalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKatalUnit.*(const ALeft: TSecondQty; const ARight: TKatalUnit): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TKatalQty; const ARight: TSecondUnit): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKatalUnit./(const ALeft: TMoleQty; const ARight: TKatalUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TNewtonQty; const ARight: TCubicMeterUnit): TNewtonPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerCubicMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TNewtonPerCubicMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TNewtonPerCubicMeterQty; const ARight: TCubicMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerCubicMeterUnit./(const ALeft: TNewtonQty; const ARight: TNewtonPerCubicMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TPascalQty; const ARight: TMeterUnit): TNewtonPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerCubicMeterUnit.*(const ALeft: TMeterQty; const ARight: TNewtonPerCubicMeterUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TNewtonPerCubicMeterQty; const ARight: TMeterUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerCubicMeterUnit./(const ALeft: TPascalQty; const ARight: TNewtonPerCubicMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TMeterPerSquareSecondUnit): TNewtonPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TKilogramPerCubicMeterUnit): TNewtonPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit./(const ALeft: TNewtonPerCubicMeterQty; const ARight: TKilogramPerCubicMeterUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit./(const ALeft: TNewtonPerCubicMeterQty; const ARight: TMeterPerSquareSecondUnit): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TNewtonQty; const ARight: TMeterUnit): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TNewtonPerMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TNewtonPerMeterQty; const ARight: TMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerMeterUnit./(const ALeft: TNewtonQty; const ARight: TNewtonPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TJouleQty; const ARight: TSquareMeterUnit): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TNewtonPerMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TNewtonPerMeterQty; const ARight: TSquareMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerMeterUnit./(const ALeft: TJouleQty; const ARight: TNewtonPerMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TPascalQty; const ARight: TMeterUnit): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit.*(const ALeft: TMeterQty; const ARight: TPascalUnit): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit./(const ALeft: TNewtonPerMeterQty; const ARight: TPascalUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TNewtonPerMeterQty; const ARight: TMeterUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit.*(const ALeft: TKilogramQty; const ARight: TSquareHertzUnit): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TSquareHertzQty; const ARight: TKilogramUnit): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TNewtonPerMeterQty; const ARight: TKilogramUnit): TSquareHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareHertzUnit./(const ALeft: TNewtonPerMeterQty; const ARight: TSquareHertzUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TCubicMeterQty; const ARight: TSecondUnit): TCubicMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TCubicMeterPerSecondUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TCubicMeterPerSecondQty; const ARight: TSecondUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerSecondUnit./(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TSquareMeterQty; const ARight: TMeterPerSecondUnit): TCubicMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TSquareMeterUnit): TCubicMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TCubicMeterPerSecondQty; const ARight: TSquareMeterUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TCubicMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TPascalQty; const ARight: TSecondUnit): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit.*(const ALeft: TSecondQty; const ARight: TPascalUnit): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit./(const ALeft: TPoiseuilleQty; const ARight: TPascalUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TPoiseuilleQty; const ARight: TSecondUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TKilogramPerSquareMeterQty; const ARight: TMeterPerSecondUnit): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSquareMeterUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramPerSquareMeterUnit): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSquareMeterUnit./(const ALeft: TPoiseuilleQty; const ARight: TKilogramPerSquareMeterUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TPoiseuilleQty; const ARight: TMeterPerSecondUnit): TKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TMeterUnit): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPoiseuilleUnit.*(const ALeft: TMeterQty; const ARight: TPoiseuilleUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TPoiseuilleQty; const ARight: TMeterUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPoiseuilleUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TPoiseuilleUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TSquareMeterQty; const ARight: TSecondUnit): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TSquareMeterPerSecondUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TSecondUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit./(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TMeterUnit): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TMeterQty; const ARight: TMeterPerSecondUnit): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TSquareMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TSquareMeterPerSecondQty; const ARight: TMeterUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit./(const ALeft: TPoiseuilleQty; const ARight: TKilogramPerCubicMeterUnit): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit.*(const ALeft: TKilogramPerCubicMeterQty; const ARight: TSquareMeterPerSecondUnit): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerCubicMeterUnit.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TKilogramPerCubicMeterUnit): TPoiseuilleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit./(const ALeft: TPoiseuilleQty; const ARight: TSquareMeterPerSecondUnit): TKilogramPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramUnit): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit.*(const ALeft: TKilogramQty; const ARight: TSquareMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TKilogramUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit./(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TSquareMeterPerSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit./(const ALeft: TKilogramQty; const ARight: TQuarticMeterUnit): TKilogramPerQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterUnit.*(const ALeft: TQuarticMeterQty; const ARight: TKilogramPerQuarticMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit.*(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TQuarticMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterUnit./(const ALeft: TKilogramQty; const ARight: TKilogramPerQuarticMeterUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TQuarticMeterQty; const ARight: TSecondUnit): TQuarticMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit.*(const ALeft: TSecondQty; const ARight: TQuarticMeterUnit): TQuarticMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit./(const ALeft: TQuarticMeterSecondQty; const ARight: TQuarticMeterUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TQuarticMeterSecondQty; const ARight: TSecondUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TQuarticMeterUnit): TKilogramPerQuarticMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondUnit.*(const ALeft: TQuarticMeterQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit.*(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TQuarticMeterUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondUnit./(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TSecondUnit): TKilogramPerQuarticMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TKilogramPerQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TSecondUnit): TKilogramPerQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondUnit./(const ALeft: TKilogramPerQuarticMeterQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterSecondUnit./(const ALeft: TKilogramQty; const ARight: TQuarticMeterSecondUnit): TKilogramPerQuarticMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondUnit.*(const ALeft: TQuarticMeterSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterSecondUnit.*(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TQuarticMeterSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondUnit./(const ALeft: TKilogramQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TQuarticMeterSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerSecondUnit./(const ALeft: TPascalQty; const ARight: TCubicMeterPerSecondUnit): TKilogramPerQuarticMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondUnit.*(const ALeft: TCubicMeterPerSecondQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerSecondUnit.*(const ALeft: TKilogramPerQuarticMeterPerSecondQty; const ARight: TCubicMeterPerSecondUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerQuarticMeterPerSecondUnit./(const ALeft: TPascalQty; const ARight: TKilogramPerQuarticMeterPerSecondUnit): TCubicMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TCubicMeterQty; const ARight: TKilogramUnit): TCubicMeterPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerKilogramUnit.*(const ALeft: TKilogramQty; const ARight: TCubicMeterPerKilogramUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TCubicMeterPerKilogramQty; const ARight: TKilogramUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerKilogramUnit./(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerKilogramUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TKilogramQty; const ARight: TSquareSecondUnit): TKilogramSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TSquareSecondQty; const ARight: TKilogramUnit): TKilogramSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TKilogramSquareSecondQty; const ARight: TKilogramUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TKilogramSquareSecondQty; const ARight: TSquareSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TCubicMeterQty; const ARight: TSquareSecondUnit): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerSquareSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TCubicMeterPerSquareSecondUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareSecondUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerSquareSecondUnit./(const ALeft: TCubicMeterQty; const ARight: TCubicMeterPerSquareSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit.*(const ALeft: TSquareMeterQty; const ARight: TMeterPerSquareSecondUnit): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TMeterPerSquareSecondQty; const ARight: TSquareMeterUnit): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareMeterUnit): TMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSquareSecondUnit./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TMeterPerSquareSecondUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit.*(const ALeft: TMeterQty; const ARight: TSquareMeterPerSquareSecondUnit): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TMeterUnit): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TMeterUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareSecondUnit./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TSquareMeterPerSquareSecondUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TNewtonQty; const ARight: TSquareMeterUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TSquareMeterQty; const ARight: TNewtonUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TJouleQty; const ARight: TMeterUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit.*(const ALeft: TMeterQty; const ARight: TJouleUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TJouleUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit.*(const ALeft: TPascalQty; const ARight: TQuarticMeterUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit.*(const ALeft: TQuarticMeterQty; const ARight: TPascalUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TPascalUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TPascalUnit): TQuarticMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticMeterUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TQuarticMeterUnit): TPascalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerSquareSecondUnit.*(const ALeft: TKilogramQty; const ARight: TCubicMeterPerSquareSecondUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TKilogramUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TKilogramUnit): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterPerSquareSecondUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TCubicMeterPerSquareSecondUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TMeterPerSecondUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TKilogramSquareMeterPerSecondUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TNewtonQty; const ARight: TCubicMeterUnit): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TCubicMeterQty; const ARight: TNewtonUnit): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TNewtonCubicMeterQty; const ARight: TNewtonUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TNewtonCubicMeterQty; const ARight: TCubicMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TJouleQty; const ARight: TSquareMeterUnit): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit.*(const ALeft: TSquareMeterQty; const ARight: TJouleUnit): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit./(const ALeft: TNewtonCubicMeterQty; const ARight: TJouleUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TNewtonCubicMeterQty; const ARight: TSquareMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TNewtonSquareMeterQty; const ARight: TMeterUnit): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterUnit.*(const ALeft: TMeterQty; const ARight: TNewtonSquareMeterUnit): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterUnit./(const ALeft: TNewtonCubicMeterQty; const ARight: TNewtonSquareMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TNewtonCubicMeterQty; const ARight: TMeterUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramUnit./(const ALeft: TNewtonQty; const ARight: TSquareKilogramUnit): TNewtonPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerSquareKilogramUnit.*(const ALeft: TSquareKilogramQty; const ARight: TNewtonPerSquareKilogramUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramUnit.*(const ALeft: TNewtonPerSquareKilogramQty; const ARight: TSquareKilogramUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerSquareKilogramUnit./(const ALeft: TNewtonQty; const ARight: TNewtonPerSquareKilogramUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TSquareKilogramQty; const ARight: TMeterUnit): TSquareKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TSquareKilogramPerMeterUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSquareKilogramPerMeterQty; const ARight: TMeterUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerMeterUnit./(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSquareKilogramQty; const ARight: TSquareMeterUnit): TSquareKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramPerSquareMeterUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TSquareKilogramPerSquareMeterQty; const ARight: TSquareMeterUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerSquareMeterUnit./(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramUnit./(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramUnit): TSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareKilogramUnit.*(const ALeft: TSquareKilogramQty; const ARight: TSquareMeterPerSquareKilogramUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramUnit.*(const ALeft: TSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareKilogramUnit./(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareKilogramUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareKilogramUnit.*(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareKilogramUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TSquareMeterPerSquareKilogramQty; const ARight: TNewtonUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TNewtonUnit): TSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareKilogramUnit./(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareMeterPerSquareKilogramUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerSquareMeterUnit./(const ALeft: TNewtonQty; const ARight: TSquareKilogramPerSquareMeterUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit.*(const ALeft: TSquareKilogramPerSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerSquareMeterUnit.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramPerSquareMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit./(const ALeft: TNewtonQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TSquareKilogramPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareKilogramUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit.*(const ALeft: TSquareKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramUnit.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TNewtonPerSquareKilogramQty; const ARight: TSquareMeterUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerSquareKilogramUnit.*(const ALeft: TSquareMeterQty; const ARight: TNewtonPerSquareKilogramUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerSquareKilogramUnit./(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TNewtonPerSquareKilogramUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareMeterUnit): TNewtonPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerMeterUnit./(const ALeft: TJouleQty; const ARight: TSquareKilogramPerMeterUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit.*(const ALeft: TSquareKilogramPerMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerMeterUnit.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareKilogramPerMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit./(const ALeft: TJouleQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TSquareKilogramPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TCubicMeterPerKilogramQty; const ARight: TSquareSecondUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit.*(const ALeft: TSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TCubicMeterPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TSquareSecondUnit): TCubicMeterPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit./(const ALeft: TCubicMeterPerKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareSecondUnit./(const ALeft: TCubicMeterQty; const ARight: TKilogramSquareSecondUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit.*(const ALeft: TKilogramSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareSecondUnit.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TKilogramSquareSecondUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit./(const ALeft: TCubicMeterQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TKilogramSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TKilogramUnit): TNewtonSquareMeterPerSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit.*(const ALeft: TKilogramQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TNewtonSquareMeterPerSquareKilogramQty; const ARight: TKilogramUnit): TCubicMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareKilogramUnit./(const ALeft: TCubicMeterPerSquareSecondQty; const ARight: TNewtonSquareMeterPerSquareKilogramUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: double; const ARight: TKelvinUnit): TReciprocalKelvinQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TReciprocalKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TReciprocalKelvinUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TKelvinUnit.*(const ALeft: TReciprocalKelvinQty; const ARight: TKelvinUnit): double; inline;
begin
  result := ALeft.FValue;

end;

class operator TReciprocalKelvinUnit./(const ALeft: double; const ARight: TReciprocalKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft;
end;

class operator TKelvinUnit.*(const ALeft: TKilogramQty; const ARight: TKelvinUnit): TKilogramKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TKelvinQty; const ARight: TKilogramUnit): TKilogramKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TKilogramKelvinQty; const ARight: TKilogramUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TKilogramKelvinQty; const ARight: TKelvinUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TJouleQty; const ARight: TKelvinUnit): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TJoulePerKelvinUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TJoulePerKelvinQty; const ARight: TKelvinUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerKelvinUnit./(const ALeft: TJouleQty; const ARight: TJoulePerKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramKelvinUnit./(const ALeft: TJouleQty; const ARight: TKilogramKelvinUnit): TJoulePerKilogramPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerKilogramPerKelvinUnit.*(const ALeft: TKilogramKelvinQty; const ARight: TJoulePerKilogramPerKelvinUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramKelvinUnit.*(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKilogramKelvinUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerKilogramPerKelvinUnit./(const ALeft: TJouleQty; const ARight: TJoulePerKilogramPerKelvinUnit): TKilogramKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TKelvinUnit): TJoulePerKilogramPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerKilogramPerKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TJoulePerKilogramPerKelvinUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKelvinUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerKilogramPerKelvinUnit./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TJoulePerKilogramPerKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TJoulePerKelvinQty; const ARight: TKilogramUnit): TJoulePerKilogramPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerKilogramPerKelvinUnit.*(const ALeft: TKilogramQty; const ARight: TJoulePerKilogramPerKelvinUnit): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TJoulePerKilogramPerKelvinQty; const ARight: TKilogramUnit): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerKilogramPerKelvinUnit./(const ALeft: TJoulePerKelvinQty; const ARight: TJoulePerKilogramPerKelvinUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TMeterQty; const ARight: TKelvinUnit): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TKelvinQty; const ARight: TMeterUnit): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TMeterKelvinQty; const ARight: TMeterUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TMeterKelvinQty; const ARight: TKelvinUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TKelvinQty; const ARight: TMeterUnit): TKelvinPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TKelvinPerMeterUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TKelvinPerMeterQty; const ARight: TMeterUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinPerMeterUnit./(const ALeft: TKelvinQty; const ARight: TKelvinPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TWattQty; const ARight: TMeterUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TWattPerMeterUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TWattPerMeterQty; const ARight: TMeterUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterUnit./(const ALeft: TWattQty; const ARight: TWattPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TWattQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TWattPerSquareMeterQty; const ARight: TSquareMeterUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterUnit./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TWattPerMeterQty; const ARight: TMeterUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterUnit.*(const ALeft: TMeterQty; const ARight: TWattPerSquareMeterUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TWattPerSquareMeterQty; const ARight: TMeterUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterUnit./(const ALeft: TWattPerMeterQty; const ARight: TWattPerSquareMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TWattQty; const ARight: TCubicMeterUnit): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TWattPerCubicMeterUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TWattPerCubicMeterQty; const ARight: TCubicMeterUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterUnit./(const ALeft: TWattQty; const ARight: TWattPerCubicMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TWattPerMeterQty; const ARight: TSquareMeterUnit): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TWattPerCubicMeterUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TWattPerCubicMeterQty; const ARight: TSquareMeterUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterUnit./(const ALeft: TWattPerMeterQty; const ARight: TWattPerCubicMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TMeterUnit): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterUnit.*(const ALeft: TMeterQty; const ARight: TWattPerCubicMeterUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TWattPerCubicMeterQty; const ARight: TMeterUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerCubicMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TWattQty; const ARight: TKelvinUnit): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TWattPerKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TWattPerKelvinQty; const ARight: TKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerKelvinUnit./(const ALeft: TWattQty; const ARight: TWattPerKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterKelvinUnit./(const ALeft: TWattQty; const ARight: TMeterKelvinUnit): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerKelvinUnit.*(const ALeft: TMeterKelvinQty; const ARight: TWattPerMeterPerKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterKelvinUnit.*(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TMeterKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerKelvinUnit./(const ALeft: TWattQty; const ARight: TWattPerMeterPerKelvinUnit): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TWattPerMeterQty; const ARight: TKelvinUnit): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TWattPerMeterPerKelvinUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TKelvinUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerKelvinUnit./(const ALeft: TWattPerMeterQty; const ARight: TWattPerMeterPerKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TWattPerKelvinQty; const ARight: TMeterUnit): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerKelvinUnit.*(const ALeft: TMeterQty; const ARight: TWattPerMeterPerKelvinUnit): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TMeterUnit): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerKelvinUnit./(const ALeft: TWattPerKelvinQty; const ARight: TWattPerMeterPerKelvinUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinPerMeterUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TKelvinPerMeterUnit): TWattPerMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerKelvinUnit.*(const ALeft: TKelvinPerMeterQty; const ARight: TWattPerMeterPerKelvinUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinPerMeterUnit.*(const ALeft: TWattPerMeterPerKelvinQty; const ARight: TKelvinPerMeterUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerKelvinUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerMeterPerKelvinUnit): TKelvinPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit./(const ALeft: TKelvinQty; const ARight: TWattUnit): TKelvinPerWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinPerWattUnit.*(const ALeft: TWattQty; const ARight: TKelvinPerWattUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit.*(const ALeft: TKelvinPerWattQty; const ARight: TWattUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinPerWattUnit./(const ALeft: TKelvinQty; const ARight: TKelvinPerWattUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit./(const ALeft: TMeterQty; const ARight: TWattUnit): TMeterPerWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerWattUnit.*(const ALeft: TWattQty; const ARight: TMeterPerWattUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit.*(const ALeft: TMeterPerWattQty; const ARight: TWattUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerWattUnit./(const ALeft: TMeterQty; const ARight: TMeterPerWattUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit./(const ALeft: TMeterKelvinQty; const ARight: TWattUnit): TMeterKelvinPerWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterKelvinPerWattUnit.*(const ALeft: TWattQty; const ARight: TMeterKelvinPerWattUnit): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit.*(const ALeft: TMeterKelvinPerWattQty; const ARight: TWattUnit): TMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterKelvinPerWattUnit./(const ALeft: TMeterKelvinQty; const ARight: TMeterKelvinPerWattUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerWattUnit.*(const ALeft: TKelvinQty; const ARight: TMeterPerWattUnit): TMeterKelvinPerWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TMeterPerWattQty; const ARight: TKelvinUnit): TMeterKelvinPerWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TMeterKelvinPerWattQty; const ARight: TKelvinUnit): TMeterPerWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerWattUnit./(const ALeft: TMeterKelvinPerWattQty; const ARight: TMeterPerWattUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TSquareMeterQty; const ARight: TKelvinUnit): TSquareMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TKelvinQty; const ARight: TSquareMeterUnit): TSquareMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSquareMeterKelvinQty; const ARight: TSquareMeterUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TSquareMeterKelvinQty; const ARight: TKelvinUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterKelvinUnit./(const ALeft: TWattQty; const ARight: TSquareMeterKelvinUnit): TWattPerSquareMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerKelvinUnit.*(const ALeft: TSquareMeterKelvinQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterKelvinUnit.*(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TSquareMeterKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerKelvinUnit./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TSquareMeterKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TKelvinUnit): TWattPerSquareMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TKelvinUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerKelvinUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TWattPerKelvinQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerKelvinUnit.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TWattPerSquareMeterPerKelvinQty; const ARight: TSquareMeterUnit): TWattPerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerKelvinUnit./(const ALeft: TWattPerKelvinQty; const ARight: TWattPerSquareMeterPerKelvinUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticKelvinUnit.*(const ALeft: TSquareMeterQty; const ARight: TQuarticKelvinUnit): TSquareMeterQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TQuarticKelvinQty; const ARight: TSquareMeterUnit): TSquareMeterQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TSquareMeterUnit): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticKelvinUnit./(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TQuarticKelvinUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticKelvinUnit./(const ALeft: TWattQty; const ARight: TQuarticKelvinUnit): TWattPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerQuarticKelvinUnit.*(const ALeft: TQuarticKelvinQty; const ARight: TWattPerQuarticKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticKelvinUnit.*(const ALeft: TWattPerQuarticKelvinQty; const ARight: TQuarticKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerQuarticKelvinUnit./(const ALeft: TWattQty; const ARight: TWattPerQuarticKelvinUnit): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterQuarticKelvinUnit./(const ALeft: TWattQty; const ARight: TSquareMeterQuarticKelvinUnit): TWattPerSquareMeterPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinUnit.*(const ALeft: TSquareMeterQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterQuarticKelvinUnit.*(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TSquareMeterQuarticKelvinUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinUnit./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TSquareMeterQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticKelvinUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TQuarticKelvinUnit): TWattPerSquareMeterPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinUnit.*(const ALeft: TQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TQuarticKelvinUnit.*(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TQuarticKelvinUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TWattPerQuarticKelvinQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinUnit.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TWattPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TWattPerSquareMeterPerQuarticKelvinQty; const ARight: TSquareMeterUnit): TWattPerQuarticKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerQuarticKelvinUnit./(const ALeft: TWattPerQuarticKelvinQty; const ARight: TWattPerSquareMeterPerQuarticKelvinUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleUnit./(const ALeft: TJouleQty; const ARight: TMoleUnit): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerMoleUnit.*(const ALeft: TMoleQty; const ARight: TJoulePerMoleUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleUnit.*(const ALeft: TJoulePerMoleQty; const ARight: TMoleUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerMoleUnit./(const ALeft: TJouleQty; const ARight: TJoulePerMoleUnit): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TMoleQty; const ARight: TKelvinUnit): TMoleKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleUnit.*(const ALeft: TKelvinQty; const ARight: TMoleUnit): TMoleKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleUnit./(const ALeft: TMoleKelvinQty; const ARight: TMoleUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TMoleKelvinQty; const ARight: TKelvinUnit): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleKelvinUnit./(const ALeft: TJouleQty; const ARight: TMoleKelvinUnit): TJoulePerMolePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerMolePerKelvinUnit.*(const ALeft: TMoleKelvinQty; const ARight: TJoulePerMolePerKelvinUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleKelvinUnit.*(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TMoleKelvinUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerMolePerKelvinUnit./(const ALeft: TJouleQty; const ARight: TJoulePerMolePerKelvinUnit): TMoleKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleUnit./(const ALeft: TJoulePerKelvinQty; const ARight: TMoleUnit): TJoulePerMolePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerMolePerKelvinUnit.*(const ALeft: TMoleQty; const ARight: TJoulePerMolePerKelvinUnit): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleUnit.*(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TMoleUnit): TJoulePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerMolePerKelvinUnit./(const ALeft: TJoulePerKelvinQty; const ARight: TJoulePerMolePerKelvinUnit): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit./(const ALeft: TJoulePerMoleQty; const ARight: TKelvinUnit): TJoulePerMolePerKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerMolePerKelvinUnit.*(const ALeft: TKelvinQty; const ARight: TJoulePerMolePerKelvinUnit): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKelvinUnit.*(const ALeft: TJoulePerMolePerKelvinQty; const ARight: TKelvinUnit): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJoulePerMolePerKelvinUnit./(const ALeft: TJoulePerMoleQty; const ARight: TJoulePerMolePerKelvinUnit): TKelvinQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TOhmQty; const ARight: TMeterUnit): TOhmMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit.*(const ALeft: TMeterQty; const ARight: TOhmUnit): TOhmMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TOhmUnit./(const ALeft: TOhmMeterQty; const ARight: TOhmUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TOhmMeterQty; const ARight: TMeterUnit): TOhmQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TVoltQty; const ARight: TMeterUnit): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TVoltPerMeterUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TVoltPerMeterQty; const ARight: TMeterUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltPerMeterUnit./(const ALeft: TVoltQty; const ARight: TVoltPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit./(const ALeft: TNewtonQty; const ARight: TCoulombUnit): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltPerMeterUnit.*(const ALeft: TCoulombQty; const ARight: TVoltPerMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit.*(const ALeft: TVoltPerMeterQty; const ARight: TCoulombUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltPerMeterUnit./(const ALeft: TNewtonQty; const ARight: TVoltPerMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TTeslaQty; const ARight: TMeterPerSecondUnit): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TTeslaUnit): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit./(const ALeft: TVoltPerMeterQty; const ARight: TTeslaUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TVoltPerMeterQty; const ARight: TMeterPerSecondUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TCoulombQty; const ARight: TMeterUnit): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TCoulombPerMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TCoulombPerMeterQty; const ARight: TMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMeterUnit./(const ALeft: TCoulombQty; const ARight: TCoulombPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit./(const ALeft: TAmpereQty; const ARight: TMeterPerSecondUnit): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMeterUnit.*(const ALeft: TMeterPerSecondQty; const ARight: TCoulombPerMeterUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerSecondUnit.*(const ALeft: TCoulombPerMeterQty; const ARight: TMeterPerSecondUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMeterUnit./(const ALeft: TAmpereQty; const ARight: TCoulombPerMeterUnit): TMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TSquareCoulombQty; const ARight: TMeterUnit): TSquareCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TSquareCoulombPerMeterUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSquareCoulombPerMeterQty; const ARight: TMeterUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombPerMeterUnit./(const ALeft: TSquareCoulombQty; const ARight: TSquareCoulombPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit.*(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombUnit): TSquareCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMeterUnit.*(const ALeft: TCoulombQty; const ARight: TCoulombPerMeterUnit): TSquareCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMeterUnit./(const ALeft: TSquareCoulombPerMeterQty; const ARight: TCoulombPerMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit./(const ALeft: TSquareCoulombPerMeterQty; const ARight: TCoulombUnit): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TCoulombQty; const ARight: TSquareMeterUnit): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TCoulombPerSquareMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TCoulombPerSquareMeterQty; const ARight: TSquareMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerSquareMeterUnit./(const ALeft: TCoulombQty; const ARight: TCoulombPerSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TCoulombPerMeterQty; const ARight: TMeterUnit): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerSquareMeterUnit.*(const ALeft: TMeterQty; const ARight: TCoulombPerSquareMeterUnit): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TCoulombPerSquareMeterQty; const ARight: TMeterUnit): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerSquareMeterUnit./(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombPerSquareMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombUnit./(const ALeft: TSquareMeterQty; const ARight: TSquareCoulombUnit): TSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareCoulombUnit.*(const ALeft: TSquareCoulombQty; const ARight: TSquareMeterPerSquareCoulombUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombUnit.*(const ALeft: TSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareCoulombUnit./(const ALeft: TSquareMeterQty; const ARight: TSquareMeterPerSquareCoulombUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombUnit./(const ALeft: TNewtonQty; const ARight: TSquareCoulombUnit): TNewtonPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerSquareCoulombUnit.*(const ALeft: TSquareCoulombQty; const ARight: TNewtonPerSquareCoulombUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombUnit.*(const ALeft: TNewtonPerSquareCoulombQty; const ARight: TSquareCoulombUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerSquareCoulombUnit./(const ALeft: TNewtonQty; const ARight: TNewtonPerSquareCoulombUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareCoulombUnit.*(const ALeft: TNewtonQty; const ARight: TSquareMeterPerSquareCoulombUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit.*(const ALeft: TSquareMeterPerSquareCoulombQty; const ARight: TNewtonUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonUnit./(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TNewtonUnit): TSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSquareCoulombUnit./(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareMeterPerSquareCoulombUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TSquareCoulombUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareCoulombUnit.*(const ALeft: TSquareCoulombQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombUnit.*(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareCoulombUnit./(const ALeft: TNewtonSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TNewtonPerSquareCoulombQty; const ARight: TSquareMeterUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerSquareCoulombUnit.*(const ALeft: TSquareMeterQty; const ARight: TNewtonPerSquareCoulombUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerSquareCoulombUnit./(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TNewtonPerSquareCoulombUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareMeterUnit): TNewtonPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerSquareMeterUnit./(const ALeft: TVoltPerMeterQty; const ARight: TCoulombPerSquareMeterUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareCoulombUnit.*(const ALeft: TCoulombPerSquareMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerSquareMeterUnit.*(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TCoulombPerSquareMeterUnit): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareCoulombUnit./(const ALeft: TVoltPerMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombPerMeterUnit./(const ALeft: TJouleQty; const ARight: TSquareCoulombPerMeterUnit): TNewtonSquareMeterPerSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareCoulombUnit.*(const ALeft: TSquareCoulombPerMeterQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareCoulombPerMeterUnit.*(const ALeft: TNewtonSquareMeterPerSquareCoulombQty; const ARight: TSquareCoulombPerMeterUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterPerSquareCoulombUnit./(const ALeft: TJouleQty; const ARight: TNewtonSquareMeterPerSquareCoulombUnit): TSquareCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TVoltQty; const ARight: TMeterUnit): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit.*(const ALeft: TMeterQty; const ARight: TVoltUnit): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit./(const ALeft: TVoltMeterQty; const ARight: TVoltUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TVoltMeterQty; const ARight: TMeterUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TVoltPerMeterQty; const ARight: TSquareMeterUnit): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltPerMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TVoltPerMeterUnit): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltPerMeterUnit./(const ALeft: TVoltMeterQty; const ARight: TVoltPerMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TVoltMeterQty; const ARight: TSquareMeterUnit): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TVoltMeterQty; const ARight: TSecondUnit): TVoltMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltMeterPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TVoltMeterPerSecondUnit): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TVoltMeterPerSecondQty; const ARight: TSecondUnit): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltMeterPerSecondUnit./(const ALeft: TVoltMeterQty; const ARight: TVoltMeterPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TFaradQty; const ARight: TMeterUnit): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TFaradPerMeterUnit): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TFaradPerMeterQty; const ARight: TMeterUnit): TFaradQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit./(const ALeft: TFaradQty; const ARight: TFaradPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterUnit./(const ALeft: TSquareCoulombQty; const ARight: TNewtonSquareMeterUnit): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit.*(const ALeft: TNewtonSquareMeterQty; const ARight: TFaradPerMeterUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonSquareMeterUnit.*(const ALeft: TFaradPerMeterQty; const ARight: TNewtonSquareMeterUnit): TSquareCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit./(const ALeft: TSquareCoulombQty; const ARight: TFaradPerMeterUnit): TNewtonSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltMeterUnit./(const ALeft: TCoulombQty; const ARight: TVoltMeterUnit): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit.*(const ALeft: TVoltMeterQty; const ARight: TFaradPerMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltMeterUnit.*(const ALeft: TFaradPerMeterQty; const ARight: TVoltMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit./(const ALeft: TCoulombQty; const ARight: TFaradPerMeterUnit): TVoltMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltPerMeterUnit./(const ALeft: TCoulombPerSquareMeterQty; const ARight: TVoltPerMeterUnit): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit.*(const ALeft: TVoltPerMeterQty; const ARight: TFaradPerMeterUnit): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltPerMeterUnit.*(const ALeft: TFaradPerMeterQty; const ARight: TVoltPerMeterUnit): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit./(const ALeft: TCoulombPerSquareMeterQty; const ARight: TFaradPerMeterUnit): TVoltPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TAmpereQty; const ARight: TMeterUnit): TAmperePerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmperePerMeterUnit.*(const ALeft: TMeterQty; const ARight: TAmperePerMeterUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TAmperePerMeterQty; const ARight: TMeterUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmperePerMeterUnit./(const ALeft: TAmpereQty; const ARight: TAmperePerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TMeterQty; const ARight: TAmpereUnit): TMeterPerAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerAmpereUnit.*(const ALeft: TAmpereQty; const ARight: TMeterPerAmpereUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: TMeterPerAmpereQty; const ARight: TAmpereUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerAmpereUnit./(const ALeft: TMeterQty; const ARight: TMeterPerAmpereUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TTeslaQty; const ARight: TMeterUnit): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit.*(const ALeft: TMeterQty; const ARight: TTeslaUnit): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit./(const ALeft: TTeslaMeterQty; const ARight: TTeslaUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TTeslaMeterQty; const ARight: TMeterUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TNewtonQty; const ARight: TAmpereUnit): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaMeterUnit.*(const ALeft: TAmpereQty; const ARight: TTeslaMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: TTeslaMeterQty; const ARight: TAmpereUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaMeterUnit./(const ALeft: TNewtonQty; const ARight: TTeslaMeterUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TTeslaQty; const ARight: TAmpereUnit): TTeslaPerAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaPerAmpereUnit.*(const ALeft: TAmpereQty; const ARight: TTeslaPerAmpereUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: TTeslaPerAmpereQty; const ARight: TAmpereUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaPerAmpereUnit./(const ALeft: TTeslaQty; const ARight: TTeslaPerAmpereUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: THenryQty; const ARight: TMeterUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit.*(const ALeft: TMeterQty; const ARight: THenryPerMeterUnit): THenryQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: THenryPerMeterQty; const ARight: TMeterUnit): THenryQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit./(const ALeft: THenryQty; const ARight: THenryPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TTeslaMeterQty; const ARight: TAmpereUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit.*(const ALeft: TAmpereQty; const ARight: THenryPerMeterUnit): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: THenryPerMeterQty; const ARight: TAmpereUnit): TTeslaMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit./(const ALeft: TTeslaMeterQty; const ARight: THenryPerMeterUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TTeslaPerAmpereQty; const ARight: TMeterUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaPerAmpereUnit.*(const ALeft: TMeterQty; const ARight: TTeslaPerAmpereUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaPerAmpereUnit./(const ALeft: THenryPerMeterQty; const ARight: TTeslaPerAmpereUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: THenryPerMeterQty; const ARight: TMeterUnit): TTeslaPerAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerAmpereUnit.*(const ALeft: TTeslaQty; const ARight: TMeterPerAmpereUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit.*(const ALeft: TMeterPerAmpereQty; const ARight: TTeslaUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit./(const ALeft: THenryPerMeterQty; const ARight: TTeslaUnit): TMeterPerAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterPerAmpereUnit./(const ALeft: THenryPerMeterQty; const ARight: TMeterPerAmpereUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmperePerMeterUnit./(const ALeft: TTeslaQty; const ARight: TAmperePerMeterUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit.*(const ALeft: TAmperePerMeterQty; const ARight: THenryPerMeterUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmperePerMeterUnit.*(const ALeft: THenryPerMeterQty; const ARight: TAmperePerMeterUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit./(const ALeft: TTeslaQty; const ARight: THenryPerMeterUnit): TAmperePerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareAmpereUnit./(const ALeft: TNewtonQty; const ARight: TSquareAmpereUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit.*(const ALeft: TSquareAmpereQty; const ARight: THenryPerMeterUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareAmpereUnit.*(const ALeft: THenryPerMeterQty; const ARight: TSquareAmpereUnit): TNewtonQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit./(const ALeft: TNewtonQty; const ARight: THenryPerMeterUnit): TSquareAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TRadianQty; const ARight: TMeterUnit): TRadianPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianPerMeterUnit.*(const ALeft: TMeterQty; const ARight: TRadianPerMeterUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TRadianPerMeterQty; const ARight: TMeterUnit): TRadianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TRadianPerMeterUnit./(const ALeft: TRadianQty; const ARight: TRadianPerMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TSquareKilogramQty; const ARight: TSquareSecondUnit): TSquareKilogramPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerSquareSecondUnit.*(const ALeft: TSquareSecondQty; const ARight: TSquareKilogramPerSquareSecondUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TSquareSecondUnit): TSquareKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramPerSquareSecondUnit./(const ALeft: TSquareKilogramQty; const ARight: TSquareKilogramPerSquareSecondUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit.*(const ALeft: TKilogramPerSecondQty; const ARight: TKilogramPerSecondUnit): TSquareKilogramPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramPerSecondUnit./(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TKilogramPerSecondUnit): TKilogramPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerMeterUnit.*(const ALeft: TKilogramQty; const ARight: TNewtonPerMeterUnit): TSquareKilogramPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TNewtonPerMeterQty; const ARight: TKilogramUnit): TSquareKilogramPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TKilogramUnit): TNewtonPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonPerMeterUnit./(const ALeft: TSquareKilogramPerSquareSecondQty; const ARight: TNewtonPerMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSquareSecondQty; const ARight: TSquareMeterUnit): TSquareSecondPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondPerSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TSquareSecondPerSquareMeterUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: TSquareMeterUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondPerSquareMeterUnit./(const ALeft: TSquareSecondQty; const ARight: TSquareSecondPerSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit.*(const ALeft: TFaradPerMeterQty; const ARight: THenryPerMeterUnit): TSquareSecondPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit.*(const ALeft: THenryPerMeterQty; const ARight: TFaradPerMeterUnit): TSquareSecondPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TFaradPerMeterUnit./(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: TFaradPerMeterUnit): THenryPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THenryPerMeterUnit./(const ALeft: TSquareSecondPerSquareMeterQty; const ARight: THenryPerMeterUnit): TFaradPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit.*(const ALeft: TJouleQty; const ARight: TJouleUnit): TSquareJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TJouleUnit./(const ALeft: TSquareJouleQty; const ARight: TJouleUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit.*(const ALeft: TSquareJouleQty; const ARight: TSquareSecondUnit): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareJouleUnit.*(const ALeft: TSquareSecondQty; const ARight: TSquareJouleUnit): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareJouleUnit./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareJouleUnit): TSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareSecondUnit./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareSecondUnit): TSquareJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TKilogramSquareMeterPerSecondUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TNewtonCubicMeterQty; const ARight: TKilogramUnit): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonCubicMeterUnit.*(const ALeft: TKilogramQty; const ARight: TNewtonCubicMeterUnit): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TNewtonCubicMeterUnit./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TNewtonCubicMeterUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TKilogramUnit): TNewtonCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TSquareMeterUnit): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramSquareMeterPerSquareSecondUnit.*(const ALeft: TSquareMeterQty; const ARight: TSquareKilogramSquareMeterPerSquareSecondUnit): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareKilogramSquareMeterPerSquareSecondUnit./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareKilogramSquareMeterPerSquareSecondUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSquareJouleSquareSecondQty; const ARight: TSquareMeterUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit./(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TReciprocalSquareMeterUnit): TSquareJouleSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareJouleSquareSecondUnit.*(const ALeft: TReciprocalSquareMeterQty; const ARight: TSquareJouleSquareSecondUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TReciprocalSquareMeterUnit.*(const ALeft: TSquareJouleSquareSecondQty; const ARight: TReciprocalSquareMeterUnit): TSquareKilogramSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareJouleSquareSecondUnit./(const ALeft: TSquareKilogramSquareMeterPerSquareSecondQty; const ARight: TSquareJouleSquareSecondUnit): TReciprocalSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit./(const ALeft: TCoulombQty; const ARight: TKilogramUnit): TCoulombPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerKilogramUnit.*(const ALeft: TKilogramQty; const ARight: TCoulombPerKilogramUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramUnit.*(const ALeft: TCoulombPerKilogramQty; const ARight: TKilogramUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerKilogramUnit./(const ALeft: TCoulombQty; const ARight: TCoulombPerKilogramUnit): TKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit.*(const ALeft: TSquareMeterQty; const ARight: TAmpereUnit): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TAmpereQty; const ARight: TSquareMeterUnit): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSquareMeterAmpereQty; const ARight: TSquareMeterUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmpereUnit./(const ALeft: TSquareMeterAmpereQty; const ARight: TAmpereUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit.*(const ALeft: TCoulombQty; const ARight: TSquareMeterPerSecondUnit): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TCoulombUnit): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombUnit./(const ALeft: TSquareMeterAmpereQty; const ARight: TCoulombUnit): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit./(const ALeft: TSquareMeterAmpereQty; const ARight: TSquareMeterPerSecondUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit.*(const ALeft: TCoulombPerKilogramQty; const ARight: TKilogramSquareMeterPerSecondUnit): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerKilogramUnit.*(const ALeft: TKilogramSquareMeterPerSecondQty; const ARight: TCoulombPerKilogramUnit): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerKilogramUnit./(const ALeft: TSquareMeterAmpereQty; const ARight: TCoulombPerKilogramUnit): TKilogramSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKilogramSquareMeterPerSecondUnit./(const ALeft: TSquareMeterAmpereQty; const ARight: TKilogramSquareMeterPerSecondUnit): TCoulombPerKilogramQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit./(const ALeft: TJouleQty; const ARight: TTeslaUnit): TSquareMeterAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterAmpereUnit.*(const ALeft: TTeslaQty; const ARight: TSquareMeterAmpereUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TTeslaUnit.*(const ALeft: TSquareMeterAmpereQty; const ARight: TTeslaUnit): TJouleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterAmpereUnit./(const ALeft: TJouleQty; const ARight: TSquareMeterAmpereUnit): TTeslaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit./(const ALeft: TLumenQty; const ARight: TWattUnit): TLumenPerWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLumenPerWattUnit.*(const ALeft: TWattQty; const ARight: TLumenPerWattUnit): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattUnit.*(const ALeft: TLumenPerWattQty; const ARight: TWattUnit): TLumenQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TLumenPerWattUnit./(const ALeft: TLumenQty; const ARight: TLumenPerWattUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TAmpereQty; const ARight: TSquareMeterUnit): TAmperePerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmperePerSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TAmperePerSquareMeterUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TAmperePerSquareMeterQty; const ARight: TSquareMeterUnit): TAmpereQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmperePerSquareMeterUnit./(const ALeft: TAmpereQty; const ARight: TAmperePerSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TAmperePerMeterQty; const ARight: TMeterUnit): TAmperePerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmperePerSquareMeterUnit.*(const ALeft: TMeterQty; const ARight: TAmperePerSquareMeterUnit): TAmperePerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TAmperePerSquareMeterQty; const ARight: TMeterUnit): TAmperePerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TAmperePerSquareMeterUnit./(const ALeft: TAmperePerMeterQty; const ARight: TAmperePerSquareMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TMoleQty; const ARight: TCubicMeterUnit): TMolePerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMolePerCubicMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TMolePerCubicMeterUnit): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TMolePerCubicMeterQty; const ARight: TCubicMeterUnit): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMolePerCubicMeterUnit./(const ALeft: TMoleQty; const ARight: TMolePerCubicMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TCandelaQty; const ARight: TSquareMeterUnit): TCandelaPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCandelaPerSquareMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TCandelaPerSquareMeterUnit): TCandelaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TCandelaPerSquareMeterQty; const ARight: TSquareMeterUnit): TCandelaQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCandelaPerSquareMeterUnit./(const ALeft: TCandelaQty; const ARight: TCandelaPerSquareMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TCoulombQty; const ARight: TCubicMeterUnit): TCoulombPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerCubicMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TCoulombPerCubicMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TCoulombPerCubicMeterQty; const ARight: TCubicMeterUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerCubicMeterUnit./(const ALeft: TCoulombQty; const ARight: TCoulombPerCubicMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TCoulombPerMeterQty; const ARight: TSquareMeterUnit): TCoulombPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerCubicMeterUnit.*(const ALeft: TSquareMeterQty; const ARight: TCoulombPerCubicMeterUnit): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TCoulombPerCubicMeterQty; const ARight: TSquareMeterUnit): TCoulombPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerCubicMeterUnit./(const ALeft: TCoulombPerMeterQty; const ARight: TCoulombPerCubicMeterUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TCoulombPerSquareMeterQty; const ARight: TMeterUnit): TCoulombPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerCubicMeterUnit.*(const ALeft: TMeterQty; const ARight: TCoulombPerCubicMeterUnit): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TCoulombPerCubicMeterQty; const ARight: TMeterUnit): TCoulombPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerCubicMeterUnit./(const ALeft: TCoulombPerSquareMeterQty; const ARight: TCoulombPerCubicMeterUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TSecondUnit): TGrayPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TGrayPerSecondUnit.*(const ALeft: TSecondQty; const ARight: TGrayPerSecondUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSecondUnit.*(const ALeft: TGrayPerSecondQty; const ARight: TSecondUnit): TSquareMeterPerSquareSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TGrayPerSecondUnit./(const ALeft: TSquareMeterPerSquareSecondQty; const ARight: TGrayPerSecondUnit): TSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TSteradianQty; const ARight: THertzUnit): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: THertzQty; const ARight: TSteradianUnit): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TSteradianHertzQty; const ARight: TSteradianUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TSteradianHertzQty; const ARight: THertzUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TMeterQty; const ARight: TSteradianUnit): TMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TSteradianQty; const ARight: TMeterUnit): TMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TMeterSteradianQty; const ARight: TMeterUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TMeterSteradianQty; const ARight: TSteradianUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TSquareMeterQty; const ARight: TSteradianUnit): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TSteradianQty; const ARight: TSquareMeterUnit): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSquareMeterSteradianQty; const ARight: TSquareMeterUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TSquareMeterSteradianQty; const ARight: TSteradianUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TCubicMeterQty; const ARight: TSteradianUnit): TCubicMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TSteradianQty; const ARight: TCubicMeterUnit): TCubicMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TCubicMeterSteradianQty; const ARight: TCubicMeterUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TCubicMeterSteradianQty; const ARight: TSteradianUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TSquareMeterSteradianQty; const ARight: THertzUnit): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterSteradianUnit.*(const ALeft: THertzQty; const ARight: TSquareMeterSteradianUnit): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterSteradianUnit./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterSteradianUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: THertzUnit): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianHertzUnit.*(const ALeft: TSquareMeterQty; const ARight: TSteradianHertzUnit): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TSteradianHertzQty; const ARight: TSquareMeterUnit): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterUnit): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianHertzUnit./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSteradianHertzUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TSteradianUnit): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit.*(const ALeft: TSteradianQty; const ARight: TSquareMeterPerSecondUnit): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSquareMeterPerSecondUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TSteradianUnit): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TWattQty; const ARight: TSteradianUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSteradianUnit.*(const ALeft: TSteradianQty; const ARight: TWattPerSteradianUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TWattPerSteradianQty; const ARight: TSteradianUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSteradianUnit./(const ALeft: TWattQty; const ARight: TWattPerSteradianUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TWattPerSteradianQty; const ARight: THertzUnit): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSteradianPerHertzUnit.*(const ALeft: THertzQty; const ARight: TWattPerSteradianPerHertzUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TWattPerSteradianPerHertzQty; const ARight: THertzUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSteradianPerHertzUnit./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSteradianPerHertzUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TWattPerHertzQty; const ARight: TSteradianUnit): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSteradianPerHertzUnit.*(const ALeft: TSteradianQty; const ARight: TWattPerSteradianPerHertzUnit): TWattPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSteradianUnit): TWattPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSteradianPerHertzUnit./(const ALeft: TWattPerHertzQty; const ARight: TWattPerSteradianPerHertzUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianHertzUnit./(const ALeft: TWattQty; const ARight: TSteradianHertzUnit): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSteradianPerHertzUnit.*(const ALeft: TSteradianHertzQty; const ARight: TWattPerSteradianPerHertzUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianHertzUnit.*(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSteradianHertzUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSteradianPerHertzUnit./(const ALeft: TWattQty; const ARight: TWattPerSteradianPerHertzUnit): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit./(const ALeft: TWattPerSteradianQty; const ARight: TMeterUnit): TWattPerMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerSteradianUnit.*(const ALeft: TMeterQty; const ARight: TWattPerMeterPerSteradianUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterUnit.*(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TMeterUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerSteradianUnit./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerMeterPerSteradianUnit): TMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TWattPerMeterQty; const ARight: TSteradianUnit): TWattPerMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerSteradianUnit.*(const ALeft: TSteradianQty; const ARight: TWattPerMeterPerSteradianUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TSteradianUnit): TWattPerMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerSteradianUnit./(const ALeft: TWattPerMeterQty; const ARight: TWattPerMeterPerSteradianUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterSteradianUnit./(const ALeft: TWattQty; const ARight: TMeterSteradianUnit): TWattPerMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerSteradianUnit.*(const ALeft: TMeterSteradianQty; const ARight: TWattPerMeterPerSteradianUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMeterSteradianUnit.*(const ALeft: TWattPerMeterPerSteradianQty; const ARight: TMeterSteradianUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerMeterPerSteradianUnit./(const ALeft: TWattQty; const ARight: TWattPerMeterPerSteradianUnit): TMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterSteradianUnit./(const ALeft: TWattQty; const ARight: TSquareMeterSteradianUnit): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianUnit.*(const ALeft: TSquareMeterSteradianQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterSteradianUnit.*(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSquareMeterSteradianUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianUnit./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TSteradianUnit): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianUnit.*(const ALeft: TSteradianQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSteradianUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TWattPerSteradianQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianUnit.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TSquareMeterUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianUnit./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterSteradianUnit./(const ALeft: TWattQty; const ARight: TCubicMeterSteradianUnit): TWattPerCubicMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterPerSteradianUnit.*(const ALeft: TCubicMeterSteradianQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterSteradianUnit.*(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TCubicMeterSteradianUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterPerSteradianUnit./(const ALeft: TWattQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TCubicMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit./(const ALeft: TWattPerCubicMeterQty; const ARight: TSteradianUnit): TWattPerCubicMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterPerSteradianUnit.*(const ALeft: TSteradianQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianUnit.*(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TSteradianUnit): TWattPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterPerSteradianUnit./(const ALeft: TWattPerCubicMeterQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TWattPerSteradianQty; const ARight: TCubicMeterUnit): TWattPerCubicMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterPerSteradianUnit.*(const ALeft: TCubicMeterQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TWattPerCubicMeterPerSteradianQty; const ARight: TCubicMeterUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerCubicMeterPerSteradianUnit./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerCubicMeterPerSteradianUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterSteradianHertzUnit./(const ALeft: TWattQty; const ARight: TSquareMeterSteradianHertzUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit.*(const ALeft: TSquareMeterSteradianHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterSteradianHertzUnit.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterSteradianHertzUnit): TWattQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit./(const ALeft: TWattQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSquareMeterSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianHertzUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TSteradianHertzUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit.*(const ALeft: TSteradianHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSteradianHertzUnit.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSteradianHertzUnit): TWattPerSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit./(const ALeft: TWattPerSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSteradianHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit./(const ALeft: TWattPerSteradianQty; const ARight: TSquareMeterPerSecondUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit.*(const ALeft: TSquareMeterPerSecondQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterPerSecondUnit.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterPerSecondUnit): TWattPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit./(const ALeft: TWattPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSquareMeterPerSecondQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterSteradianUnit./(const ALeft: TWattPerHertzQty; const ARight: TSquareMeterSteradianUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit.*(const ALeft: TSquareMeterSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterSteradianUnit.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterSteradianUnit): TWattPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit./(const ALeft: TWattPerHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSquareMeterSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit./(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: THertzUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit.*(const ALeft: THertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator THertzUnit.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: THertzUnit): TWattPerSquareMeterPerSteradianQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit./(const ALeft: TWattPerSquareMeterPerSteradianQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): THertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit./(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TSquareMeterUnit): TWattPerSquareMeterPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit.*(const ALeft: TSquareMeterQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TSquareMeterUnit.*(const ALeft: TWattPerSquareMeterPerSteradianPerHertzQty; const ARight: TSquareMeterUnit): TWattPerSteradianPerHertzQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TWattPerSquareMeterPerSteradianPerHertzUnit./(const ALeft: TWattPerSteradianPerHertzQty; const ARight: TWattPerSquareMeterPerSteradianPerHertzUnit): TSquareMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit./(const ALeft: TKatalQty; const ARight: TCubicMeterUnit): TKatalPerCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKatalPerCubicMeterUnit.*(const ALeft: TCubicMeterQty; const ARight: TKatalPerCubicMeterUnit): TKatalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCubicMeterUnit.*(const ALeft: TKatalPerCubicMeterQty; const ARight: TCubicMeterUnit): TKatalQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TKatalPerCubicMeterUnit./(const ALeft: TKatalQty; const ARight: TKatalPerCubicMeterUnit): TCubicMeterQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleUnit./(const ALeft: TCoulombQty; const ARight: TMoleUnit): TCoulombPerMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMoleUnit.*(const ALeft: TMoleQty; const ARight: TCoulombPerMoleUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TMoleUnit.*(const ALeft: TCoulombPerMoleQty; const ARight: TMoleUnit): TCoulombQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMoleUnit./(const ALeft: TCoulombQty; const ARight: TCoulombPerMoleUnit): TMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit./(const ALeft: TJoulePerMoleQty; const ARight: TVoltUnit): TCoulombPerMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMoleUnit.*(const ALeft: TVoltQty; const ARight: TCoulombPerMoleUnit): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TVoltUnit.*(const ALeft: TCoulombPerMoleQty; const ARight: TVoltUnit): TJoulePerMoleQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

class operator TCoulombPerMoleUnit./(const ALeft: TJoulePerMoleQty; const ARight: TCoulombPerMoleUnit): TVoltQty; inline;
begin
  result.FValue := ALeft.FValue;
end;

{ Helpers }

function TSecondHelper.ToDay: TDayQty;
begin
  result.FValue := FValue / cDayFactor;
end;

function TSecondHelper.ToHour: THourQty;
begin
  result.FValue := FValue / cHourFactor;
end;

function TSecondHelper.ToMinute: TMinuteQty;
begin
  result.FValue := FValue / cMinuteFactor;
end;

function TSquareSecondHelper.ToSquareDay: TSquareDayQty;
begin
  result.FValue := FValue / cSquareDayFactor;
end;

function TSquareSecondHelper.ToSquareHour: TSquareHourQty;
begin
  result.FValue := FValue / cSquareHourFactor;
end;

function TSquareSecondHelper.ToSquareMinute: TSquareMinuteQty;
begin
  result.FValue := FValue / cSquareMinuteFactor;
end;

function TMeterHelper.ToAstronomical: TAstronomicalQty;
begin
  result.FValue := FValue / cAstronomicalFactor;
end;

function TMeterHelper.ToInch: TInchQty;
begin
  result.FValue := FValue / cInchFactor;
end;

function TMeterHelper.ToFoot: TFootQty;
begin
  result.FValue := FValue / cFootFactor;
end;

function TMeterHelper.ToYard: TYardQty;
begin
  result.FValue := FValue / cYardFactor;
end;

function TMeterHelper.ToMile: TMileQty;
begin
  result.FValue := FValue / cMileFactor;
end;

function TMeterHelper.ToNauticalMile: TNauticalMileQty;
begin
  result.FValue := FValue / cNauticalMileFactor;
end;

function TMeterHelper.ToAngstrom: TAngstromQty;
begin
  result.FValue := FValue / cAngstromFactor;
end;

function TSquareMeterHelper.ToSquareInch: TSquareInchQty;
begin
  result.FValue := FValue / cSquareInchFactor;
end;

function TSquareMeterHelper.ToSquareFoot: TSquareFootQty;
begin
  result.FValue := FValue / cSquareFootFactor;
end;

function TSquareMeterHelper.ToSquareYard: TSquareYardQty;
begin
  result.FValue := FValue / cSquareYardFactor;
end;

function TSquareMeterHelper.ToSquareMile: TSquareMileQty;
begin
  result.FValue := FValue / cSquareMileFactor;
end;

function TCubicMeterHelper.ToCubicInch: TCubicInchQty;
begin
  result.FValue := FValue / cCubicInchFactor;
end;

function TCubicMeterHelper.ToCubicFoot: TCubicFootQty;
begin
  result.FValue := FValue / cCubicFootFactor;
end;

function TCubicMeterHelper.ToCubicYard: TCubicYardQty;
begin
  result.FValue := FValue / cCubicYardFactor;
end;

function TCubicMeterHelper.ToLitre: TLitreQty;
begin
  result.FValue := FValue / cLitreFactor;
end;

function TCubicMeterHelper.ToGallon: TGallonQty;
begin
  result.FValue := FValue / cGallonFactor;
end;

function TKilogramHelper.ToTonne: TTonneQty;
begin
  result.FValue := FValue / cTonneFactor;
end;

function TKilogramHelper.ToPound: TPoundQty;
begin
  result.FValue := FValue / cPoundFactor;
end;

function TKilogramHelper.ToOunce: TOunceQty;
begin
  result.FValue := FValue / cOunceFactor;
end;

function TKilogramHelper.ToStone: TStoneQty;
begin
  result.FValue := FValue / cStoneFactor;
end;

function TKilogramHelper.ToTon: TTonQty;
begin
  result.FValue := FValue / cTonFactor;
end;

function TKilogramHelper.ToElectronvoltPerSquareSpeedOfLight: TElectronvoltPerSquareSpeedOfLightQty;
begin
  result.FValue := FValue / cElectronvoltPerSquareSpeedOfLightFactor;
end;

function TDegreeCelsiusHelper.ToKelvin: TKelvinQty;
begin
  result.FValue := FValue + 273.15;
end;

function TKelvinHelper.ToDegreeCelsius: TDegreeCelsiusQty;
begin
  result.FValue := FValue - 273.15;
end;

function TDegreeFahrenheitHelper.ToKelvin: TKelvinQty;
begin
  result.FValue := 5/9 * (FValue - 32) + 273.15;
end;

function TKelvinHelper.ToDegreeFahrenheit: TDegreeFahrenheitQty;
begin
  result.FValue := 9/5 * FValue - 459.67;
end;

function TRadianHelper.ToDegree: TDegreeQty;
begin
  result.FValue := FValue / cDegreeFactor;
end;

function TSteradianHelper.ToSquareDegree: TSquareDegreeQty;
begin
  result.FValue := FValue / cSquareDegreeFactor;
end;

function THertzHelper.ToReciprocalSecond: TReciprocalSecondQty;
begin
  result.FValue := FValue;
end;

function TReciprocalSecondHelper.ToHertz: THertzQty;
begin
  result.FValue := FValue;
end;

function THertzHelper.ToRadianPerSecond: TRadianPerSecondQty;
begin
  result.FValue := FValue;
end;

function TRadianPerSecondHelper.ToHertz: THertzQty;
begin
  result.FValue := FValue;
end;

function TSquareHertzHelper.ToReciprocalSquareSecond: TReciprocalSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TReciprocalSquareSecondHelper.ToSquareHertz: TSquareHertzQty;
begin
  result.FValue := FValue;
end;

function TSquareHertzHelper.ToRadianPerSquareSecond: TRadianPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TRadianPerSquareSecondHelper.ToSquareHertz: TSquareHertzQty;
begin
  result.FValue := FValue;
end;

function TSquareHertzHelper.ToSteradianPerSquareSecond: TSteradianPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TSteradianPerSquareSecondHelper.ToSquareHertz: TSquareHertzQty;
begin
  result.FValue := FValue;
end;

function TMeterPerSecondHelper.ToMeterPerHour: TMeterPerHourQty;
begin
  result.FValue := FValue / cMeterPerHourFactor;
end;

function TMeterPerSecondHelper.ToMilePerHour: TMilePerHourQty;
begin
  result.FValue := FValue / cMilePerHourFactor;
end;

function TMeterPerSecondHelper.ToNauticalMilePerHour: TNauticalMilePerHourQty;
begin
  result.FValue := FValue / cNauticalMilePerHourFactor;
end;

function TMeterPerSquareSecondHelper.ToMeterPerSecondPerSecond: TMeterPerSecondPerSecondQty;
begin
  result.FValue := FValue;
end;

function TMeterPerSecondPerSecondHelper.ToMeterPerSquareSecond: TMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TMeterPerSquareSecondHelper.ToMeterPerHourPerSecond: TMeterPerHourPerSecondQty;
begin
  result.FValue := FValue / cMeterPerHourPerSecondFactor;
end;

function TSquareMeterPerSquareSecondHelper.ToJoulePerKilogram: TJoulePerKilogramQty;
begin
  result.FValue := FValue;
end;

function TJoulePerKilogramHelper.ToSquareMeterPerSquareSecond: TSquareMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TSquareMeterPerSquareSecondHelper.ToGray: TGrayQty;
begin
  result.FValue := FValue;
end;

function TGrayHelper.ToSquareMeterPerSquareSecond: TSquareMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TSquareMeterPerSquareSecondHelper.ToSievert: TSievertQty;
begin
  result.FValue := FValue;
end;

function TSievertHelper.ToSquareMeterPerSquareSecond: TSquareMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerSecondHelper.ToJoulePerSquareMeterPerHertz: TJoulePerSquareMeterPerHertzQty;
begin
  result.FValue := FValue;
end;

function TJoulePerSquareMeterPerHertzHelper.ToKilogramPerSecond: TKilogramPerSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramMeterPerSecondHelper.ToNewtonSecond: TNewtonSecondQty;
begin
  result.FValue := FValue;
end;

function TNewtonSecondHelper.ToKilogramMeterPerSecond: TKilogramMeterPerSecondQty;
begin
  result.FValue := FValue;
end;

function TReciprocalMeterHelper.ToDioptre: TDioptreQty;
begin
  result.FValue := FValue;
end;

function TDioptreHelper.ToReciprocalMeter: TReciprocalMeterQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSecondHelper.ToNewtonMeterSecond: TNewtonMeterSecondQty;
begin
  result.FValue := FValue;
end;

function TNewtonMeterSecondHelper.ToKilogramSquareMeterPerSecond: TKilogramSquareMeterPerSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerCubicMeterHelper.ToPoundPerCubicInch: TPoundPerCubicInchQty;
begin
  result.FValue := FValue / cPoundPerCubicInchFactor;
end;

function TNewtonHelper.ToPoundForce: TPoundForceQty;
begin
  result.FValue := FValue / cPoundForceFactor;
end;

function TNewtonHelper.ToKilogramMeterPerSquareSecond: TKilogramMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramMeterPerSquareSecondHelper.ToNewton: TNewtonQty;
begin
  result.FValue := FValue;
end;

function TSquareNewtonHelper.ToSquareKilogramSquareMeterPerQuarticSecond: TSquareKilogramSquareMeterPerQuarticSecondQty;
begin
  result.FValue := FValue;
end;

function TSquareKilogramSquareMeterPerQuarticSecondHelper.ToSquareNewton: TSquareNewtonQty;
begin
  result.FValue := FValue;
end;

function TPascalHelper.ToNewtonPerSquareMeter: TNewtonPerSquareMeterQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerSquareMeterHelper.ToPascal: TPascalQty;
begin
  result.FValue := FValue;
end;

function TPascalHelper.ToBar: TBarQty;
begin
  result.FValue := FValue / cBarFactor;
end;

function TPascalHelper.ToPoundPerSquareInch: TPoundPerSquareInchQty;
begin
  result.FValue := FValue / cPoundPerSquareInchFactor;
end;

function TPascalHelper.ToJoulePerCubicMeter: TJoulePerCubicMeterQty;
begin
  result.FValue := FValue;
end;

function TJoulePerCubicMeterHelper.ToPascal: TPascalQty;
begin
  result.FValue := FValue;
end;

function TPascalHelper.ToKilogramPerMeterPerSquareSecond: TKilogramPerMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerMeterPerSquareSecondHelper.ToPascal: TPascalQty;
begin
  result.FValue := FValue;
end;

function TJouleHelper.ToWattHour: TWattHourQty;
begin
  result.FValue := FValue / cWattHourFactor;
end;

function TJouleHelper.ToWattSecond: TWattSecondQty;
begin
  result.FValue := FValue;
end;

function TWattSecondHelper.ToJoule: TJouleQty;
begin
  result.FValue := FValue;
end;

function TJouleHelper.ToWattPerHertz: TWattPerHertzQty;
begin
  result.FValue := FValue;
end;

function TWattPerHertzHelper.ToJoule: TJouleQty;
begin
  result.FValue := FValue;
end;

function TJouleHelper.ToElectronvolt: TElectronvoltQty;
begin
  result.FValue := FValue / cElectronvoltFactor;
end;

function TJouleHelper.ToNewtonMeter: TNewtonMeterQty;
begin
  result.FValue := FValue;
end;

function TNewtonMeterHelper.ToJoule: TJouleQty;
begin
  result.FValue := FValue;
end;

function TJouleHelper.ToPoundForceInch: TPoundForceInchQty;
begin
  result.FValue := FValue / cPoundForceInchFactor;
end;

function TJouleHelper.ToRydberg: TRydbergQty;
begin
  result.FValue := FValue / cRydbergFactor;
end;

function TJouleHelper.ToCalorie: TCalorieQty;
begin
  result.FValue := FValue / cCalorieFactor;
end;

function TJouleHelper.ToKilogramSquareMeterPerSquareSecond: TKilogramSquareMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSquareSecondHelper.ToJoule: TJouleQty;
begin
  result.FValue := FValue;
end;

function TJoulePerRadianHelper.ToJoulePerDegree: TJoulePerDegreeQty;
begin
  result.FValue := FValue / cJoulePerDegreeFactor;
end;

function TJoulePerRadianHelper.ToNewtonMeterPerRadian: TNewtonMeterPerRadianQty;
begin
  result.FValue := FValue;
end;

function TNewtonMeterPerRadianHelper.ToJoulePerRadian: TJoulePerRadianQty;
begin
  result.FValue := FValue;
end;

function TJoulePerRadianHelper.ToNewtonMeterPerDegree: TNewtonMeterPerDegreeQty;
begin
  result.FValue := FValue / cNewtonMeterPerDegreeFactor;
end;

function TJoulePerRadianHelper.ToKilogramSquareMeterPerSquareSecondPerRadian: TKilogramSquareMeterPerSquareSecondPerRadianQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSquareSecondPerRadianHelper.ToJoulePerRadian: TJoulePerRadianQty;
begin
  result.FValue := FValue;
end;

function TWattHelper.ToKilogramSquareMeterPerCubicSecond: TKilogramSquareMeterPerCubicSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerCubicSecondHelper.ToWatt: TWattQty;
begin
  result.FValue := FValue;
end;

function TCoulombHelper.ToAmpereHour: TAmpereHourQty;
begin
  result.FValue := FValue / cAmpereHourFactor;
end;

function TCoulombHelper.ToAmpereSecond: TAmpereSecondQty;
begin
  result.FValue := FValue;
end;

function TAmpereSecondHelper.ToCoulomb: TCoulombQty;
begin
  result.FValue := FValue;
end;

function TSquareCoulombHelper.ToSquareAmpereSquareSecond: TSquareAmpereSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TSquareAmpereSquareSecondHelper.ToSquareCoulomb: TSquareCoulombQty;
begin
  result.FValue := FValue;
end;

function TVoltHelper.ToKilogramSquareMeterPerAmperePerCubicSecond: TKilogramSquareMeterPerAmperePerCubicSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerAmperePerCubicSecondHelper.ToVolt: TVoltQty;
begin
  result.FValue := FValue;
end;

function TSquareVoltHelper.ToSquareKilogramQuarticMeterPerSquareAmperePerSexticSecond: TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondQty;
begin
  result.FValue := FValue;
end;

function TSquareKilogramQuarticMeterPerSquareAmperePerSexticSecondHelper.ToSquareVolt: TSquareVoltQty;
begin
  result.FValue := FValue;
end;

function TFaradHelper.ToSquareAmpereQuarticSecondPerKilogramPerSquareMeter: TSquareAmpereQuarticSecondPerKilogramPerSquareMeterQty;
begin
  result.FValue := FValue;
end;

function TSquareAmpereQuarticSecondPerKilogramPerSquareMeterHelper.ToFarad: TFaradQty;
begin
  result.FValue := FValue;
end;

function TOhmHelper.ToKilogramSquareMeterPerSquareAmperePerCubicSecond: TKilogramSquareMeterPerSquareAmperePerCubicSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSquareAmperePerCubicSecondHelper.ToOhm: TOhmQty;
begin
  result.FValue := FValue;
end;

function TSiemensHelper.ToSquareAmpereCubicSecondPerKilogramPerSquareMeter: TSquareAmpereCubicSecondPerKilogramPerSquareMeterQty;
begin
  result.FValue := FValue;
end;

function TSquareAmpereCubicSecondPerKilogramPerSquareMeterHelper.ToSiemens: TSiemensQty;
begin
  result.FValue := FValue;
end;

function TTeslaHelper.ToWeberPerSquareMeter: TWeberPerSquareMeterQty;
begin
  result.FValue := FValue;
end;

function TWeberPerSquareMeterHelper.ToTesla: TTeslaQty;
begin
  result.FValue := FValue;
end;

function TTeslaHelper.ToKilogramPerAmperePerSquareSecond: TKilogramPerAmperePerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerAmperePerSquareSecondHelper.ToTesla: TTeslaQty;
begin
  result.FValue := FValue;
end;

function TWeberHelper.ToKilogramSquareMeterPerAmperePerSquareSecond: TKilogramSquareMeterPerAmperePerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerAmperePerSquareSecondHelper.ToWeber: TWeberQty;
begin
  result.FValue := FValue;
end;

function THenryHelper.ToKilogramSquareMeterPerSquareAmperePerSquareSecond: TKilogramSquareMeterPerSquareAmperePerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSquareAmperePerSquareSecondHelper.ToHenry: THenryQty;
begin
  result.FValue := FValue;
end;

function TLumenHelper.ToCandelaSteradian: TCandelaSteradianQty;
begin
  result.FValue := FValue;
end;

function TCandelaSteradianHelper.ToLumen: TLumenQty;
begin
  result.FValue := FValue;
end;

function TLuxHelper.ToCandelaSteradianPerSquareMeter: TCandelaSteradianPerSquareMeterQty;
begin
  result.FValue := FValue;
end;

function TCandelaSteradianPerSquareMeterHelper.ToLux: TLuxQty;
begin
  result.FValue := FValue;
end;

function THertzHelper.ToBequerel: TBequerelQty;
begin
  result.FValue := FValue;
end;

function TBequerelHelper.ToHertz: THertzQty;
begin
  result.FValue := FValue;
end;

function TKatalHelper.ToMolePerSecond: TMolePerSecondQty;
begin
  result.FValue := FValue;
end;

function TMolePerSecondHelper.ToKatal: TKatalQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerCubicMeterHelper.ToPascalPerMeter: TPascalPerMeterQty;
begin
  result.FValue := FValue;
end;

function TPascalPerMeterHelper.ToNewtonPerCubicMeter: TNewtonPerCubicMeterQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerCubicMeterHelper.ToKilogramPerSquareMeterPerSquareSecond: TKilogramPerSquareMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerSquareMeterPerSquareSecondHelper.ToNewtonPerCubicMeter: TNewtonPerCubicMeterQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerMeterHelper.ToJoulePerSquareMeter: TJoulePerSquareMeterQty;
begin
  result.FValue := FValue;
end;

function TJoulePerSquareMeterHelper.ToNewtonPerMeter: TNewtonPerMeterQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerMeterHelper.ToWattPerSquareMeterPerHertz: TWattPerSquareMeterPerHertzQty;
begin
  result.FValue := FValue;
end;

function TWattPerSquareMeterPerHertzHelper.ToNewtonPerMeter: TNewtonPerMeterQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerMeterHelper.ToPoundForcePerInch: TPoundForcePerInchQty;
begin
  result.FValue := FValue / cPoundForcePerInchFactor;
end;

function TNewtonPerMeterHelper.ToKilogramPerSquareSecond: TKilogramPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerSquareSecondHelper.ToNewtonPerMeter: TNewtonPerMeterQty;
begin
  result.FValue := FValue;
end;

function TPoiseuilleHelper.ToPascalSecond: TPascalSecondQty;
begin
  result.FValue := FValue;
end;

function TPascalSecondHelper.ToPoiseuille: TPoiseuilleQty;
begin
  result.FValue := FValue;
end;

function TPoiseuilleHelper.ToKilogramPerMeterPerSecond: TKilogramPerMeterPerSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerMeterPerSecondHelper.ToPoiseuille: TPoiseuilleQty;
begin
  result.FValue := FValue;
end;

function TNewtonSquareMeterHelper.ToKilogramCubicMeterPerSquareSecond: TKilogramCubicMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramCubicMeterPerSquareSecondHelper.ToNewtonSquareMeter: TNewtonSquareMeterQty;
begin
  result.FValue := FValue;
end;

function TNewtonCubicMeterHelper.ToKilogramQuarticMeterPerSquareSecond: TKilogramQuarticMeterPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramQuarticMeterPerSquareSecondHelper.ToNewtonCubicMeter: TNewtonCubicMeterQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerSquareKilogramHelper.ToMeterPerKilogramPerSquareSecond: TMeterPerKilogramPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TMeterPerKilogramPerSquareSecondHelper.ToNewtonPerSquareKilogram: TNewtonPerSquareKilogramQty;
begin
  result.FValue := FValue;
end;

function TNewtonSquareMeterPerSquareKilogramHelper.ToCubicMeterPerKilogramPerSquareSecond: TCubicMeterPerKilogramPerSquareSecondQty;
begin
  result.FValue := FValue;
end;

function TCubicMeterPerKilogramPerSquareSecondHelper.ToNewtonSquareMeterPerSquareKilogram: TNewtonSquareMeterPerSquareKilogramQty;
begin
  result.FValue := FValue;
end;

function TJoulePerKelvinHelper.ToKilogramSquareMeterPerSquareSecondPerKelvin: TKilogramSquareMeterPerSquareSecondPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSquareSecondPerKelvinHelper.ToJoulePerKelvin: TJoulePerKelvinQty;
begin
  result.FValue := FValue;
end;

function TJoulePerKilogramPerKelvinHelper.ToSquareMeterPerSquareSecondPerKelvin: TSquareMeterPerSquareSecondPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TSquareMeterPerSquareSecondPerKelvinHelper.ToJoulePerKilogramPerKelvin: TJoulePerKilogramPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TWattPerMeterHelper.ToKilogramMeterPerCubicSecond: TKilogramMeterPerCubicSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramMeterPerCubicSecondHelper.ToWattPerMeter: TWattPerMeterQty;
begin
  result.FValue := FValue;
end;

function TWattPerSquareMeterHelper.ToKilogramPerCubicSecond: TKilogramPerCubicSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerCubicSecondHelper.ToWattPerSquareMeter: TWattPerSquareMeterQty;
begin
  result.FValue := FValue;
end;

function TWattPerKelvinHelper.ToKilogramSquareMeterPerCubicSecondPerKelvin: TKilogramSquareMeterPerCubicSecondPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerCubicSecondPerKelvinHelper.ToWattPerKelvin: TWattPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TWattPerMeterPerKelvinHelper.ToKilogramMeterPerCubicSecondPerKelvin: TKilogramMeterPerCubicSecondPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TKilogramMeterPerCubicSecondPerKelvinHelper.ToWattPerMeterPerKelvin: TWattPerMeterPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TWattPerSquareMeterPerKelvinHelper.ToKilogramPerCubicSecondPerKelvin: TKilogramPerCubicSecondPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TKilogramPerCubicSecondPerKelvinHelper.ToWattPerSquareMeterPerKelvin: TWattPerSquareMeterPerKelvinQty;
begin
  result.FValue := FValue;
end;

function TVoltPerMeterHelper.ToNewtonPerCoulomb: TNewtonPerCoulombQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerCoulombHelper.ToVoltPerMeter: TVoltPerMeterQty;
begin
  result.FValue := FValue;
end;

function TVoltMeterHelper.ToNewtonSquareMeterPerCoulomb: TNewtonSquareMeterPerCoulombQty;
begin
  result.FValue := FValue;
end;

function TNewtonSquareMeterPerCoulombHelper.ToVoltMeter: TVoltMeterQty;
begin
  result.FValue := FValue;
end;

function TTeslaMeterHelper.ToNewtonPerAmpere: TNewtonPerAmpereQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerAmpereHelper.ToTeslaMeter: TTeslaMeterQty;
begin
  result.FValue := FValue;
end;

function THenryPerMeterHelper.ToTeslaMeterPerAmpere: TTeslaMeterPerAmpereQty;
begin
  result.FValue := FValue;
end;

function TTeslaMeterPerAmpereHelper.ToHenryPerMeter: THenryPerMeterQty;
begin
  result.FValue := FValue;
end;

function THenryPerMeterHelper.ToNewtonPerSquareAmpere: TNewtonPerSquareAmpereQty;
begin
  result.FValue := FValue;
end;

function TNewtonPerSquareAmpereHelper.ToHenryPerMeter: THenryPerMeterQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSecondHelper.ToJouleSecond: TJouleSecondQty;
begin
  result.FValue := FValue;
end;

function TJouleSecondHelper.ToKilogramSquareMeterPerSecond: TKilogramSquareMeterPerSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSecondHelper.ToJoulePerHertz: TJoulePerHertzQty;
begin
  result.FValue := FValue;
end;

function TJoulePerHertzHelper.ToKilogramSquareMeterPerSecond: TKilogramSquareMeterPerSecondQty;
begin
  result.FValue := FValue;
end;

function TKilogramSquareMeterPerSecondHelper.ToElectronvoltSecond: TElectronvoltSecondQty;
begin
  result.FValue := FValue / cElectronvoltSecondFactor;
end;

function TKilogramSquareMeterPerSecondHelper.ToElectronvoltMeterPerSpeedOfLight: TElectronvoltMeterPerSpeedOfLightQty;
begin
  result.FValue := FValue / cElectronvoltMeterPerSpeedOfLightFactor;
end;

function TSquareMeterAmpereHelper.ToJoulePerTesla: TJoulePerTeslaQty;
begin
  result.FValue := FValue;
end;

function TJoulePerTeslaHelper.ToSquareMeterAmpere: TSquareMeterAmpereQty;
begin
  result.FValue := FValue;
end;

{ Power functions }

function SquarePower(AQuantity: TSecondQty): TSquareSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareSecondQty): TSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function CubicPower(AQuantity: TSecondQty): TCubicSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 3);
end;

function CubicRoot(AQuantity: TCubicSecondQty): TSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/3);
end;

function QuarticPower(AQuantity: TSecondQty): TQuarticSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 4);
end;

function QuarticRoot(AQuantity: TQuarticSecondQty): TSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/4);
end;

function QuinticPower(AQuantity: TSecondQty): TQuinticSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 5);
end;

function QuinticRoot(AQuantity: TQuinticSecondQty): TSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/5);
end;

function SexticPower(AQuantity: TSecondQty): TSexticSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 6);
end;

function SexticRoot(AQuantity: TSexticSecondQty): TSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/6);
end;

function SquarePower(AQuantity: TSquareRootMeterQty): TMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TMeterQty): TSquareRootMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TMeterQty): TSquareMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareMeterQty): TMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function CubicPower(AQuantity: TMeterQty): TCubicMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 3);
end;

function CubicRoot(AQuantity: TCubicMeterQty): TMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/3);
end;

function SquarePower(AQuantity: TSquareMeterQty): TQuarticMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TQuarticMeterQty): TSquareMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function QuarticPower(AQuantity: TMeterQty): TQuarticMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 4);
end;

function QuarticRoot(AQuantity: TQuarticMeterQty): TMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/4);
end;

function QuinticPower(AQuantity: TMeterQty): TQuinticMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 5);
end;

function QuinticRoot(AQuantity: TQuinticMeterQty): TMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/5);
end;

function SquarePower(AQuantity: TCubicMeterQty): TSexticMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSexticMeterQty): TCubicMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function CubicPower(AQuantity: TSquareMeterQty): TSexticMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 3);
end;

function CubicRoot(AQuantity: TSexticMeterQty): TSquareMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/3);
end;

function SexticPower(AQuantity: TMeterQty): TSexticMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 6);
end;

function SexticRoot(AQuantity: TSexticMeterQty): TMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/6);
end;

function SquarePower(AQuantity: TAmpereQty): TSquareAmpereQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareAmpereQty): TAmpereQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TKelvinQty): TSquareKelvinQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareKelvinQty): TKelvinQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function CubicPower(AQuantity: TKelvinQty): TCubicKelvinQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 3);
end;

function CubicRoot(AQuantity: TCubicKelvinQty): TKelvinQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/3);
end;

function SquarePower(AQuantity: TSquareKelvinQty): TQuarticKelvinQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TQuarticKelvinQty): TSquareKelvinQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function QuarticPower(AQuantity: TKelvinQty): TQuarticKelvinQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 4);
end;

function QuarticRoot(AQuantity: TQuarticKelvinQty): TKelvinQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/4);
end;

function SquarePower(AQuantity: TRadianQty): TSteradianQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSteradianQty): TRadianQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: THertzQty): TSquareHertzQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareHertzQty): THertzQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TMeterPerSecondQty): TSquareMeterPerSquareSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareMeterPerSquareSecondQty): TMeterPerSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TKilogramMeterPerSecondQty): TSquareKilogramSquareMeterPerSquareSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareKilogramSquareMeterPerSquareSecondQty): TKilogramMeterPerSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TReciprocalSquareRootMeterQty): TReciprocalMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TReciprocalMeterQty): TReciprocalSquareRootMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function CubicPower(AQuantity: TReciprocalSquareRootMeterQty): TReciprocalSquareRootCubicMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 3);
end;

function CubicRoot(AQuantity: TReciprocalSquareRootCubicMeterQty): TReciprocalSquareRootMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/3);
end;

function SquarePower(AQuantity: TReciprocalMeterQty): TReciprocalSquareMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TReciprocalSquareMeterQty): TReciprocalMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function QuarticPower(AQuantity: TReciprocalSquareRootMeterQty): TReciprocalSquareMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 4);
end;

function QuarticRoot(AQuantity: TReciprocalSquareMeterQty): TReciprocalSquareRootMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/4);
end;

function CubicPower(AQuantity: TReciprocalMeterQty): TReciprocalCubicMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 3);
end;

function CubicRoot(AQuantity: TReciprocalCubicMeterQty): TReciprocalMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/3);
end;

function SquarePower(AQuantity: TReciprocalSquareMeterQty): TReciprocalQuarticMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TReciprocalQuarticMeterQty): TReciprocalSquareMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function QuarticPower(AQuantity: TReciprocalMeterQty): TReciprocalQuarticMeterQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 4);
end;

function QuarticRoot(AQuantity: TReciprocalQuarticMeterQty): TReciprocalMeterQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/4);
end;

function SquarePower(AQuantity: TNewtonQty): TSquareNewtonQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareNewtonQty): TNewtonQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TCoulombQty): TSquareCoulombQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareCoulombQty): TCoulombQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TVoltQty): TSquareVoltQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareVoltQty): TVoltQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TKilogramPerSecondQty): TSquareKilogramPerSquareSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareKilogramPerSquareSecondQty): TKilogramPerSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TJouleQty): TSquareJouleQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareJouleQty): TJouleQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

function SquarePower(AQuantity: TKilogramSquareMeterPerSecondQty): TSquareJouleSquareSecondQty;
begin
  result.FValue := IntPower(AQuantity.FValue, 2);
end;

function SquareRoot(AQuantity: TSquareJouleSquareSecondQty): TKilogramSquareMeterPerSecondQty;
begin
  result.FValue := Power(AQuantity.FValue, 1/2);
end;

{ Trigonometric functions }

function Cos(const AQuantity: TRadianQty): double;
begin
  result := System.Cos(AQuantity.FValue);
end;

function Sin(const AQuantity: TRadianQty): double;
begin
  result := System.Sin(AQuantity.FValue);
end;

function Tan(const AQuantity: TRadianQty): double;
begin
  result := Math.Tan(AQuantity.FValue);
end;

function Cotan(const AQuantity: TRadianQty): double;
begin
  result := Math.Cotan(AQuantity.FValue);
end;

function Secant(const AQuantity: TRadianQty): double;
begin
  result := Math.Secant(AQuantity.FValue);
end;

function Cosecant(const AQuantity: TRadianQty): double;
begin
  result := Math.Cosecant(AQuantity.FValue);
end;

function ArcCos(const AValue: double): TRadianQty;
begin
  result.FValue := Math.ArcCos(AValue);
end;

function ArcSin(const AValue: double): TRadianQty;
begin
  result.FValue := Math.ArcSin(AValue);
end;

function ArcTan(const AValue: double): TRadianQty;
begin
  result.FValue := System.ArcTan(AValue);
end;

function ArcTan2(const x, y: double): TRadianQty;
begin
  result.FValue := Math.ArcTan2(x, y);
end;

{ Override trigonometric functions }

function Cos(const AQuantity: double): double;
begin
  result := System.Cos(AQuantity);
end;

function Sin(const AQuantity: double): double;
begin
  result := System.Sin(AQuantity);
end;

function Tan(const AQuantity: double): double;
begin
  result := Math.Tan(AQuantity);
end;

function Cotan(const AQuantity: double): double;
begin
  result := Math.Cotan(AQuantity);
end;

function Secant(const AQuantity: double): double;
begin
  result := Math.Secant(AQuantity);
end;

function Cosecant(const AQuantity: double): double;
begin
  result := Math.Cosecant(AQuantity);
end;

{ Math functions }

generic function Min<TQuantity>(const AValue1, AValue2: TQuantity): TQuantity;
begin
  if AValue1 < AValue2 then
    result := AValue1
  else
    result := AValue2;
end;

generic function Max<TQuantity>(const AValue1, AValue2: TQuantity): TQuantity;
begin
  if AValue1 > AValue2 then
    result := AValue1
  else
    result := AValue2;
end;

end.
